{"uid":"c6f5c08686d72508","name":"test_layer1_flow_control_8021qbb","historyId":"pytest:layer1.test_layer1_flow_control_8021qbb#test_layer1_flow_control_8021qbb","time":{"start":1753368506584,"stop":1753368506614,"duration":30},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b3640fe0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b33ace20>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_layer1_flow_control_8021qbb(api, utils):\n        \"\"\"\n        Test that layer1 flow control 8021qbb configuration settings\n        are being applied correctly.\n    \n        Validation: Validate the layer1 8021qbb properties applied using Restpy\n        \"\"\"\n        port1_delay = 3\n        port1_pfc_priority_groups = [1, 0, 2, 3, 7, 5, 6, 7]\n        directed_address = \"01:80:C2:00:00:01\"\n        config = api.config()\n        config.ports.port().port()\n        tx_port = config.ports[0]\n        rx_port = config.ports[1]\n        tx_port.name = \"Tx port\"\n        tx_port.location = utils.settings.ports[0]\n        rx_port.location = utils.settings.ports[1]\n        rx_port.name = \"Rx port\"\n        config.layer1.layer1().layer1()\n        fcoe1 = config.layer1[0]\n        fcoe2 = config.layer1[1]\n        fcoe1.name = \"enabled pfc delay\"\n        fcoe1.port_names = [tx_port.name]\n        fcoe1.speed = utils.settings.speed\n        fcoe1.auto_negotiate = True\n        fcoe1.media = utils.settings.media\n        fcoe1.flow_control.directed_address = directed_address\n        fcoe1.flow_control.ieee_802_1qbb.pfc_delay = 3\n        fcoe1.flow_control.ieee_802_1qbb.pfc_class_0 = port1_pfc_priority_groups[0]\n        fcoe1.flow_control.ieee_802_1qbb.pfc_class_1 = port1_pfc_priority_groups[1]\n        fcoe1.flow_control.ieee_802_1qbb.pfc_class_4 = port1_pfc_priority_groups[4]\n        fcoe2.name = \"disabled pfc delay\"\n        fcoe2.port_names = [rx_port.name]\n        fcoe2.speed = utils.settings.speed\n        fcoe2.auto_negotiate = True\n        fcoe2.media = utils.settings.media\n        fcoe2.flow_control.directed_address = directed_address\n        fcoe2.flow_control.ieee_802_1qbb.pfc_delay = 0\n>       api.set_config(config)\n\ntests/layer1/test_layer1_flow_control_8021qbb.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b3640fe0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"layer1.test_layer1_flow_control_8021qbb"},{"name":"package","value":"layer1.test_layer1_flow_control_8021qbb"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":176,"unknown":0,"total":177},"items":[{"uid":"6f48fde58dc10765","status":"passed","time":{"start":1752836398951,"stop":1752836431117,"duration":32166}},{"uid":"ee313b4e890a99de","status":"passed","time":{"start":1752760243902,"stop":1752760277907,"duration":34005}},{"uid":"6745ffbd5d0ad7de","status":"passed","time":{"start":1752244885705,"stop":1752244922487,"duration":36782}},{"uid":"53e14f7970b89ca8","status":"passed","time":{"start":1752145840252,"stop":1752145874430,"duration":34178}},{"uid":"c3be7415e0481bf3","status":"passed","time":{"start":1751479010972,"stop":1751479047895,"duration":36923}},{"uid":"15438249e81d46e7","status":"passed","time":{"start":1751472402834,"stop":1751472437243,"duration":34409}},{"uid":"586f3306dff34999","status":"passed","time":{"start":1751283215057,"stop":1751283247222,"duration":32165}},{"uid":"56e2e8de629bcd9d","status":"passed","time":{"start":1751276144532,"stop":1751276181343,"duration":36811}},{"uid":"82e5b52ae656b2bb","status":"passed","time":{"start":1751231642336,"stop":1751231677877,"duration":35541}},{"uid":"84c82a78f9154e69","status":"passed","time":{"start":1750985352305,"stop":1750985385751,"duration":33446}},{"uid":"582f9572e3d35dc8","status":"passed","time":{"start":1750836697285,"stop":1750836733031,"duration":35746}},{"uid":"641b704ec59c7821","status":"passed","time":{"start":1750656827226,"stop":1750656860197,"duration":32971}},{"uid":"80ca4ee0167db4a9","status":"passed","time":{"start":1750246239210,"stop":1750246271535,"duration":32325}},{"uid":"423e934d9bed600","status":"passed","time":{"start":1750239203710,"stop":1750239234131,"duration":30421}},{"uid":"72ed2c33d25c2f05","status":"passed","time":{"start":1749770085540,"stop":1749770123411,"duration":37871}},{"uid":"ee37403edeb0ed7b","status":"passed","time":{"start":1749546564693,"stop":1749546598830,"duration":34137}},{"uid":"d4df90b8bff93f23","status":"passed","time":{"start":1748968328989,"stop":1748968363026,"duration":34037}},{"uid":"976cc07def58e2e","status":"passed","time":{"start":1748929822995,"stop":1748929863976,"duration":40981}},{"uid":"fff0b8957e8f5327","status":"passed","time":{"start":1748864245704,"stop":1748864277576,"duration":31872}},{"uid":"97fd562db8b18fc","status":"passed","time":{"start":1748857106711,"stop":1748857144908,"duration":38197}}]},"tags":[]},"source":"c6f5c08686d72508.json","parameterValues":[]}
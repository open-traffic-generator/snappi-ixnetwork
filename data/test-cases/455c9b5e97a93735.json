{"uid":"455c9b5e97a93735","name":"test_traffic_gptv_config","historyId":"pytest:traffic.test_traffic_gptv_config#test_traffic_gptv_config","time":{"start":1758266026949,"stop":1758266077003,"duration":50054},"status":"failed","statusMessage":"Exception: Time out occurred while waiting for stats to be as expected","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7f7cabc50040>\nb2b_raw_config = <snappi.snappi.Config object at 0x7f7caa5c1f80>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_traffic_gptv_config(api, b2b_raw_config, utils):\n        \"\"\"\n        Configure the devices on Tx and Rx Port.\n        Configure the flow with devices as end points.\n        run the traffic\n        Validation,\n        - validate the port and flow statistics.\n        \"\"\"\n    \n        size = 1518\n        packets = 100\n    \n        flow = b2b_raw_config.flows[0]\n        eth, gptv = flow.packet.ethernet().gtpv1()\n    \n        eth.src.value = \"00:CD:DC:CD:DC:CD\"\n        eth.dst.value = \"00:AB:BC:AB:BC:AB\"\n    \n        gptv.version.value=1\n        gptv.protocol_type.value=1\n        gptv.message_type.value=1\n        gptv.message_length.value=256\n    \n        flow.duration.fixed_packets.packets = packets\n        flow.size.fixed = size\n        flow.rate.percentage = 10\n        flow.metrics.enable = True\n    \n        utils.start_traffic(api, b2b_raw_config)\n>       utils.wait_for(\n            lambda: results_ok(api, utils, size, packets),\n            \"stats to be as expected\",\n            timeout_seconds=10,\n        )\n\ntests/traffic/test_traffic_gptv_config.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc = <function test_traffic_gptv_config.<locals>.<lambda> at 0x7f7caa5ae5f0>\ncondition_str = 'stats to be as expected', interval_seconds = 0.5\ntimeout_seconds = 10\n\n    def wait_for(func, condition_str, interval_seconds=None, timeout_seconds=None):\n        \"\"\"\n        Keeps calling the `func` until it returns true or `timeout_seconds` occurs\n        every `interval_seconds`. `condition_str` should be a constant string\n        implying the actual condition being tested.\n        Usage\n        -----\n        If we wanted to poll for current seconds to be divisible by `n`, we would\n        implement something similar to following:\n        ```\n        import time\n        def wait_for_seconds(n, **kwargs):\n            condition_str = 'seconds to be divisible by %d' % n\n            def condition_satisfied():\n                return int(time.time()) % n == 0\n            poll_until(condition_satisfied, condition_str, **kwargs)\n        ```\n        \"\"\"\n        if interval_seconds is None:\n            interval_seconds = settings.interval_seconds\n        if timeout_seconds is None:\n            timeout_seconds = settings.timeout_seconds\n        start_seconds = int(time.time())\n    \n        print(\"\\n\\nWaiting for %s ...\" % condition_str)\n        while True:\n            res = func()\n            if res:\n                print(\"Done waiting for %s\" % condition_str)\n                break\n            if res is None:\n                raise Exception(\"Wait aborted for %s\" % condition_str)\n            if timed_out(start_seconds, timeout_seconds):\n                msg = \"Time out occurred while waiting for %s\" % condition_str\n>               raise Exception(msg)\nE               Exception: Time out occurred while waiting for stats to be as expected\n\ntests/utils/common.py:224: Exception","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"traffic.test_traffic_gptv_config"},{"name":"package","value":"traffic.test_traffic_gptv_config"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":209,"unknown":0,"total":221},"items":[{"uid":"6656b6c4d27b6632","status":"passed","time":{"start":1758256257749,"stop":1758256301707,"duration":43958}},{"uid":"5476f9c9a45d5de3","status":"passed","time":{"start":1758221452042,"stop":1758221495508,"duration":43466}},{"uid":"2e1a7cca9894fa35","status":"passed","time":{"start":1758211521335,"stop":1758211569484,"duration":48149}},{"uid":"f26d9a8455132174","status":"passed","time":{"start":1758203104632,"stop":1758203155115,"duration":50483}},{"uid":"b6c1fe415edccc30","status":"passed","time":{"start":1758195412209,"stop":1758195463595,"duration":51386}},{"uid":"50dc678b8d0e5bf","status":"passed","time":{"start":1758187874145,"stop":1758187923164,"duration":49019}},{"uid":"926b8bfe82c6a61a","status":"passed","time":{"start":1758119103099,"stop":1758119152507,"duration":49408}},{"uid":"4aabd1bfb7a1358a","status":"passed","time":{"start":1758089161716,"stop":1758089210946,"duration":49230}},{"uid":"6d70f5240a29700a","status":"passed","time":{"start":1757655105546,"stop":1757655151477,"duration":45931}},{"uid":"ae2924f6018d947d","status":"passed","time":{"start":1756798205879,"stop":1756798263625,"duration":57746}},{"uid":"d6d41f6ce86353f4","status":"passed","time":{"start":1756451364315,"stop":1756451411165,"duration":46850}},{"uid":"6db3f14156c0c5d3","status":"passed","time":{"start":1756387647155,"stop":1756387694171,"duration":47016}},{"uid":"636414626bc2ab19","status":"passed","time":{"start":1756373178971,"stop":1756373228183,"duration":49212}},{"uid":"c5592e1ce087c2bd","status":"passed","time":{"start":1756365456170,"stop":1756365505340,"duration":49170}},{"uid":"72f30f57d13cdac9","status":"passed","time":{"start":1756357974989,"stop":1756358020947,"duration":45958}},{"uid":"35f1ce1d4ef86c83","status":"passed","time":{"start":1756235874804,"stop":1756235922506,"duration":47702}},{"uid":"dbd163dd8cbe2324","status":"passed","time":{"start":1756228444993,"stop":1756228496319,"duration":51326}},{"uid":"dcedd129b380d610","status":"passed","time":{"start":1756153102547,"stop":1756153150993,"duration":48446}},{"uid":"fa25d1d1e6320eb8","status":"passed","time":{"start":1756145518681,"stop":1756145565969,"duration":47288}},{"uid":"215944bcd9948e69","status":"passed","time":{"start":1756135659955,"stop":1756135709143,"duration":49188}}]},"tags":[]},"source":"455c9b5e97a93735.json","parameterValues":[]}
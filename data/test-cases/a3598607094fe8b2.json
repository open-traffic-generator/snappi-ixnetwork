{"uid":"a3598607094fe8b2","name":"test_encrypt_with_mka","historyId":"pytest:macsec.test_macsec_mka_traffic#test_encrypt_with_mka","time":{"start":1758633854796,"stop":1758633964324,"duration":109528},"status":"failed","statusMessage":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7f2c7fbf8b40>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7f2c7fbf8b40> = <snappi.snappi.MetricsResponse object at 0x7f2c7f965f80>.mka_metrics","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7f2c8114dde0>\nb2b_raw_config = <snappi.snappi.Config object at 0x7f2c7faf3bf0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_encrypt_with_mka(api, b2b_raw_config, utils):\n        \"\"\"\n        Test for the macsec configuration\n        \"\"\"\n        config = b2b_raw_config\n        api.set_config(api.config())\n        config.flows.clear()\n        #ixnetwork = api._ixnetwork\n    \n        p1, p2 = config.ports\n        d1, d2 = config.devices.device(name=\"enc_only_macsec1\").device(name=\"enc_only_macsec2\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:01:00:11\", \"00:00:00:02:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n    \n    \n        ####################\n        # MACsec\n        ####################\n        macsec1, macsec2 = d1.macsec, d2.macsec\n        macsec1_int, macsec2_int = macsec1.ethernet_interfaces.add(), macsec2.ethernet_interfaces.add()\n        macsec1_int.eth_name, macsec2_int.eth_name = eth1.name, eth2.name\n        secy1, secy2 = macsec1_int.secure_entity, macsec2_int.secure_entity\n        secy1.name, secy2.name = \"macsec1\", \"macsec2\"\n    \n        # Data plane and crypto engine\n        secy1.data_plane.choice = secy2.data_plane.choice = \"encapsulation\"\n        secy1.data_plane.encapsulation.crypto_engine.choice = secy2.data_plane.encapsulation.crypto_engine.choice = \"encrypt_only\"\n    \n        # Data plane and crypto engine\n        secy1.data_plane.choice = secy2.data_plane.choice = \"encapsulation\"\n        secy1.data_plane.encapsulation.crypto_engine.choice = secy2.data_plane.encapsulation.crypto_engine.choice = \"encrypt_only\"\n        secy1_crypto_engine_enc_only, secy2_crypto_engine_enc_only = secy1.data_plane.encapsulation.crypto_engine.encrypt_only, secy2.data_plane.encapsulation.crypto_engine.encrypt_only\n    \n        # Data plane Tx SC\n        secy1_dataplane_txsc1, secy2_dataplane_txsc1 = secy1_crypto_engine_enc_only.secure_channels.add(), secy2_crypto_engine_enc_only.secure_channels.add()\n    \n        # Fixed PN\n        secy1_dataplane_txsc1.tx_pn.choice = secy2_dataplane_txsc1.tx_pn.choice = \"fixed_pn\"\n    \n        # OR incrementing PN\n        #secy1_dataplane_txsc1.tx_pn.choice = secy2_dataplane_txsc1.tx_pn.choice = \"incrementing_pn\"\n        #secy1_dataplane_txsc1.tx_pn.incrementing.starting_pn = secy2_dataplane_txsc1.tx_pn.incrementing.starting_pn = 1\n        #secy1_dataplane_txsc1.tx_pn.incrementing.count = secy2_dataplane_txsc1.tx_pn.incrementing.count = 10000\n    \n        ####################\n        # MKA\n        ####################\n        secy1_key_gen_proto, secy2_key_gen_proto = secy1.key_generation_protocol, secy2.key_generation_protocol\n        secy1_key_gen_proto.choice = secy2_key_gen_proto.choice = \"mka\"\n        kay1, kay2 = secy1_key_gen_proto.mka, secy2_key_gen_proto.mka\n        kay1.name, kay2.name = \"mka1\", \"mka2\"\n    \n        # Basic properties\n        kay1.basic.key_derivation_function = kay2.basic.key_derivation_function = \"aes_cmac_128\"\n    \n        # Key source: PSK\n        kay1_key_src, kay2_key_src = kay1.basic.key_source, kay2.basic.key_source\n        kay1_key_src.choice = kay2_key_src.choice = \"psk\"\n        kay1_psk_chain, kay2_psk_chain = kay1_key_src.psks, kay2_key_src.psks\n    \n        # PSK 1\n        kay1_psk1, kay2_psk1 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk1.cak_name = kay2_psk1.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD01\"\n        kay1_psk1.cak_value = kay2_psk1.cak_value = \"0xF123456789ABCDEF0123456789ABCD01\"\n    \n        kay1_psk1.start_offset_time.hh = kay2_psk1.start_offset_time.hh = 0\n        kay1_psk1.start_offset_time.mm = kay2_psk1.start_offset_time.mm = 0\n    \n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 0\n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 22\n    \n        # PSK 2\n        kay1_psk2, kay2_psk2 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk2.cak_name = kay2_psk2.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD02\"\n        kay1_psk2.cak_value = kay2_psk2.cak_value = \"0xF123456789ABCDEF0123456789ABCD02\"\n    \n        kay1_psk2.start_offset_time.hh = kay2_psk2.start_offset_time.hh = 0\n        kay1_psk2.start_offset_time.mm = kay2_psk2.start_offset_time.mm = 22\n    \n        kay1_psk2.end_offset_time.hh = kay2_psk2.end_offset_time.hh = 0\n        kay1_psk2.end_offset_time.hh = kay2_psk2.end_offset_time.hh = 0\n    \n        # Rekey mode\n        kay1_rekey_mode, kay2_rekey_mode = kay1.basic.rekey_mode, kay2.basic.rekey_mode\n        #kay1_rekey_mode.choice = kay2_rekey_mode.choice = \"dont_rekey\"\n        kay1_rekey_mode.choice = kay2_rekey_mode.choice = \"timer_based\"\n        kay1_rekey_timer_based, kay2_rekey_timer_based = kay1_rekey_mode.timer_based, kay2_rekey_mode.timer_based\n        kay1_rekey_timer_based.choice = kay2_rekey_timer_based.choice = \"fixed_count\"\n        kay1_rekey_timer_based.fixed_count = kay2_rekey_timer_based.fixed_count = 20\n        kay1_rekey_timer_based.interval = kay2_rekey_timer_based.interval = 200\n    \n        # Remaining basic properties autofilled\n    \n        # Key server\n        kay1_key_server, kay2_key_server = kay1.key_server, kay2.key_server\n        kay1_key_server.cipher_suite = kay2_key_server.cipher_suite = \"gcm_aes_128\"\n    \n        # Tx SC\n        kay1_tx, kay2_tx = kay1.tx, kay2.tx\n        kay1_txsc1, kay2_txsc1 = kay1_tx.secure_channels.add(), kay2_tx.secure_channels.add()\n        kay1_txsc1.name, kay2_txsc1.name = \"txsc1\", \"txsc2\"\n        kay1_txsc1.system_id, kay2_txsc1.system_id = eth1.mac, eth2.mac\n        # Remaining Tx SC settings autofilled\n    \n        ####################\n        # Traffic\n        ####################\n        # Gratuitous ARP is sent so that DUT can learn our IP. Grat ARP source/destination are local address\n        # DUT MAC needs to be configured manually stateless encyption only engine cannot decrypt any packet including DUT ARP\n        ip1.address = \"10.1.1.1\"\n        ip2.address = \"10.1.1.2\"\n    \n        ip1.prefix = 24\n        ip2.prefix = 24\n    \n        ip1.gateway = ip2.address\n        ip2.gateway = ip1.address\n    \n        ip1.gateway_mac.choice = \"value\"\n        ip1.gateway_mac.value = eth2.mac\n    \n        ip2.gateway_mac.choice = \"value\"\n        ip2.gateway_mac.value = eth1.mac\n    \n        # Flow\n        f1 = config.flows.flow(name=\"f1\")[-1]\n    \n        # IP\n        f1.packet.ethernet().macsec().ipv4()\n    \n        # DSCP\n        ip = f1.packet[-1]\n        ip.priority.choice = ip.priority.DSCP\n        ip.priority.dscp.phb.values = [\n        ip.priority.dscp.phb.CS2,\n        ip.priority.dscp.phb.CS1,\n        ip.priority.dscp.phb.CS5,\n        ]\n        ip.priority.dscp.ecn.value = 3\n    \n    \n        # Ethernet/VLAN traffic from secY to secY endpoints\n        #f1.tx_rx.device.tx_names = [secy1.name]\n        #f1.tx_rx.device.rx_names = [secy2.name]\n    \n        # Ethernet/VLAN traffic from ethernet to ethernet endpoints\n        #f1.tx_rx.device.tx_names = [eth1.name]\n        #f1.tx_rx.device.rx_names = [eth2.name]\n    \n        # IPv4 traffic from IP to IP endpoints\n        f1.tx_rx.device.tx_names = [ip1.name]\n        f1.tx_rx.device.rx_names = [ip2.name]\n    \n        # Rate\n        f1.rate.pps = 10\n    \n        # egress only tracking(eotr)\n        eotr = config.egress_only_tracking\n        eotr1 = eotr.add()\n        eotr1.port_name = p2.name\n    \n        # eotr filter\n        eotr1_filter1 = eotr1.filters.add()\n        eotr1_filter1 = \"auto_macsec\"\n    \n        # eotr metric tag for destination MAC 3rd byte from MSB: LS 4 bits\n        eotr1_mt1 = eotr1.metric_tags.add()\n        eotr1_mt1.name = \"dest_mac_addr\"\n        eotr1_mt1.rx_offset = 29\n        eotr1_mt1.length = 3\n    \n        #eotr1_mt2 = eotr1.metric_tags.add()\n        #eotr1_mt2.name = \"macsec_sci\"\n        #eotr1_mt2.rx_offset = 189\n        #eotr1_mt2.length = 3\n    \n        utils.start_traffic(api, config)\n    \n        ####################\n        # MKA stats\n        ####################\n        utils.wait_for(\n            lambda: results_mka_ok(api), \"stats to be as expected\", timeout_seconds=20\n        )\n        enums = [\n            \"mkpdu_tx\",\n            \"mkpdu_rx\",\n            \"live_peer_count\",\n            \"potential_peer_count\",\n            \"latest_key_tx_peer_count\",\n            \"latest_key_rx_peer_count\",\n            \"malformed_mkpdu\",\n            \"icv_mismatch\",\n        ]\n        expected_results = {\n            \"enc_only_macsec1\": [0, 0, 0, 0, 0, 0, 0, 0],\n            \"enc_only_macsec2\": [0, 0, 0, 0, 0, 0, 0, 0],\n        }\n        req = api.metrics_request()\n        req.mka.peer_names = [\"enc_only_macsec1\"]\n        results = api.get_metrics(req)\n>       assert len(results.mka_metrics) == 1\nE       assert 2 == 1\nE        +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7f2c7fbf8b40>)\nE        +    where <snappi.snappi.MkaMetricIter object at 0x7f2c7fbf8b40> = <snappi.snappi.MetricsResponse object at 0x7f2c7f965f80>.mka_metrics\n\ntests/macsec/test_macsec_mka_traffic.py:212: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1518 None filter. Egress only traffic signature is reset so that all packets are filtered in at port rx. Please ensure that there is no device with protocols configured on this port or this port is not part of ann LACP LAG.","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"macsec.test_macsec_mka_traffic"},{"name":"package","value":"macsec.test_macsec_mka_traffic"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":92,"broken":0,"skipped":1,"passed":101,"unknown":0,"total":194},"items":[{"uid":"bdfc32f7c83415b0","status":"passed","time":{"start":1758625583144,"stop":1758625732647,"duration":149503}},{"uid":"64f1d65dc98c9466","status":"passed","time":{"start":1758569175499,"stop":1758569325569,"duration":150070}},{"uid":"ebdff0de47c88734","status":"passed","time":{"start":1758561165365,"stop":1758561299804,"duration":134439}},{"uid":"134e41087a95aae2","status":"passed","time":{"start":1758552031944,"stop":1758552167657,"duration":135713}},{"uid":"5a9a6eba19b2cfd5","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1758541969381,"stop":1758541986890,"duration":17509}},{"uid":"ef2779861137be1","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1758534144550,"stop":1758534159843,"duration":15293}},{"uid":"517dbf45c56f327a","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1758526353634,"stop":1758526371982,"duration":18348}},{"uid":"712da268432a4efb","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1758517867315,"stop":1758517879652,"duration":12337}},{"uid":"3cac87db89af13b0","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1758344714423,"stop":1758344730779,"duration":16356}},{"uid":"d66817bbc7b4dad6","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1758335408673,"stop":1758335423980,"duration":15307}},{"uid":"2959a5882ff53ca5","status":"passed","time":{"start":1758318657548,"stop":1758318803734,"duration":146186}},{"uid":"401be08c8b28a1d0","status":"passed","time":{"start":1758284318408,"stop":1758284453727,"duration":135319}},{"uid":"a59f4fe719a497cd","status":"passed","time":{"start":1758276810478,"stop":1758276944003,"duration":133525}},{"uid":"f310e84a08dcba05","status":"passed","time":{"start":1758266026949,"stop":1758266163374,"duration":136425}},{"uid":"306bb2b97ad63cf5","status":"passed","time":{"start":1758256257749,"stop":1758256382465,"duration":124716}},{"uid":"bf19db5b6e88d72a","status":"passed","time":{"start":1758221452042,"stop":1758221587975,"duration":135933}},{"uid":"5d9fd19e3ea50be2","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MacsecMetricIter object at 0x7f0fc6a0bf80>)\n +    where <snappi.snappi.MacsecMetricIter object at 0x7f0fc6a0bf80> = <snappi.snappi.MetricsResponse object at 0x7f0fc5b25440>.macsec_metrics","time":{"start":1758211521335,"stop":1758211636605,"duration":115270}},{"uid":"f8eabea4060ef176","status":"passed","time":{"start":1758203104632,"stop":1758203240040,"duration":135408}},{"uid":"d7bc67c95df7b2ad","status":"passed","time":{"start":1758195412209,"stop":1758195547246,"duration":135037}},{"uid":"d9bf6d07ad2b487c","status":"passed","time":{"start":1758187874145,"stop":1758187999666,"duration":125521}}]},"tags":[]},"source":"a3598607094fe8b2.json","parameterValues":[]}
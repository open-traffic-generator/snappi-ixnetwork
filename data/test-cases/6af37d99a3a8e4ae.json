{"uid":"6af37d99a3a8e4ae","name":"test_encrypt_with_mka","historyId":"pytest:macsec.test_macsec_mka_traffic#test_encrypt_with_mka","time":{"start":1754037821403,"stop":1754037923561,"duration":102158},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 463, in set_control_state\n    self.ngpf.set_protocol_state(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 266, in set_protocol_state\n    self.api._ixnetwork.StartAllProtocols(\"sync\")\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/ixnetwork.py\", line 2640, in StartAllProtocols\n    return self._execute(\"startAllProtocols\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  System Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\n\nSystem Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f93eeb92350>\npayload = <snappi.snappi.ControlState object at 0x7f93ed47f240>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n>                   self.ngpf.set_protocol_state(request_payload)\n\nsnappi_ixnetwork/snappi_api.py:463: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/device/ngpf.py:266: in set_protocol_state\n    self.api._ixnetwork.StartAllProtocols(\"sync\")\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/ixnetwork.py:2640: in StartAllProtocols\n    return self._execute(\"startAllProtocols\", payload=payload, response_object=None)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py:452: in _execute\n    response = self._connection._execute(url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:293: in _execute\n    return self._send_recv(\"POST\", url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:576: in _send_recv\n    return self._poll()\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:644: in _poll\n    return self._process_response_status_code(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f93eec10880>\nurl = None\nheaders = {'Connection': 'keep-alive', 'Content-Type': 'application/json', 'User-Agent': 'ixnetwork-restpy', 'X-Api-Key': 'd4b68b7dac174f9a98cae783a4010716', ...}\nresponse = <Response [400]>\nasync_status = {'executionTimeMs': 254.0, 'id': '', 'message': None, 'progress': 100, ...}\n\n    def _process_response_status_code(self, url, headers, response, async_status=False):\n        errors = []\n        # add the initial error\n        if async_status is True:\n            async_status = response.json()\n            if (\n                \"message\" in async_status\n                and async_status[\"message\"] is not None\n                and \"API CONTENTION\" in async_status[\"message\"]\n            ):\n                response.status_code = 409\n            else:\n                response.status_code = 400\n            error = \"\"\n            if \"message\" in async_status and async_status[\"message\"] is not None:\n                error += \" \" + async_status[\"message\"]\n            if \"result\" in async_status and async_status[\"result\"] is not None:\n                error += \" \" + async_status[\"result\"]\n            errors.append(error)\n        else:\n            try:\n                for error in response.json()[\"errors\"]:\n                    errors.append(error[\"detail\"])\n            except:\n                errors.append(response.text)\n        # add any /globals/appErrors/error items\n        try:\n            preamble = url[\n                0 : url.find(\"/\", url.find(\"/sessions/\") + len(\"/sessions/\"))\n            ]\n            url = preamble + \"/ixnetwork/globals/appErrors/error\"\n            self._print_request(\"GET\", url)\n            error_response = self._session.request(\n                \"GET\",\n                url,\n                headers=headers,\n                verify=self._verify_cert,\n                allow_redirects=False,\n            )\n            server_info = \"\\tCurrent Server Errors/Warnings:\"\n            for error in error_response.json():\n                if error[\"errorLevel\"] in [\"kError\", \"kWarning\"]:\n                    if server_info is not None:\n                        errors.append(server_info)\n                        server_info = None\n                    errors.append(\n                        \"\\t%s [%s] [%s] %s\"\n                        % (\n                            error[\"lastModified\"],\n                            error[\"errorLevel\"][1:].upper(),\n                            error[\"name\"],\n                            error[\"description\"],\n                        )\n                    )\n        except:\n            pass\n        # raise the appropriate error\n        message = \"\\n\".join(errors)\n        logging.getLogger(__name__).debug(message)\n        if response.status_code == 400:\n>           raise BadRequestError(message, response.status_code)\nE           ixnetwork_restpy.errors.BadRequestError:  System Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           \nE           System Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:480: BadRequestError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f93eeb92350>\nb2b_raw_config = <snappi.snappi.Config object at 0x7f93ed6a6c50>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_encrypt_with_mka(api, b2b_raw_config, utils):\n        \"\"\"\n        Test for the macsec configuration\n        \"\"\"\n        config = b2b_raw_config\n        api.set_config(api.config())\n        config.flows.clear()\n        #ixnetwork = api._ixnetwork\n    \n        p1, p2 = config.ports\n        d1, d2 = config.devices.device(name=\"enc_only_macsec1\").device(name=\"enc_only_macsec2\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:01:00:11\", \"00:00:00:02:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n    \n    \n        ####################\n        # MACsec\n        ####################\n        macsec1, macsec2 = d1.macsec, d2.macsec\n        macsec1_int, macsec2_int = macsec1.ethernet_interfaces.add(), macsec2.ethernet_interfaces.add()\n        macsec1_int.eth_name, macsec2_int.eth_name = eth1.name, eth2.name\n        secy1, secy2 = macsec1_int.secure_entity, macsec2_int.secure_entity\n        secy1.name, secy2.name = \"macsec1\", \"macsec2\"\n    \n        # Data plane and crypto engine\n        secy1.data_plane.choice = secy2.data_plane.choice = \"encapsulation\"\n        secy1.data_plane.encapsulation.crypto_engine.choice = secy2.data_plane.encapsulation.crypto_engine.choice = \"encrypt_only\"\n    \n        # Data plane and crypto engine\n        secy1.data_plane.choice = secy2.data_plane.choice = \"encapsulation\"\n        secy1.data_plane.encapsulation.crypto_engine.choice = secy2.data_plane.encapsulation.crypto_engine.choice = \"encrypt_only\"\n        secy1_crypto_engine_enc_only, secy2_crypto_engine_enc_only = secy1.data_plane.encapsulation.crypto_engine.encrypt_only, secy2.data_plane.encapsulation.crypto_engine.encrypt_only\n    \n        # Data plane Tx SC\n        secy1_dataplane_txsc1, secy2_dataplane_txsc1 = secy1_crypto_engine_enc_only.secure_channels.add(), secy2_crypto_engine_enc_only.secure_channels.add()\n    \n        # Fixed PN\n        secy1_dataplane_txsc1.tx_pn.choice = secy2_dataplane_txsc1.tx_pn.choice = \"fixed_pn\"\n    \n        # OR incrementing PN\n        #secy1_dataplane_txsc1.tx_pn.choice = secy2_dataplane_txsc1.tx_pn.choice = \"incrementing_pn\"\n        #secy1_dataplane_txsc1.tx_pn.incrementing.starting_pn = secy2_dataplane_txsc1.tx_pn.incrementing.starting_pn = 1\n        #secy1_dataplane_txsc1.tx_pn.incrementing.count = secy2_dataplane_txsc1.tx_pn.incrementing.count = 10000\n    \n        ####################\n        # MKA\n        ####################\n        secy1_key_gen_proto, secy2_key_gen_proto = secy1.key_generation_protocol, secy2.key_generation_protocol\n        secy1_key_gen_proto.choice = secy2_key_gen_proto.choice = \"mka\"\n        kay1, kay2 = secy1_key_gen_proto.mka, secy2_key_gen_proto.mka\n        kay1.name, kay2.name = \"mka1\", \"mka2\"\n    \n        # Basic properties\n        kay1.basic.key_derivation_function = kay2.basic.key_derivation_function = \"aes_cmac_128\"\n    \n        # Key source: PSK\n        kay1_key_src, kay2_key_src = kay1.basic.key_source, kay2.basic.key_source\n        kay1_key_src.choice = kay2_key_src.choice = \"psk\"\n        kay1_psk_chain, kay2_psk_chain = kay1_key_src.psks, kay2_key_src.psks\n    \n        # PSK 1\n        kay1_psk1, kay2_psk1 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk1.cak_name = kay2_psk1.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD01\"\n        kay1_psk1.cak_value = kay2_psk1.cak_value = \"0xF123456789ABCDEF0123456789ABCD01\"\n    \n        kay1_psk1.start_offset_time.hh = kay2_psk1.start_offset_time.hh = 0\n        kay1_psk1.start_offset_time.mm = kay2_psk1.start_offset_time.mm = 0\n    \n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 0\n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 22\n    \n        # PSK 2\n        kay1_psk2, kay2_psk2 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk2.cak_name = kay2_psk2.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD02\"\n        kay1_psk2.cak_value = kay2_psk2.cak_value = \"0xF123456789ABCDEF0123456789ABCD02\"\n    \n        kay1_psk2.start_offset_time.hh = kay2_psk2.start_offset_time.hh = 0\n        kay1_psk2.start_offset_time.mm = kay2_psk2.start_offset_time.mm = 22\n    \n        kay1_psk2.end_offset_time.hh = kay2_psk2.end_offset_time.hh = 0\n        kay1_psk2.end_offset_time.hh = kay2_psk2.end_offset_time.hh = 0\n    \n        # Rekey mode\n        kay1_rekey_mode, kay2_rekey_mode = kay1.basic.rekey_mode, kay2.basic.rekey_mode\n        #kay1_rekey_mode.choice = kay2_rekey_mode.choice = \"dont_rekey\"\n        kay1_rekey_mode.choice = kay2_rekey_mode.choice = \"timer_based\"\n        kay1_rekey_timer_based, kay2_rekey_timer_based = kay1_rekey_mode.timer_based, kay2_rekey_mode.timer_based\n        kay1_rekey_timer_based.choice = kay2_rekey_timer_based.choice = \"fixed_count\"\n        kay1_rekey_timer_based.fixed_count = kay2_rekey_timer_based.fixed_count = 20\n        kay1_rekey_timer_based.interval = kay2_rekey_timer_based.interval = 200\n    \n        # Remaining basic properties autofilled\n    \n        # Key server\n        kay1_key_server, kay2_key_server = kay1.key_server, kay2.key_server\n        kay1_key_server.cipher_suite = kay2_key_server.cipher_suite = \"gcm_aes_128\"\n    \n        # Tx SC\n        kay1_tx, kay2_tx = kay1.tx, kay2.tx\n        kay1_txsc1, kay2_txsc1 = kay1_tx.secure_channels.add(), kay2_tx.secure_channels.add()\n        kay1_txsc1.name, kay2_txsc1.name = \"txsc1\", \"txsc2\"\n        kay1_txsc1.system_id, kay2_txsc1.system_id = eth1.mac, eth2.mac\n        # Remaining Tx SC settings autofilled\n    \n        ####################\n        # Traffic\n        ####################\n        # Gratuitous ARP is sent so that DUT can learn our IP. Grat ARP source/destination are local address\n        # DUT MAC needs to be configured manually stateless encyption only engine cannot decrypt any packet including DUT ARP\n        ip1.address = \"10.1.1.1\"\n        ip2.address = \"10.1.1.2\"\n    \n        ip1.prefix = 24\n        ip2.prefix = 24\n    \n        ip1.gateway = ip2.address\n        ip2.gateway = ip1.address\n    \n        ip1.gateway_mac.choice = \"value\"\n        ip1.gateway_mac.value = eth2.mac\n    \n        ip2.gateway_mac.choice = \"value\"\n        ip2.gateway_mac.value = eth1.mac\n    \n        # Flow\n        f1 = config.flows.flow(name=\"f1\")[-1]\n    \n        # IP\n        f1.packet.ethernet().macsec().ipv4()\n    \n        # DSCP\n        ip = f1.packet[-1]\n        ip.priority.choice = ip.priority.DSCP\n        ip.priority.dscp.phb.values = [\n        ip.priority.dscp.phb.CS2,\n        ip.priority.dscp.phb.CS1,\n        ip.priority.dscp.phb.CS5,\n        ]\n        ip.priority.dscp.ecn.value = 3\n    \n    \n        # Ethernet/VLAN traffic from secY to secY endpoints\n        #f1.tx_rx.device.tx_names = [secy1.name]\n        #f1.tx_rx.device.rx_names = [secy2.name]\n    \n        # Ethernet/VLAN traffic from ethernet to ethernet endpoints\n        #f1.tx_rx.device.tx_names = [eth1.name]\n        #f1.tx_rx.device.rx_names = [eth2.name]\n    \n        # IPv4 traffic from IP to IP endpoints\n        f1.tx_rx.device.tx_names = [ip1.name]\n        f1.tx_rx.device.rx_names = [ip2.name]\n    \n        # Rate\n        f1.rate.pps = 10\n    \n        # egress only tracking(eotr)\n        eotr = config.egress_only_tracking\n        eotr1 = eotr.add()\n        eotr1.port_name = p2.name\n    \n        # eotr filter\n        eotr1_filter1 = eotr1.filters.add()\n        eotr1_filter1 = \"auto_macsec\"\n    \n        # eotr metric tag for destination MAC 3rd byte from MSB: LS 4 bits\n        eotr1_mt1 = eotr1.metric_tags.add()\n        eotr1_mt1.name = \"dest_mac_addr\"\n        eotr1_mt1.offset = 29\n        eotr1_mt1.length = 3\n    \n        #eotr1_mt2 = eotr1.metric_tags.add()\n        #eotr1_mt2.name = \"macsec_sci\"\n        #eotr1_mt2.offset = 189\n        #eotr1_mt2.length = 3\n    \n>       utils.start_traffic(api, config)\n\ntests/macsec/test_macsec_mka_traffic.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/common.py:145: in start_traffic\n    api.set_control_state(cs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f93eeb92350>\npayload = <snappi.snappi.ControlState object at 0x7f93ed47f240>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    event_state = request_payload.state\n                    with Timer(self, \"Setting route state\"):\n                        event_names = self.ngpf.set_route_state(\n                            request_payload\n                        )\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n                self.traffic_item.transmit(request_payload)\n            elif control_option is not None:\n                msg = \"{} is not a supported choice for metrics; \\\n                the supported choices are \\\n                ['port', 'protocol', traffic]\".format(\n                    control_option\n                )\n                raise SnappiIxnException(400, msg)\n            self._event_info = EventInfo(event_type, event_state, event_names)\n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 463, in set_control_state\nE               self.ngpf.set_protocol_state(request_payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 266, in set_protocol_state\nE               self.api._ixnetwork.StartAllProtocols(\"sync\")\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/ixnetwork.py\", line 2640, in StartAllProtocols\nE               return self._execute(\"startAllProtocols\", payload=payload, response_object=None)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\nE               response = self._connection._execute(url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\nE               return self._send_recv(\"POST\", url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\nE               return self._poll()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\nE               return self._process_response_status_code(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\nE               raise BadRequestError(message, response.status_code)\nE             System Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           \nE           System Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nE           There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nE           Please install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\n\nsnappi_ixnetwork/snappi_api.py:483: SnappiIxnException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"macsec.test_macsec_mka_traffic"},{"name":"package","value":"macsec.test_macsec_mka_traffic"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":79,"broken":0,"skipped":1,"passed":57,"unknown":0,"total":137},"items":[{"uid":"1323e19ee3c4ce50","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 463, in set_control_state\n    self.ngpf.set_protocol_state(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 266, in set_protocol_state\n    self.api._ixnetwork.StartAllProtocols(\"sync\")\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/ixnetwork.py\", line 2640, in StartAllProtocols\n    return self._execute(\"startAllProtocols\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  System Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\n\nSystem Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.","time":{"start":1754025412828,"stop":1754025514995,"duration":102167}},{"uid":"488c645a27a43ad6","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 458, in set_control_state\n    self.ngpf.set_protocol_state(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 274, in set_protocol_state\n    self.api._ixnetwork.StartAllProtocols(\"sync\")\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/ixnetwork.py\", line 2640, in StartAllProtocols\n    return self._execute(\"startAllProtocols\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  System Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\n\nSystem Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.","time":{"start":1754000569227,"stop":1754000676874,"duration":107647}},{"uid":"777d66611c5a78cb","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 463, in set_control_state\n    self.ngpf.set_protocol_state(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 266, in set_protocol_state\n    self.api._ixnetwork.StartAllProtocols(\"sync\")\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/ixnetwork.py\", line 2640, in StartAllProtocols\n    return self._execute(\"startAllProtocols\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  System Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\n\nSystem Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.","time":{"start":1753965242171,"stop":1753965347197,"duration":105026}},{"uid":"427ac1c3f316357","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 463, in set_control_state\n    self.ngpf.set_protocol_state(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 266, in set_protocol_state\n    self.api._ixnetwork.StartAllProtocols(\"sync\")\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/ixnetwork.py\", line 2640, in StartAllProtocols\n    return self._execute(\"startAllProtocols\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  System Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\n\nSystem Exception Caught. Exception Text: There is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.\nThere is no license available for IxN-SMACsec. Please check license availability in Ixia License Utility.\nPlease install \"930-2135: IXIA IxNetwork, Optional Software, Static MACSec Emulation\" to enable the feature.","time":{"start":1753390964676,"stop":1753391066468,"duration":101792}},{"uid":"fdc52c68389aa0dc","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","time":{"start":1753368506584,"stop":1753368506611,"duration":27}},{"uid":"a60d3c5ff0b12d83","status":"passed","time":{"start":1752836398951,"stop":1752836524304,"duration":125353}},{"uid":"9d40827a765f4fa0","status":"passed","time":{"start":1752760243902,"stop":1752760365404,"duration":121502}},{"uid":"28f0c267b2518468","status":"passed","time":{"start":1752244885705,"stop":1752245014530,"duration":128825}},{"uid":"3f2cd5fae6005338","status":"passed","time":{"start":1752145840252,"stop":1752145979356,"duration":139104}},{"uid":"4c2ab6a7f971572a","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1751479010972,"stop":1751479022497,"duration":11525}},{"uid":"d78dc1dc4cc2ae16","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1751472402834,"stop":1751472424400,"duration":21566}},{"uid":"7af56b242e44cad3","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1751283215057,"stop":1751283231555,"duration":16498}},{"uid":"cc7a974e97c68679","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1751276144532,"stop":1751276158940,"duration":14408}},{"uid":"59d25c708eeb94d0","status":"passed","time":{"start":1751231642336,"stop":1751231777177,"duration":134841}},{"uid":"e150481072c25127","status":"passed","time":{"start":1750985352305,"stop":1750985484985,"duration":132680}},{"uid":"57d462ba99f7906","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1750836697285,"stop":1750836710382,"duration":13097}},{"uid":"95726e81c69c650b","status":"passed","time":{"start":1750656827226,"stop":1750656961880,"duration":134654}},{"uid":"5d6f97b601a7441c","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1750246239210,"stop":1750246250510,"duration":11300}},{"uid":"ae69a25437a39fab","status":"failed","statusDetails":"AttributeError: 'EgressOnlyTrackingMetricTags' object has no attribute 'rx_offset'","time":{"start":1750239203710,"stop":1750239227830,"duration":24120}},{"uid":"a748647c853734c1","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7f8712354940>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7f8712354940> = <snappi.snappi.MetricsResponse object at 0x7f871136a930>.mka_metrics","time":{"start":1749770085540,"stop":1749770181083,"duration":95543}}]},"tags":[]},"source":"6af37d99a3a8e4ae.json","parameterValues":[]}
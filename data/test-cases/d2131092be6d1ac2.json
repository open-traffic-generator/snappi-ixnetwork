{"uid":"d2131092be6d1ac2","name":"test_diff_latency_mode","historyId":"pytest:metrics.test_diff_latency_mode#test_diff_latency_mode","time":{"start":1744642070405,"stop":1744642077402,"duration":6997},"status":"failed","statusMessage":"assert None\n +  where None = <function search at 0x7fbfb7524430>('Latency mode needs to be same for all flows', '  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\\n    self.config_ixnetwork(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\\n    self.traffic_item.config()\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\\n    tr = self.create_traffic(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\\n    for snappi_eotr in config.egress_only_trackings:\\n \\'Config\\' object has no attribute \\'egress_only_trackings\\'')\n +    where <function search at 0x7fbfb7524430> = re.search\n +    and   '  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\\n    self.config_ixnetwork(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\\n    self.traffic_item.config()\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\\n    tr = self.create_traffic(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\\n    for snappi_eotr in config.egress_only_trackings:\\n \\'Config\\' object has no attribute \\'egress_only_trackings\\'' = str(  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\\n    self.config_ixnetwork(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\\n    self.traffic_item.config()\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\\n    tr = self.create_traffic(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\\n    for snappi_eotr in config.egress_only_trackings:\\n 'Config' object has no attribute 'egress_only_trackings')","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nconfig = <snappi.snappi.Config object at 0x7fbfb1edb470>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:364: in config_ixnetwork\n    self.traffic_item.config()\nsnappi_ixnetwork/trafficitem.py:867: in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\nsnappi_ixnetwork/trafficitem.py:534: in get_ixn_config\n    tr = self.create_traffic(config)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7fbfb5e2caf0>\nconfig = <snappi.snappi.Config object at 0x7fbfb1edb470>\n\n    def create_traffic(self, config):\n        self.logger.debug(\"Creating Traffic\")\n        flows = config.flows\n        tr = {\"xpath\": \"/traffic\", \"trafficItem\": []}\n        ports = self.get_ports_encap(config)\n        devices = self.get_device_info(config)\n        for index, flow in enumerate(flows):\n            flow_name = flow._properties.get(\"name\")\n            self.logger.debug(\"Creating Traffic Item %s\" % flow_name)\n            if flow_name is None:\n                raise Exception(\"name shall not be null for flows\")\n            if flow._properties.get(\"tx_rx\") is None:\n                msg = (\n                    \"Please configure the flow endpoint\"\n                    \"for flow indexed at %s\" % index\n                )\n                raise Exception(msg)\n            self._endpoint_validation(flow)\n            if flow.tx_rx.choice is None:\n                msg = \"Flow endpoint needs to be either port or device\"\n                raise Exception(msg)\n    \n            tr_xpath = \"/traffic/trafficItem[%d]\" % self.traffic_index\n            tr[\"trafficItem\"].append(\n                {\n                    \"xpath\": tr_xpath,\n                    \"name\": \"%s\" % flow.name,\n                    \"srcDestMesh\": self._get_mesh_type(flow),\n                }\n            )\n    \n            tr[\"trafficItem\"][-1][\"endpointSet\"] = [\n                {\n                    \"xpath\": tr[\"trafficItem\"][-1][\"xpath\"]\n                    + \"/endpointSet[1]\",\n                }\n            ]\n            if flow.tx_rx.choice == \"port\":\n                tr_type = \"raw\"\n                ep = getattr(flow.tx_rx, \"port\")\n                tx_objs = [\"%s/protocols\" % ports.get(ep.tx_name)]\n                rx_objs = [\"%s/protocols\" % ports.get(ep.rx_name)]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = [\n                    o for o in tx_objs\n                ]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"destinations\"] = [\n                    o for o in rx_objs\n                ]\n            else:\n                ep = getattr(flow.tx_rx, \"device\")\n                tr_type = devices[ep.tx_names[0]][\"type\"]\n                source = []\n                destinations = []\n                scalable_sources = []\n                scalable_destinations = []\n                self._gen_dev_endpoint(\n                    devices, ep.tx_names, source, scalable_sources\n                )\n                self._gen_dev_endpoint(\n                    devices, ep.rx_names, destinations, scalable_destinations\n                )\n                if len(source) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = source\n                if len(destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"destinations\"\n                    ] = destinations\n                if len(scalable_sources) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableSources\"\n                    ] = scalable_sources\n                if len(scalable_destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableDestinations\"\n                    ] = scalable_destinations\n    \n            tr[\"trafficItem\"][-1][\"trafficType\"] = tr_type\n            if tr_type == \"raw\":\n                tr[\"trafficItem\"][-1][\"configElement\"] = self.config_raw_stack(\n                    tr_xpath, self._flows_packet[index]\n                )\n            self.traffic_index += 1\n            self.logger.debug(\n                \"Flow %s converted to %s\" % (flow_name, tr[\"trafficItem\"][-1])\n            )\n    \n        # egress only tracking\n        tr[\"egressOnlyTracking\"] = []\n>       for snappi_eotr in config.egress_only_trackings:\nE       AttributeError: 'Config' object has no attribute 'egress_only_trackings'\n\nsnappi_ixnetwork/trafficitem.py:688: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nb2b_raw_config = <snappi.snappi.Config object at 0x7fbfb1edb470>\ntx_port = <snappi.snappi.Port object at 0x7fbfb1edb560>\nrx_port = <snappi.snappi.Port object at 0x7fbfb1edb330>\n\n    def test_diff_latency_mode(api, b2b_raw_config, tx_port, rx_port):\n        \"\"\"\n        Ixnetwork supports only one latency mode for all flows\n    \n        Validation:\n        ixNetwork should throw an error to provide only same mode\n            for all flows\n        \"\"\"\n        SIZE = 1024\n    \n        # flow -f1 config\n        f1 = b2b_raw_config.flows[0]\n    \n        f1.size.fixed = SIZE\n    \n        f1.metrics.enable = True\n        f1.metrics.loss = True\n        f1.metrics.timestamps = True\n    \n        # flow -f2 config\n        f2 = b2b_raw_config.flows.flow(name=\"f2\")[-1]\n        f2.tx_rx.port.tx_name = tx_port.name\n        f2.tx_rx.port.rx_name = rx_port.name\n    \n        f2.size.fixed = SIZE\n    \n        f2.metrics.enable = True\n        f2.metrics.loss = True\n        f2.metrics.timestamps = True\n    \n        # Latency Config\n        f1.metrics.latency.enable = True\n        f1.metrics.latency.mode = f1.metrics.latency.STORE_FORWARD\n    \n        f2.metrics.latency.enable = True\n        f2.metrics.latency.mode = f2.metrics.latency.CUT_THROUGH\n    \n        try:\n>           api.set_config(b2b_raw_config)\n\ntests/metrics/test_diff_latency_mode.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nconfig = <snappi.snappi.Config object at 0x7fbfb1edb470>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\nE               self.traffic_item.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\nE               ixn_traffic_item = self.get_ixn_config(self._config)[0]\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\nE               tr = self.create_traffic(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\nE               for snappi_eotr in config.egress_only_trackings:\nE            'Config' object has no attribute 'egress_only_trackings'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nb2b_raw_config = <snappi.snappi.Config object at 0x7fbfb1edb470>\ntx_port = <snappi.snappi.Port object at 0x7fbfb1edb560>\nrx_port = <snappi.snappi.Port object at 0x7fbfb1edb330>\n\n    def test_diff_latency_mode(api, b2b_raw_config, tx_port, rx_port):\n        \"\"\"\n        Ixnetwork supports only one latency mode for all flows\n    \n        Validation:\n        ixNetwork should throw an error to provide only same mode\n            for all flows\n        \"\"\"\n        SIZE = 1024\n    \n        # flow -f1 config\n        f1 = b2b_raw_config.flows[0]\n    \n        f1.size.fixed = SIZE\n    \n        f1.metrics.enable = True\n        f1.metrics.loss = True\n        f1.metrics.timestamps = True\n    \n        # flow -f2 config\n        f2 = b2b_raw_config.flows.flow(name=\"f2\")[-1]\n        f2.tx_rx.port.tx_name = tx_port.name\n        f2.tx_rx.port.rx_name = rx_port.name\n    \n        f2.size.fixed = SIZE\n    \n        f2.metrics.enable = True\n        f2.metrics.loss = True\n        f2.metrics.timestamps = True\n    \n        # Latency Config\n        f1.metrics.latency.enable = True\n        f1.metrics.latency.mode = f1.metrics.latency.STORE_FORWARD\n    \n        f2.metrics.latency.enable = True\n        f2.metrics.latency.mode = f2.metrics.latency.CUT_THROUGH\n    \n        try:\n            api.set_config(b2b_raw_config)\n        except Exception as e:\n            print(e)\n>           assert re.search(\"Latency mode needs to be same for all flows\", str(e))\nE           assert None\nE            +  where None = <function search at 0x7fbfb7524430>('Latency mode needs to be same for all flows', '  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\\n    self.config_ixnetwork(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\\n    self.traffic_item.config()\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\\n    tr = self.create_traffic(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\\n    for snappi_eotr in config.egress_only_trackings:\\n \\'Config\\' object has no attribute \\'egress_only_trackings\\'')\nE            +    where <function search at 0x7fbfb7524430> = re.search\nE            +    and   '  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\\n    self.config_ixnetwork(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\\n    self.traffic_item.config()\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\\n    tr = self.create_traffic(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\\n    for snappi_eotr in config.egress_only_trackings:\\n \\'Config\\' object has no attribute \\'egress_only_trackings\\'' = str(  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\\n    self.config_ixnetwork(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\\n    self.traffic_item.config()\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\\n    tr = self.create_traffic(config)\\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\\n    for snappi_eotr in config.egress_only_trackings:\\n 'Config' object has no attribute 'egress_only_trackings')\n\ntests/metrics/test_diff_latency_mode.py:45: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Config validation 0.005s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Ports configuration 0.293s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Captures configuration 1.331s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.097s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Speed change not require due to redundant Layer1 config","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Aggregation mode speed change 0.005s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Location configuration 0.733s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Layer1 configuration 2.184s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Lag Configuration 0.086s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Convert device config : 0.559s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Push IxNetwork device config : 0.105s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Devices configuration 0.759s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Flows configuration 0.458s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":16,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"metrics.test_diff_latency_mode"},{"name":"package","value":"metrics.test_diff_latency_mode"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":87,"unknown":0,"total":88},"items":[{"uid":"b7a63e5a58d491db","status":"passed","time":{"start":1744628606357,"stop":1744628612815,"duration":6458}},{"uid":"5b8f31b3c96d26c6","status":"passed","time":{"start":1744607503134,"stop":1744607508973,"duration":5839}},{"uid":"bf6ce454b08bf22d","status":"passed","time":{"start":1744319569642,"stop":1744319581045,"duration":11403}},{"uid":"d1edb53f940babc9","status":"passed","time":{"start":1744308828836,"stop":1744308834443,"duration":5607}},{"uid":"6e9e94092f28e384","status":"passed","time":{"start":1744118178111,"stop":1744118183671,"duration":5560}},{"uid":"abe4d7ce28f594d8","status":"passed","time":{"start":1744106575909,"stop":1744106581721,"duration":5812}},{"uid":"6d8c4a208c425826","status":"passed","time":{"start":1743796899201,"stop":1743796905268,"duration":6067}},{"uid":"c0ee3e890e24f0a7","status":"passed","time":{"start":1743756339018,"stop":1743756344671,"duration":5653}},{"uid":"e1902dd4ab9aa727","status":"passed","time":{"start":1743749241780,"stop":1743749247533,"duration":5753}},{"uid":"e6c557f3f9024bf2","status":"passed","time":{"start":1743703353732,"stop":1743703365883,"duration":12151}},{"uid":"dc4a8cb535df143e","status":"passed","time":{"start":1743696488928,"stop":1743696495096,"duration":6168}},{"uid":"172aac29494c1216","status":"passed","time":{"start":1743689614468,"stop":1743689620104,"duration":5636}},{"uid":"7e744c291716ae3f","status":"passed","time":{"start":1743655642521,"stop":1743655648280,"duration":5759}},{"uid":"eaf8cbb84575ad13","status":"passed","time":{"start":1743167009876,"stop":1743167015797,"duration":5921}},{"uid":"d173639405912002","status":"passed","time":{"start":1743158796170,"stop":1743158802110,"duration":5940}},{"uid":"603d751e0247b474","status":"passed","time":{"start":1743154377859,"stop":1743154383719,"duration":5860}},{"uid":"dd0efe5dffa92540","status":"passed","time":{"start":1743142356248,"stop":1743142362272,"duration":6024}},{"uid":"67eff5703f43386c","status":"passed","time":{"start":1743134333235,"stop":1743134339231,"duration":5996}},{"uid":"b56adf6fdf2bf9bb","status":"passed","time":{"start":1743107933073,"stop":1743107938705,"duration":5632}},{"uid":"ca24e913eec0553d","status":"passed","time":{"start":1743101127011,"stop":1743101133649,"duration":6638}}]},"tags":[]},"source":"d2131092be6d1ac2.json","parameterValues":[]}
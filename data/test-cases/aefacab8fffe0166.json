{"uid":"aefacab8fffe0166","name":"test_bgp_evpn_validation","historyId":"pytest:bgp_evpn.test_bgp_evpn_attribute_validation#test_bgp_evpn_validation","time":{"start":1753368506584,"stop":1753368506660,"duration":76},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b37679c0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b3997be0>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_bgp_evpn_validation(api, utils):\n        \"Validate BGP EVPN Attributes against RestPy\"\n    \n        BGPV4_EVPN_ETH_SEGMENT = {\n            \"DfElectionTimer\": 10,\n            \"EsiValue\": \"1000000000000000\",\n            \"EsiLabel\": 8,\n            \"EnableSingleActive\": \"true\",\n            \"MultiExitDiscriminator\": 5,\n            \"EnableMultiExitDiscriminator\": \"true\",\n            \"Origin\": \"egp\",\n            \"EnableOrigin\": \"true\",\n            \"EnableCommunity\": \"true\",\n            \"EnableExtendedCommunity\": \"true\",\n            \"EnableAsPathSegments\": \"true\",\n            \"AsSetMode\": \"includelocalasasasset\",\n        }\n    \n        BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST = {\n            \"Type\": \"manual\",\n            \"AsNumber\": \"8\",\n            \"LastTwoOctets\": \"8\",\n        }\n    \n        BGPV4_EVPN_ETH_SEGMENT_EXT_COMMUNITIES_lIST = {\n            \"Type\": \"opaque\",\n            \"SubType\": \"color\",\n            \"ColorValue\": \"200\",\n        }\n    \n        BGPV4_EVPN_ETH_SEGMENT_ASPATH_SEGMENTS_lIST = {\n            \"SegmentType\": \"asseqconfederation\",\n        }\n    \n        BGPV4_EVPN_VXLAN = {\n            \"AdRouteLabel\": 10,\n            \"UpstreamDownstreamAssignedMplsLabel\": 20,\n            \"RdASNumber\": 1000,\n            \"RdEvi\": 10,\n            \"MultiExitDiscriminator\": 99,\n        }\n    \n        BGPV4_EVPN_VXLAN_EXPORT_TARGET = {\n            \"TargetAs4Number\": \"100\",\n            \"TargetAssignedNumber\": \"20\",\n        }\n    \n        BGPV4_EVPN_VXLAN_IMPORT_TARGET = {\n            \"TargetAs4Number\": \"200\",\n            \"TargetAssignedNumber\": \"30\",\n        }\n    \n        BGPV4_EVPN_VXLAN_L3_EXPORT_TARGET = {\n            \"TargetAs4Number\": \"300\",\n            \"TargetAssignedNumber\": \"50\",\n        }\n    \n        BGPV4_EVPN_VXLAN_L3_IMPORT_TARGET = {\n            \"TargetAs4Number\": \"400\",\n            \"TargetAssignedNumber\": \"60\",\n        }\n    \n        BROADCAST_DOMAIN = {\"EthernetTagId\": \"5\", \"EnableVlanAwareService\": \"true\"}\n    \n        MAC_ADDRESS = {\n            \"Mac\": \"10:11:22:33:44:55\",\n            \"PrefixLength\": \"48\",\n            \"NumberOfAddressesAsy\": \"1\",\n        }\n    \n        IP_ADDRESS = {\n            \"NetworkAddress\": \"2.2.2.2\",\n            \"PrefixLength\": \"24\",\n            \"NumberOfAddressesAsy\": \"1\",\n        }\n    \n        IPV6_ADDRESS = {\n            \"NetworkAddress\": \"2000:0:2:1::1\",\n            \"PrefixLength\": \"64\",\n            \"NumberOfAddressesAsy\": \"1\",\n        }\n    \n        CMAC_PROPERTIES = {\n            \"FirstLabelStart\": \"16\",\n            \"SecondLabelStart\": \"20\",\n            \"MultiExitDiscriminator\": \"37\",\n            \"IncludeDefaultGatewayExtendedCommunity\": \"true\",\n        }\n    \n        # Creating Ports\n        config = api.config()\n        p1 = config.ports.port(name=\"p1\", location=utils.settings.ports[0])[-1]\n        # Create BGP devices on tx\n        tx_d = config.devices.device(name=\"tx_d\")[-1]\n        tx_eth = tx_d.ethernets.add()\n        tx_eth.connection.port_name = p1.name\n        tx_eth.name = \"tx_eth\"\n        tx_eth.mac = \"00:11:00:00:00:01\"\n        tx_ip = tx_eth.ipv4_addresses.ipv4(\n            name=\"tx_ip\", address=\"20.20.20.2\", gateway=\"20.20.20.1\"\n        )[-1]\n    \n        # tx_bgp\n        tx_bgp = tx_d.bgp\n        tx_bgp.router_id = \"192.0.0.1\"\n        tx_bgp_iface = tx_bgp.ipv4_interfaces.v4interface(ipv4_name=tx_ip.name)[-1]\n        tx_bgp_peer = tx_bgp_iface.peers.v4peer(\n            name=\"tx_eBGP\",\n            peer_address=\"20.20.20.1\",\n            as_type=\"ebgp\",\n            as_number=100,\n        )[-1]\n    \n        # Create & advertise loopback under bgp in tx and rx\n        tx_l1 = tx_d.ipv4_loopbacks.add()\n        tx_l1.name = \"tx_loopback1\"\n        tx_l1.eth_name = \"tx_eth\"\n        tx_l1.address = \"1.1.1.1\"\n        tx_l1_r = tx_bgp_peer.v4_routes.add(name=\"tx_l1\")\n        tx_l1_r.addresses.add(address=\"1.1.1.1\", prefix=32)\n    \n        # Create BGP EVPN on tx\n        tx_vtep = config.devices.device(name=\"tx_vtep\")[-1]\n        tx_vtep_bgp = tx_vtep.bgp\n        tx_vtep_bgp.router_id = \"190.0.0.1\"\n        tx_vtep_bgp_iface = tx_vtep_bgp.ipv4_interfaces.v4interface(\n            ipv4_name=tx_l1.name\n        )[-1]\n        tx_vtep_bgp_peer = tx_vtep_bgp_iface.peers.v4peer(\n            name=\"bgp1\", peer_address=\"2.2.2.2\", as_type=\"ibgp\", as_number=101\n        )[-1]\n    \n        tx_eth_seg = tx_vtep_bgp_peer.evpn_ethernet_segments.ethernetsegment()[-1]\n        tx_eth_seg.df_election.election_timer = BGPV4_EVPN_ETH_SEGMENT[\n            \"DfElectionTimer\"\n        ]\n        tx_eth_seg.esi = BGPV4_EVPN_ETH_SEGMENT[\"EsiValue\"]\n        tx_eth_seg.esi_label = BGPV4_EVPN_ETH_SEGMENT[\"EsiLabel\"]\n        tx_eth_seg.active_mode = tx_eth_seg.SINGLE_ACTIVE\n        tx_eth_seg.advanced.origin = tx_eth_seg.advanced.EGP\n        tx_eth_seg.advanced.multi_exit_discriminator = BGPV4_EVPN_ETH_SEGMENT[\n            \"MultiExitDiscriminator\"\n        ]\n        tx_eth_seg_community = tx_eth_seg.communities.add()\n        tx_eth_seg_community.type = tx_eth_seg_community.MANUAL_AS_NUMBER\n        tx_eth_seg_community.as_number = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"AsNumber\"]\n        )\n        tx_eth_seg_community.as_custom = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"LastTwoOctets\"]\n        )\n        tx_eth_seg_ext_community = tx_eth_seg.ext_communities.add()\n        tx_eth_seg_ext_community.type = \"opaque\"\n        tx_eth_seg_ext_community.subtype = \"color\"\n        tx_eth_seg_ext_community.value = \"0000000000C8\"\n        tx_eth_seg.as_path.as_set_mode = \"include_as_set\"\n        tx_eth_seg.as_path.segments.add(\"as_confed_seq\", [2, 3])\n    \n        # Adding Tx EVI on the Ethernet Segment\n        tx_evi_vxlan = tx_eth_seg.evis.evi_vxlan()[-1]\n        tx_evi_vxlan.route_distinguisher.rd_type = (\n            tx_evi_vxlan.route_distinguisher.AS_2OCTET\n        )\n        tx_evi_vxlan.route_distinguisher.rd_value = (\n            str(BGPV4_EVPN_VXLAN[\"RdASNumber\"])\n            + \":\"\n            + str(BGPV4_EVPN_VXLAN[\"RdEvi\"])\n        )\n        tx_evi_vxlan.ad_label = BGPV4_EVPN_VXLAN[\"AdRouteLabel\"]\n        tx_evi_vxlan.pmsi_label = BGPV4_EVPN_VXLAN[\n            \"UpstreamDownstreamAssignedMplsLabel\"\n        ]\n    \n        export_rt = tx_evi_vxlan.route_target_export.routetarget()[-1]\n        import_rt = tx_evi_vxlan.route_target_import.routetarget()[-1]\n        export_rt.rt_type = export_rt.AS_4OCTET\n        export_rt.rt_value = (\n            BGPV4_EVPN_VXLAN_EXPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV4_EVPN_VXLAN_EXPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n        import_rt.rt_type = import_rt.AS_4OCTET\n        import_rt.rt_value = (\n            BGPV4_EVPN_VXLAN_IMPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV4_EVPN_VXLAN_IMPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n    \n        l3_export_rt = tx_evi_vxlan.l3_route_target_export.routetarget()[-1]\n        l3_import_rt = tx_evi_vxlan.l3_route_target_import.routetarget()[-1]\n        l3_export_rt.rt_type = l3_export_rt.AS_4OCTET\n        l3_export_rt.rt_value = (\n            BGPV4_EVPN_VXLAN_L3_EXPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV4_EVPN_VXLAN_L3_EXPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n        l3_import_rt.rt_type = l3_import_rt.AS_4OCTET\n        l3_import_rt.rt_value = (\n            BGPV4_EVPN_VXLAN_L3_IMPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV4_EVPN_VXLAN_L3_IMPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n    \n        tx_evi_vxlan.advanced.origin = tx_evi_vxlan.advanced.EGP\n        tx_evi_vxlan.advanced.multi_exit_discriminator = BGPV4_EVPN_VXLAN[\n            \"MultiExitDiscriminator\"\n        ]\n        tx_evi_vxlan_comm = tx_evi_vxlan.communities.add()\n        tx_evi_vxlan_comm.type = tx_evi_vxlan_comm.MANUAL_AS_NUMBER\n        tx_evi_vxlan_comm.as_number = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"AsNumber\"]\n        )\n        tx_evi_vxlan_comm.as_custom = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"LastTwoOctets\"]\n        )\n        tx_evi_vxlan_ext_comm = tx_evi_vxlan.ext_communities.add()\n        tx_evi_vxlan_ext_comm.type = \"opaque\"\n        tx_evi_vxlan_ext_comm.subtype = \"color\"\n        tx_evi_vxlan_ext_comm.value = \"0000000000C8\"\n        tx_evi_vxlan.as_path.segments.add(\"as_confed_seq\", [9, 10])\n    \n        # Adding tx Broadcast Domain per EVI and MAC range\n        tx_evpn_brodcast_domain = tx_evi_vxlan.broadcast_domains.broadcastdomain()[\n            -1\n        ]\n        tx_evpn_brodcast_domain.ethernet_tag_id = int(\n            BROADCAST_DOMAIN[\"EthernetTagId\"]\n        )\n        tx_evpn_brodcast_domain.vlan_aware_service = True\n        tx_broadcast_macrange = tx_evpn_brodcast_domain.cmac_ip_range.cmaciprange(\n            l2vni=16, l3vni=20, name=\"tx_cmaciprange\", include_default_gateway=True\n        )[-1]\n        tx_broadcast_macrange.mac_addresses.address = MAC_ADDRESS[\"Mac\"]\n        tx_broadcast_macrange.ipv4_addresses.address = IP_ADDRESS[\"NetworkAddress\"]\n        tx_broadcast_macrange.ipv6_addresses.address = IPV6_ADDRESS[\n            \"NetworkAddress\"\n        ]\n    \n        tx_broadcast_macrange.advanced.multi_exit_discriminator = int(\n            CMAC_PROPERTIES[\"MultiExitDiscriminator\"]\n        )\n    \n        cmac_comm = tx_broadcast_macrange.communities.add()\n        cmac_comm.type = cmac_comm.MANUAL_AS_NUMBER\n        cmac_comm.as_number = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"AsNumber\"]\n        )\n        cmac_comm.as_custom = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"LastTwoOctets\"]\n        )\n        cmac_ext_comm = tx_broadcast_macrange.ext_communities.add()\n        cmac_ext_comm.type = \"opaque\"\n        cmac_ext_comm.subtype = \"color\"\n        cmac_ext_comm.value = \"0000000000C8\"\n        tx_broadcast_macrange.as_path.segments.add(\"as_confed_seq\", [9, 10])\n    \n>       api.set_config(config)\n\ntests/bgp_evpn/test_bgp_evpn_attribute_validation.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b37679c0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp_evpn.test_bgp_evpn_attribute_validation"},{"name":"package","value":"bgp_evpn.test_bgp_evpn_attribute_validation"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":173,"unknown":0,"total":177},"items":[{"uid":"55db29fb5c5b8abf","status":"passed","time":{"start":1752836398951,"stop":1752836433697,"duration":34746}},{"uid":"bb5d2ecc1a0acf7a","status":"passed","time":{"start":1752760243902,"stop":1752760283289,"duration":39387}},{"uid":"e5a88c14fc55ace","status":"passed","time":{"start":1752244885705,"stop":1752244921092,"duration":35387}},{"uid":"776c5e73fa397c83","status":"passed","time":{"start":1752145840252,"stop":1752145876621,"duration":36369}},{"uid":"df53fa3eb0c4cfcb","status":"passed","time":{"start":1751479010972,"stop":1751479043239,"duration":32267}},{"uid":"b0638b1d8aac3489","status":"passed","time":{"start":1751472402834,"stop":1751472437259,"duration":34425}},{"uid":"36fad7c2e403deb2","status":"passed","time":{"start":1751283215057,"stop":1751283248933,"duration":33876}},{"uid":"83861e4301f626","status":"passed","time":{"start":1751276144532,"stop":1751276178069,"duration":33537}},{"uid":"9426c74eacd7bb83","status":"passed","time":{"start":1751231642336,"stop":1751231677089,"duration":34753}},{"uid":"cc83f137adf29c57","status":"passed","time":{"start":1750985352305,"stop":1750985388564,"duration":36259}},{"uid":"6f2e3fe152f4aac9","status":"passed","time":{"start":1750836697285,"stop":1750836735631,"duration":38346}},{"uid":"493b76a7cb86d88c","status":"passed","time":{"start":1750656827226,"stop":1750656861405,"duration":34179}},{"uid":"77c60f28c9bf2267","status":"passed","time":{"start":1750246239210,"stop":1750246272090,"duration":32880}},{"uid":"7db519fb7c777534","status":"passed","time":{"start":1750239203710,"stop":1750239237398,"duration":33688}},{"uid":"948418f438aa9361","status":"passed","time":{"start":1749770085540,"stop":1749770117138,"duration":31598}},{"uid":"8a64af1f58316e8f","status":"passed","time":{"start":1749546564693,"stop":1749546597764,"duration":33071}},{"uid":"8a1d93efc7fba331","status":"passed","time":{"start":1748968328989,"stop":1748968363447,"duration":34458}},{"uid":"fded5ab002511c5c","status":"passed","time":{"start":1748929822995,"stop":1748929863658,"duration":40663}},{"uid":"e9c328e04af95918","status":"passed","time":{"start":1748864245704,"stop":1748864283577,"duration":37873}},{"uid":"70689f66b854c091","status":"passed","time":{"start":1748857106711,"stop":1748857142882,"duration":36171}}]},"tags":[]},"source":"aefacab8fffe0166.json","parameterValues":[]}
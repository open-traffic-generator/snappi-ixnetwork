{"uid":"2954724b7f37c86a","name":"test_bgp_evpn","historyId":"pytest:bgp_evpn.test_bgp_evpn#test_bgp_evpn","time":{"start":1742993864845,"stop":1742993877303,"duration":12458},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\n    self.ngpf.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\n    self._configure_topology()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\n    self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\n 'Config' object has no attribute 'stateful_flows'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe639af70>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:363: in config_ixnetwork\n    self.ngpf.config()\nsnappi_ixnetwork/device/ngpf.py:69: in config\n    self._configure_topology()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.device.ngpf.Ngpf object at 0x7fdbe3e23b50>\n\n    def _configure_topology(self):\n        self.stop_topology()\n        self.api._remove(self.api._topology, [])\n        ixn_topos = self.create_node(self._ixn_config, \"topology\")\n        # Configured all interfaces\n        self._configure_device_group(ixn_topos)\n    \n        # Configure all MACsec interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._macsec.config(device)\n    \n        # We need to configure all interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._bgp.config(device)\n    \n        #Configure all RoCEv2 interface before configure protocols\n        for device in self.api.snappi_config.devices:\n>           self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE           AttributeError: 'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/device/ngpf.py:125: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_bgp_evpn(api, utils):\n        # Creating Ports\n        config = api.config()\n        p1 = config.ports.port(name=\"p1\", location=utils.settings.ports[0])[-1]\n        p2 = config.ports.port(name=\"p2\", location=utils.settings.ports[1])[-1]\n    \n        # Create BGP devices on tx & rx\n        tx_d = config.devices.device(name=\"tx_d\")[-1]\n        rx_d = config.devices.device(name=\"rx_d\")[-1]\n    \n        tx_eth = tx_d.ethernets.add()\n        tx_eth.connection.port_name = p1.name\n        rx_eth = rx_d.ethernets.add()\n        rx_eth.connection.port_name = p2.name\n    \n        tx_eth.name = \"tx_eth\"\n        tx_eth.mac = \"00:11:00:00:00:01\"\n        tx_ip = tx_eth.ipv4_addresses.ipv4(\n            name=\"tx_ip\", address=\"20.20.20.2\", gateway=\"20.20.20.1\"\n        )[-1]\n    \n        rx_eth.name = \"rx_eth\"\n        rx_eth.mac = \"00:12:00:00:00:01\"\n        rx_ip = rx_eth.ipv4_addresses.ipv4(\n            name=\"rx_ip\", address=\"20.20.20.1\", gateway=\"20.20.20.2\"\n        )[-1]\n    \n        # tx_bgp\n        tx_bgp = tx_d.bgp\n        tx_bgp.router_id = \"192.0.0.1\"\n        tx_bgp_iface = tx_bgp.ipv4_interfaces.v4interface(ipv4_name=tx_ip.name)[-1]\n        tx_bgp_peer = tx_bgp_iface.peers.v4peer(\n            name=\"tx_eBGP\",\n            peer_address=\"20.20.20.1\",\n            as_type=\"ebgp\",\n            as_number=100,\n        )[-1]\n    \n        # rx_bgp\n        rx_bgp = rx_d.bgp\n        rx_bgp.router_id = \"193.0.0.1\"\n        rx_bgp_iface = rx_bgp.ipv4_interfaces.v4interface(ipv4_name=rx_ip.name)[-1]\n        rx_bgp_peer = rx_bgp_iface.peers.v4peer(\n            name=\"rx_eBGP\",\n            peer_address=\"20.20.20.2\",\n            as_type=\"ebgp\",\n            as_number=200,\n        )[-1]\n    \n        # Create & advertise loopback under bgp in tx and rx\n        tx_l1 = tx_d.ipv4_loopbacks.add()\n        tx_l1.name = \"tx_loopback1\"\n        tx_l1.eth_name = \"tx_eth\"\n        tx_l1.address = \"1.1.1.1\"\n    \n        tx_l1_r = tx_bgp_peer.v4_routes.add(name=\"tx_l1\")\n        tx_l1_r.addresses.add(address=\"1.1.1.1\", prefix=32)\n    \n        rx_l1 = rx_d.ipv4_loopbacks.add()\n        rx_l1.name = \"rx_loopback1\"\n        rx_l1.eth_name = \"rx_eth\"\n        rx_l1.address = \"2.2.2.2\"\n    \n        rx_l1_r = rx_bgp_peer.v4_routes.add(name=\"rx_l1\")\n        rx_l1_r.addresses.add(address=\"2.2.2.2\", prefix=32)\n    \n        # Create BGP EVPN on tx\n        tx_vtep = config.devices.device(name=\"tx_vtep\")[-1]\n        tx_vtep_bgp = tx_vtep.bgp\n        tx_vtep_bgp.router_id = \"190.0.0.1\"\n        tx_vtep_bgp_iface = tx_vtep_bgp.ipv4_interfaces.v4interface(\n            ipv4_name=tx_l1.name\n        )[-1]\n        tx_vtep_bgp_peer = tx_vtep_bgp_iface.peers.v4peer(\n            name=\"bgp1\", peer_address=\"2.2.2.2\", as_type=\"ibgp\", as_number=101\n        )[-1]\n    \n        # Adding 1 Ethernet Segment per Bgp Peer\n        tx_vtep_es1 = tx_vtep_bgp_peer.evpn_ethernet_segments.ethernetsegment()[-1]\n    \n        # Adding 1 EVI on the Ethernet Segment\n        tx_es1_evisV4_1 = tx_vtep_es1.evis.evi_vxlan()[-1]\n        tx_es1_evisV4_1.route_distinguisher.auto_config_rd_ip_addr = True\n        tx_es1_evisV4_1.route_distinguisher.rd_type = (\n            tx_es1_evisV4_1.route_distinguisher.AS_2OCTET\n        )\n        tx_es1_evisV4_1.route_distinguisher.rd_value = \"100:1\"\n    \n        export_rt = tx_es1_evisV4_1.route_target_export.routetarget()[-1]\n        import_rt = tx_es1_evisV4_1.route_target_import.routetarget()[-1]\n        export_rt.rt_type = export_rt.AS_2OCTET\n        export_rt.rt_value = \"100:20\"\n    \n        import_rt.rt_type = import_rt.AS_2OCTET\n        import_rt.rt_value = \"100:20\"\n    \n        # Adding 1 Broadcast Domain per EVI\n        tx_es1_evisV4_1_bd_1 = tx_es1_evisV4_1.broadcast_domains.broadcastdomain()[\n            -1\n        ]\n    \n        # Adding 1 MAC Range Per Broadcast Domain\n        tx_es1_evisV4_1_bd_1_mac_Pool1 = (\n            tx_es1_evisV4_1_bd_1.cmac_ip_range.cmaciprange(l2vni=20)[-1]\n        )\n    \n        tx_es1_evisV4_1_bd_1_mac_Pool1.name = \"tx_mac_pool\"\n        tx_es1_evisV4_1_bd_1_mac_Pool1.mac_addresses.address = \"10:11:22:33:44:55\"\n    \n        # Adding 1 IP Range Per Broadcast Domain\n        tx_es1_evisV4_1_bd_1_mac_Pool1.ipv4_addresses.address = \"192.168.0.1\"\n    \n        # Create BGP EVPN on rx\n        rx_vtep = config.devices.device(name=\"rx_vtep\")[-1]\n        rx_vtep_bgp = rx_vtep.bgp\n        rx_vtep_bgp.router_id = \"191.0.0.1\"\n        rx_vtep_bgp_iface = rx_vtep_bgp.ipv4_interfaces.v4interface(\n            ipv4_name=rx_l1.name\n        )[-1]\n        rx_vtep_bgp_peer = rx_vtep_bgp_iface.peers.v4peer(\n            name=\"bgp2\", peer_address=\"1.1.1.1\", as_type=\"ibgp\", as_number=101\n        )[-1]\n    \n        # Adding 1 Ethernet Segment per Bgp Peer\n        rx_vtep_es1 = rx_vtep_bgp_peer.evpn_ethernet_segments.ethernetsegment()[-1]\n    \n        # Adding 1 EVI on the Ethernet Segment\n        rx_es1_evisV4_1 = rx_vtep_es1.evis.evi_vxlan()[-1]\n    \n        rx_es1_evisV4_1.route_distinguisher.rd_type = (\n            rx_es1_evisV4_1.route_distinguisher.AS_2OCTET\n        )\n        rx_es1_evisV4_1.route_distinguisher.rd_value = \"1000:1\"\n    \n        export_rt = rx_es1_evisV4_1.route_target_export.routetarget()[-1]\n        import_rt = rx_es1_evisV4_1.route_target_import.routetarget()[-1]\n        export_rt.rt_type = export_rt.AS_2OCTET\n        export_rt.rt_value = \"100:20\"\n    \n        import_rt.rt_type = import_rt.AS_2OCTET\n        import_rt.rt_value = \"100:20\"\n    \n        # Adding 1 Broadcast Domain per EVI\n        rx_es1_evisV4_1_bd_1 = rx_es1_evisV4_1.broadcast_domains.broadcastdomain()[\n            -1\n        ]\n    \n        # Adding 1 MAC Range Per Broadcast Domain\n        rx_es1_evisV4_1_bd_1_mac_Pool1 = (\n            rx_es1_evisV4_1_bd_1.cmac_ip_range.cmaciprange(l2vni=20)[-1]\n        )\n        rx_es1_evisV4_1_bd_1_mac_Pool1.name = \"rx_mac_pool\"\n        rx_es1_evisV4_1_bd_1_mac_Pool1.mac_addresses.address = \"10:11:22:33:44:77\"\n    \n        # Adding 1 IP Range Per Broadcast Domain\n        rx_es1_evisV4_1_bd_1_mac_Pool1.ipv4_addresses.address = \"192.168.1.2\"\n    \n        f1 = config.flows.flow(name=\"f1\")[-1]\n        f1.tx_rx.device.tx_names = [tx_es1_evisV4_1_bd_1_mac_Pool1.name]\n        f1.tx_rx.device.rx_names = [rx_es1_evisV4_1_bd_1_mac_Pool1.name]\n    \n        f1.duration.fixed_packets.packets = 1000\n    \n        f1.size.fixed = 1500\n        f1.metrics.enable = True\n        f1.metrics.loss = True\n    \n>       utils.start_traffic(api, config)\n\ntests/bgp_evpn/test_bgp_evpn.py:168: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/common.py:126: in start_traffic\n    api.set_config(cfg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe639af70>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\nE               self.ngpf.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\nE               self._configure_topology()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\nE               self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE            'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 0.007s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 8.190s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 0.197s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.101s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location connect [p1, p2] 1.866s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1443 p1 connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1443 p2 connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location state check [p1, p2] 0.270s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 2.775s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.099s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 0.268s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 0.352s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":16,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp_evpn.test_bgp_evpn"},{"name":"package","value":"bgp_evpn.test_bgp_evpn"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":60,"unknown":0,"total":61},"items":[{"uid":"e90ce1998f6c18c8","status":"passed","time":{"start":1742381702821,"stop":1742381807363,"duration":104542}},{"uid":"6ee17a6b6bea94d0","status":"passed","time":{"start":1742374910714,"stop":1742375015370,"duration":104656}},{"uid":"57f513bdad7ed390","status":"passed","time":{"start":1742299164935,"stop":1742299281991,"duration":117056}},{"uid":"923f41c2c9a78cb7","status":"passed","time":{"start":1741799882568,"stop":1741799974861,"duration":92293}},{"uid":"74bd63d351e19ba1","status":"passed","time":{"start":1741788649556,"stop":1741788750567,"duration":101011}},{"uid":"be1e1b8c0e25c3cd","status":"passed","time":{"start":1741764418062,"stop":1741764518751,"duration":100689}},{"uid":"addf0c847472edcd","status":"passed","time":{"start":1741757585447,"stop":1741757685672,"duration":100225}},{"uid":"5eebbb47d5ec6750","status":"passed","time":{"start":1741690639312,"stop":1741690736800,"duration":97488}},{"uid":"2f17a3834bf0bfb9","status":"passed","time":{"start":1741682454375,"stop":1741682552141,"duration":97766}},{"uid":"c42848a2fb90b80e","status":"passed","time":{"start":1741584950599,"stop":1741585050199,"duration":99600}},{"uid":"41a0b3295bcd7567","status":"passed","time":{"start":1741547140558,"stop":1741547243252,"duration":102694}},{"uid":"ed9abf72244436c4","status":"passed","time":{"start":1741459053851,"stop":1741459159486,"duration":105635}},{"uid":"3410190ed6931894","status":"passed","time":{"start":1741451329877,"stop":1741451434385,"duration":104508}},{"uid":"a1cbbed3b15c006e","status":"passed","time":{"start":1741375664779,"stop":1741375764280,"duration":99501}},{"uid":"71c37c919ff149f3","status":"passed","time":{"start":1741368681952,"stop":1741368780469,"duration":98517}},{"uid":"4bc81a25686a1328","status":"passed","time":{"start":1741353394880,"stop":1741353496626,"duration":101746}},{"uid":"6f7d5f17659579e6","status":"passed","time":{"start":1741346675485,"stop":1741346773752,"duration":98267}},{"uid":"4e09e82e94805bb8","status":"passed","time":{"start":1741066144231,"stop":1741066258425,"duration":114194}},{"uid":"33d279762ac82759","status":"passed","time":{"start":1741017342205,"stop":1741017440498,"duration":98293}},{"uid":"3b14455cafe8153e","status":"passed","time":{"start":1741010585345,"stop":1741010687374,"duration":102029}}]},"tags":[]},"source":"2954724b7f37c86a.json","parameterValues":[]}
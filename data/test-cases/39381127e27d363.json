{"uid":"39381127e27d363","name":"test_convergence","historyId":"pytest:convergence.test_convergence#test_convergence","time":{"start":1739508931978,"stop":1739509684824,"duration":752846},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 555, in get_metrics\n    response = self._result(request.convergence)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 650, in _result\n    drill_down = traffic_stat.Drilldown(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/assistants/statistics/statviewassistant.py\", line 338, in Drilldown\n    drill_down.TargetDrillDownOption = DrillDownOption\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/statistics/view/drilldown/drilldown.py\", line 94, in TargetDrillDownOption\n    self._set_attribute(self._SDM_ATT_MAP[\"TargetDrillDownOption\"], value)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 238, in _set_attribute\n    raise e\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 235, in _set_attribute\n    self._update({name: value})\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 425, in _update\n    self._connection._update(href, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 283, in _update\n    return self._send_recv(\"PATCH\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 596, in _send_recv\n    self._process_response_status_code(url, headers, response)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 484, in _process_response_status_code\n    raise ServerError(message, response.status_code)\n \n\tCurrent Server Errors/Warnings:\n\t02/14/2025 02:32:20 [WARNING] [Regenerate Traffic Item Required] The Traffic Item configuration has changed and it needs to be regenerated before applying it to the Ixia hardware","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fbb197c8bb0>\nrequest = <snappi.snappi.MetricsRequest object at 0x7fbb18ceab10>\n\n    def get_metrics(self, request):\n        \"\"\"\n        Gets port, flow and protocol metrics.\n    \n        Args\n        ----\n        - request (Union[MetricsRequest, str]): A request for Port, Flow and\n          protocol metrics.\n          The request content MUST be vase on the OpenAPI model,\n          #/components/schemas/Result.MetricsRequest\n          See the docs/openapi.yaml document for all model details\n        \"\"\"\n        try:\n            self._connect()\n            metric_req = self.metrics_request()\n            if isinstance(request, (type(metric_req), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[MetricsRequest, str]\"\n                )\n            if isinstance(request, str) is True:\n                request = metric_req.deserialize(request)\n            # Need to change the code style when the choice Enum grows big\n            if request.get(\"choice\") == \"port\":\n                response = self.vport.results(request.port)\n                metric_res = self.metrics_response()\n                metric_res.port_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"flow\":\n                response = self.traffic_item.results(request.flow)\n                metric_res = self.metrics_response()\n                metric_res.flow_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lag\":\n                response = self.traffic_item.results(request.lag)\n                metric_res = self.metrics_response()\n                metric_res.lag_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lacp\":\n                response = self.traffic_item.results(request.lacp)\n                metric_res = self.metrics_response()\n                metric_res.lacp_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"convergence\":\n>               response = self._result(request.convergence)\n\nsnappi_ixnetwork/snappi_api.py:555: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:650: in _result\n    drill_down = traffic_stat.Drilldown(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/assistants/statistics/statviewassistant.py:338: in Drilldown\n    drill_down.TargetDrillDownOption = DrillDownOption\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/statistics/view/drilldown/drilldown.py:94: in TargetDrillDownOption\n    self._set_attribute(self._SDM_ATT_MAP[\"TargetDrillDownOption\"], value)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py:238: in _set_attribute\n    raise e\n.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py:235: in _set_attribute\n    self._update({name: value})\n.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py:425: in _update\n    self._connection._update(href, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:283: in _update\n    return self._send_recv(\"PATCH\", url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:596: in _send_recv\n    self._process_response_status_code(url, headers, response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7fbb1949f8b0>\nurl = 'https://novus1-715849.ccu.is.keysight.com:443/api/v1/sessions/11/ixnetwork/globals/appErrors/error'\nheaders = {'Connection': 'keep-alive', 'Content-Type': 'application/json', 'User-Agent': 'ixnetwork-restpy', 'X-Api-Key': '72b147e77ad34d9b95881a58620960f6', ...}\nresponse = <Response [504]>, async_status = False\n\n    def _process_response_status_code(self, url, headers, response, async_status=False):\n        errors = []\n        # add the initial error\n        if async_status is True:\n            async_status = response.json()\n            if (\n                \"message\" in async_status\n                and async_status[\"message\"] is not None\n                and \"API CONTENTION\" in async_status[\"message\"]\n            ):\n                response.status_code = 409\n            else:\n                response.status_code = 400\n            error = \"\"\n            if \"message\" in async_status and async_status[\"message\"] is not None:\n                error += \" \" + async_status[\"message\"]\n            if \"result\" in async_status and async_status[\"result\"] is not None:\n                error += \" \" + async_status[\"result\"]\n            errors.append(error)\n        else:\n            try:\n                for error in response.json()[\"errors\"]:\n                    errors.append(error[\"detail\"])\n            except:\n                errors.append(response.text)\n        # add any /globals/appErrors/error items\n        try:\n            preamble = url[\n                0 : url.find(\"/\", url.find(\"/sessions/\") + len(\"/sessions/\"))\n            ]\n            url = preamble + \"/ixnetwork/globals/appErrors/error\"\n            self._print_request(\"GET\", url)\n            error_response = self._session.request(\n                \"GET\",\n                url,\n                headers=headers,\n                verify=self._verify_cert,\n                allow_redirects=False,\n            )\n            server_info = \"\\tCurrent Server Errors/Warnings:\"\n            for error in error_response.json():\n                if error[\"errorLevel\"] in [\"kError\", \"kWarning\"]:\n                    if server_info is not None:\n                        errors.append(server_info)\n                        server_info = None\n                    errors.append(\n                        \"\\t%s [%s] [%s] %s\"\n                        % (\n                            error[\"lastModified\"],\n                            error[\"errorLevel\"][1:].upper(),\n                            error[\"name\"],\n                            error[\"description\"],\n                        )\n                    )\n        except:\n            pass\n        # raise the appropriate error\n        message = \"\\n\".join(errors)\n        logging.getLogger(__name__).debug(message)\n        if response.status_code == 400:\n            raise BadRequestError(message, response.status_code)\n        elif response.status_code == 401:\n            raise UnauthorizedError(message, response.status_code)\n        elif response.status_code == 404:\n            raise NotFoundError(message, response.status_code)\n        elif response.status_code == 409:\n            raise ResourceInUseError(message, response.status_code)\n        else:\n>           raise ServerError(message, response.status_code)\nE           ixnetwork_restpy.errors.ServerError: \nE           \tCurrent Server Errors/Warnings:\nE           \t02/14/2025 02:32:20 [WARNING] [Regenerate Traffic Item Required] The Traffic Item configuration has changed and it needs to be regenerated before applying it to the Ixia hardware\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:484: ServerError\n\nDuring handling of the above exception, another exception occurred:\n\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fbb197c8bb0>\nbgp_convergence_config = <snappi.snappi.Config object at 0x7fbb18fb7650>\n\n    def test_convergence(utils, api, bgp_convergence_config):\n        \"\"\"\n        1. set convergence config & start traffic\n        Scenario 1:\n        1. Start traffic\n        2. Withdraw Routes and see events are populated properly\n        Scenario 2:\n        1. Start traffic\n        2. Shutdown primary port and see events are populated properly\n        \"\"\"\n    \n        # convergence config\n        bgp_convergence_config.events.cp_events.enable = True\n        bgp_convergence_config.events.dp_events.enable = True\n        bgp_convergence_config.events.dp_events.rx_rate_threshold = 90\n    \n        api.set_config(bgp_convergence_config)\n        print(\"Starting all protocols ...\")\n        ps = api.control_state()\n        ps.choice = ps.PROTOCOL\n        ps.protocol.choice = ps.protocol.ALL\n        ps.protocol.all.state = ps.protocol.all.START\n        res = api.set_control_state(ps)\n        if len(res.warnings) > 0:\n            print(\"Warnings: {}\".format(res.warnings))\n    \n        # Scenario 1: Route withdraw/Advertise\n        # Start traffic\n        cs = api.control_state()\n        cs.choice = cs.TRAFFIC\n        cs.traffic.choice = cs.traffic.FLOW_TRANSMIT\n        cs.traffic.flow_transmit.state = cs.traffic.flow_transmit.START\n        res = api.set_control_state(cs)\n        if len(res.warnings) > 0:\n            print(\"Warnings: {}\".format(res.warnings))\n    \n        # Wait for traffic to reach configured line rate\n        utils.wait_for(\n            lambda: utils.is_traffic_running(api), \"traffic in started state\"\n        )\n    \n        # Port Metrics\n        req = api.metrics_request()\n        req.port.port_names = []\n        port_metrics = api.get_metrics(req).port_metrics\n        utils.print_stats(port_stats=port_metrics)\n    \n        # Flow Metrics\n        req = api.metrics_request()\n        req.flow.flow_names = []\n        flow_metrics = api.get_metrics(req).flow_metrics\n        utils.print_stats(flow_stats=flow_metrics)\n    \n        # BGPv4 metrics\n        req = api.metrics_request()\n        req.bgpv4.peer_names = []\n        bgpv4_metrics = api.get_metrics(req).bgpv4_metrics\n        utils.print_stats(bgpv4_stats=bgpv4_metrics)\n    \n        # Validate all BGPv4 sessions are up\n        for bgp_metric in bgpv4_metrics:\n            assert bgp_metric.session_state == \"up\"\n    \n        # Withdraw routes from primary path\n        cs = api.control_state()\n        cs.protocol.route.names = [PRIMARY_ROUTES_NAME]\n        cs.protocol.route.state = cs.protocol.route.WITHDRAW\n        res = api.set_control_state(cs)\n        if len(res.warnings) > 0:\n            print(\"Warnings: {}\".format(res.warnings))\n    \n        # get convergence metrics\n        request = api.metrics_request()\n        request.convergence.flow_names = [\"convergence_test\"]\n>       convergence_metrics = api.get_metrics(request).convergence_metrics\n\ntests/convergence/test_convergence.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fbb197c8bb0>\nrequest = <snappi.snappi.MetricsRequest object at 0x7fbb18ceab10>\n\n    def get_metrics(self, request):\n        \"\"\"\n        Gets port, flow and protocol metrics.\n    \n        Args\n        ----\n        - request (Union[MetricsRequest, str]): A request for Port, Flow and\n          protocol metrics.\n          The request content MUST be vase on the OpenAPI model,\n          #/components/schemas/Result.MetricsRequest\n          See the docs/openapi.yaml document for all model details\n        \"\"\"\n        try:\n            self._connect()\n            metric_req = self.metrics_request()\n            if isinstance(request, (type(metric_req), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[MetricsRequest, str]\"\n                )\n            if isinstance(request, str) is True:\n                request = metric_req.deserialize(request)\n            # Need to change the code style when the choice Enum grows big\n            if request.get(\"choice\") == \"port\":\n                response = self.vport.results(request.port)\n                metric_res = self.metrics_response()\n                metric_res.port_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"flow\":\n                response = self.traffic_item.results(request.flow)\n                metric_res = self.metrics_response()\n                metric_res.flow_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lag\":\n                response = self.traffic_item.results(request.lag)\n                metric_res = self.metrics_response()\n                metric_res.lag_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lacp\":\n                response = self.traffic_item.results(request.lacp)\n                metric_res = self.metrics_response()\n                metric_res.lacp_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"convergence\":\n                response = self._result(request.convergence)\n                metric_res = self.metrics_response()\n                metric_res.convergence_metrics.deserialize(response)\n                return metric_res\n            if (\n                request.get(\"choice\")\n                in self.protocol_metrics.get_supported_protocols()\n            ):\n                response = self.protocol_metrics.results(request)\n                metric_res = self.metrics_response()\n                getattr(metric_res, request.choice + \"_metrics\").deserialize(\n                    response\n                )\n                return metric_res\n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 555, in get_metrics\nE               response = self._result(request.convergence)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 650, in _result\nE               drill_down = traffic_stat.Drilldown(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/assistants/statistics/statviewassistant.py\", line 338, in Drilldown\nE               drill_down.TargetDrillDownOption = DrillDownOption\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/statistics/view/drilldown/drilldown.py\", line 94, in TargetDrillDownOption\nE               self._set_attribute(self._SDM_ATT_MAP[\"TargetDrillDownOption\"], value)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 238, in _set_attribute\nE               raise e\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 235, in _set_attribute\nE               self._update({name: value})\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 425, in _update\nE               self._connection._update(href, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 283, in _update\nE               return self._send_recv(\"PATCH\", url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 596, in _send_recv\nE               self._process_response_status_code(url, headers, response)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 484, in _process_response_status_code\nE               raise ServerError(message, response.status_code)\nE            \nE           \tCurrent Server Errors/Warnings:\nE           \t02/14/2025 02:32:20 [WARNING] [Regenerate Traffic Item Required] The Traffic Item configuration has changed and it needs to be regenerated before applying it to the Ixia hardware\n\nsnappi_ixnetwork/snappi_api.py:570: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Config validation 0.004s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Ports configuration 10.841s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Captures configuration 0.180s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Location hosts ready [novus1-715849.ccu.is.keysight.com] 2.107s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Speed conversion is not require for (port.name, speed) : [('tx', 'normal'), ('rx', 'normal')]","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Aggregation mode speed change 0.131s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Location preemption [novus1-715849.ccu.is.keysight.com;1;1, novus1-715849.ccu.is.keysight.com;1;2] 0.120s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Location connect [tx, rx] 4.445s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Location state check [tx, rx] 0.262s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Location configuration 15.899s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1404  kError invalidCommit The only speed allowed in copper mode while AutoNegotiation is turned off is 100M","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Layer1 configuration 0.278s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Lag Configuration 0.082s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Convert device config : 0.278s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Push IxNetwork device config : 0.484s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Devices configuration 0.849s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Flows configuration 1.472s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Start interfaces 1.828s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 IxNet - The Traffic Item configuration has changed and it needs to be regenerated before applying it to the Ixia hardware","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 IxNet - One or more destination MACs or VPNs are invalid or unreachable and the packets configured to be sent to them were not created","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Flows generate/apply 2.248s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Flows clear statistics 12.440s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Captures start 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Flows start 5.281s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 event is not reflected in stat","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1398 Setting route state 0.985s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":30,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"convergence.test_convergence"},{"name":"package","value":"convergence.test_convergence"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":3,"passed":8,"unknown":0,"total":12},"items":[{"uid":"fcd692c9eefc3e44","status":"passed","time":{"start":1739266146575,"stop":1739266453304,"duration":306729}},{"uid":"e5901c883dd3af6f","status":"passed","time":{"start":1738760146327,"stop":1738760447521,"duration":301194}},{"uid":"cfb91870e1c2e824","status":"passed","time":{"start":1738743686276,"stop":1738743992493,"duration":306217}},{"uid":"96a62f2e6f3622d9","status":"passed","time":{"start":1738736990140,"stop":1738737292624,"duration":302484}},{"uid":"5da50efaf1720018","status":"passed","time":{"start":1738644418884,"stop":1738644718261,"duration":299377}},{"uid":"322dc48c627b0b46","status":"passed","time":{"start":1738318990045,"stop":1738319287940,"duration":297895}},{"uid":"d2d4f0bf929c736","status":"passed","time":{"start":1738304718839,"stop":1738305017086,"duration":298247}},{"uid":"ca8dfb1050b496e","status":"passed","time":{"start":1738298470362,"stop":1738298759605,"duration":289243}},{"uid":"568f5046cd180450","status":"skipped","statusDetails":"Fix -convergence support TBD","time":{"start":1738140099302,"stop":1738140099302,"duration":0}},{"uid":"2ed47c9f2f2edd90","status":"skipped","statusDetails":"Fix -convergence support TBD","time":{"start":1738069870993,"stop":1738069870994,"duration":1}},{"uid":"bc8e26bcd082ac9b","status":"skipped","statusDetails":"Fix -convergence support TBD","time":{"start":1738051659120,"stop":1738051659120,"duration":0}}]},"tags":[]},"source":"39381127e27d363.json","parameterValues":[]}
{"uid":"2570a33f21294274","name":"test_bgp_evpn_validation","historyId":"pytest:bgp_evpn.test_bgp_evpn_attribute_validation#test_bgp_evpn_validation","time":{"start":1742993864845,"stop":1742993868933,"duration":4088},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\n    self.ngpf.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\n    self._configure_topology()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\n    self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\n 'Config' object has no attribute 'stateful_flows'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe640efc0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:363: in config_ixnetwork\n    self.ngpf.config()\nsnappi_ixnetwork/device/ngpf.py:69: in config\n    self._configure_topology()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.device.ngpf.Ngpf object at 0x7fdbe3e23b50>\n\n    def _configure_topology(self):\n        self.stop_topology()\n        self.api._remove(self.api._topology, [])\n        ixn_topos = self.create_node(self._ixn_config, \"topology\")\n        # Configured all interfaces\n        self._configure_device_group(ixn_topos)\n    \n        # Configure all MACsec interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._macsec.config(device)\n    \n        # We need to configure all interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._bgp.config(device)\n    \n        #Configure all RoCEv2 interface before configure protocols\n        for device in self.api.snappi_config.devices:\n>           self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE           AttributeError: 'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/device/ngpf.py:125: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_bgp_evpn_validation(api, utils):\n        \"Validate BGP EVPN Attributes against RestPy\"\n    \n        BGPV4_EVPN_ETH_SEGMENT = {\n            \"DfElectionTimer\": 10,\n            \"EsiValue\": \"1000000000000000\",\n            \"EsiLabel\": 8,\n            \"EnableSingleActive\": \"true\",\n            \"MultiExitDiscriminator\": 5,\n            \"EnableMultiExitDiscriminator\": \"true\",\n            \"Origin\": \"egp\",\n            \"EnableOrigin\": \"true\",\n            \"EnableCommunity\": \"true\",\n            \"EnableExtendedCommunity\": \"true\",\n            \"EnableAsPathSegments\": \"true\",\n            \"AsSetMode\": \"includelocalasasasset\",\n        }\n    \n        BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST = {\n            \"Type\": \"manual\",\n            \"AsNumber\": \"8\",\n            \"LastTwoOctets\": \"8\",\n        }\n    \n        BGPV4_EVPN_ETH_SEGMENT_EXT_COMMUNITIES_lIST = {\n            \"Type\": \"opaque\",\n            \"SubType\": \"color\",\n            \"ColorValue\": \"200\",\n        }\n    \n        BGPV4_EVPN_ETH_SEGMENT_ASPATH_SEGMENTS_lIST = {\n            \"SegmentType\": \"asseqconfederation\",\n        }\n    \n        BGPV4_EVPN_VXLAN = {\n            \"AdRouteLabel\": 10,\n            \"UpstreamDownstreamAssignedMplsLabel\": 20,\n            \"RdASNumber\": 1000,\n            \"RdEvi\": 10,\n            \"MultiExitDiscriminator\": 99,\n        }\n    \n        BGPV4_EVPN_VXLAN_EXPORT_TARGET = {\n            \"TargetAs4Number\": \"100\",\n            \"TargetAssignedNumber\": \"20\",\n        }\n    \n        BGPV4_EVPN_VXLAN_IMPORT_TARGET = {\n            \"TargetAs4Number\": \"200\",\n            \"TargetAssignedNumber\": \"30\",\n        }\n    \n        BGPV4_EVPN_VXLAN_L3_EXPORT_TARGET = {\n            \"TargetAs4Number\": \"300\",\n            \"TargetAssignedNumber\": \"50\",\n        }\n    \n        BGPV4_EVPN_VXLAN_L3_IMPORT_TARGET = {\n            \"TargetAs4Number\": \"400\",\n            \"TargetAssignedNumber\": \"60\",\n        }\n    \n        BROADCAST_DOMAIN = {\"EthernetTagId\": \"5\", \"EnableVlanAwareService\": \"true\"}\n    \n        MAC_ADDRESS = {\n            \"Mac\": \"10:11:22:33:44:55\",\n            \"PrefixLength\": \"48\",\n            \"NumberOfAddressesAsy\": \"1\",\n        }\n    \n        IP_ADDRESS = {\n            \"NetworkAddress\": \"2.2.2.2\",\n            \"PrefixLength\": \"24\",\n            \"NumberOfAddressesAsy\": \"1\",\n        }\n    \n        IPV6_ADDRESS = {\n            \"NetworkAddress\": \"2000:0:2:1::1\",\n            \"PrefixLength\": \"64\",\n            \"NumberOfAddressesAsy\": \"1\",\n        }\n    \n        CMAC_PROPERTIES = {\n            \"FirstLabelStart\": \"16\",\n            \"SecondLabelStart\": \"20\",\n            \"MultiExitDiscriminator\": \"37\",\n            \"IncludeDefaultGatewayExtendedCommunity\": \"true\",\n        }\n    \n        # Creating Ports\n        config = api.config()\n        p1 = config.ports.port(name=\"p1\", location=utils.settings.ports[0])[-1]\n        # Create BGP devices on tx\n        tx_d = config.devices.device(name=\"tx_d\")[-1]\n        tx_eth = tx_d.ethernets.add()\n        tx_eth.connection.port_name = p1.name\n        tx_eth.name = \"tx_eth\"\n        tx_eth.mac = \"00:11:00:00:00:01\"\n        tx_ip = tx_eth.ipv4_addresses.ipv4(\n            name=\"tx_ip\", address=\"20.20.20.2\", gateway=\"20.20.20.1\"\n        )[-1]\n    \n        # tx_bgp\n        tx_bgp = tx_d.bgp\n        tx_bgp.router_id = \"192.0.0.1\"\n        tx_bgp_iface = tx_bgp.ipv4_interfaces.v4interface(ipv4_name=tx_ip.name)[-1]\n        tx_bgp_peer = tx_bgp_iface.peers.v4peer(\n            name=\"tx_eBGP\",\n            peer_address=\"20.20.20.1\",\n            as_type=\"ebgp\",\n            as_number=100,\n        )[-1]\n    \n        # Create & advertise loopback under bgp in tx and rx\n        tx_l1 = tx_d.ipv4_loopbacks.add()\n        tx_l1.name = \"tx_loopback1\"\n        tx_l1.eth_name = \"tx_eth\"\n        tx_l1.address = \"1.1.1.1\"\n        tx_l1_r = tx_bgp_peer.v4_routes.add(name=\"tx_l1\")\n        tx_l1_r.addresses.add(address=\"1.1.1.1\", prefix=32)\n    \n        # Create BGP EVPN on tx\n        tx_vtep = config.devices.device(name=\"tx_vtep\")[-1]\n        tx_vtep_bgp = tx_vtep.bgp\n        tx_vtep_bgp.router_id = \"190.0.0.1\"\n        tx_vtep_bgp_iface = tx_vtep_bgp.ipv4_interfaces.v4interface(\n            ipv4_name=tx_l1.name\n        )[-1]\n        tx_vtep_bgp_peer = tx_vtep_bgp_iface.peers.v4peer(\n            name=\"bgp1\", peer_address=\"2.2.2.2\", as_type=\"ibgp\", as_number=101\n        )[-1]\n    \n        tx_eth_seg = tx_vtep_bgp_peer.evpn_ethernet_segments.ethernetsegment()[-1]\n        tx_eth_seg.df_election.election_timer = BGPV4_EVPN_ETH_SEGMENT[\n            \"DfElectionTimer\"\n        ]\n        tx_eth_seg.esi = BGPV4_EVPN_ETH_SEGMENT[\"EsiValue\"]\n        tx_eth_seg.esi_label = BGPV4_EVPN_ETH_SEGMENT[\"EsiLabel\"]\n        tx_eth_seg.active_mode = tx_eth_seg.SINGLE_ACTIVE\n        tx_eth_seg.advanced.origin = tx_eth_seg.advanced.EGP\n        tx_eth_seg.advanced.multi_exit_discriminator = BGPV4_EVPN_ETH_SEGMENT[\n            \"MultiExitDiscriminator\"\n        ]\n        tx_eth_seg_community = tx_eth_seg.communities.add()\n        tx_eth_seg_community.type = tx_eth_seg_community.MANUAL_AS_NUMBER\n        tx_eth_seg_community.as_number = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"AsNumber\"]\n        )\n        tx_eth_seg_community.as_custom = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"LastTwoOctets\"]\n        )\n        tx_eth_seg_ext_community = tx_eth_seg.ext_communities.add()\n        tx_eth_seg_ext_community.type = \"opaque\"\n        tx_eth_seg_ext_community.subtype = \"color\"\n        tx_eth_seg_ext_community.value = \"0000000000C8\"\n        tx_eth_seg.as_path.as_set_mode = \"include_as_set\"\n        tx_eth_seg.as_path.segments.add(\"as_confed_seq\", [2, 3])\n    \n        # Adding Tx EVI on the Ethernet Segment\n        tx_evi_vxlan = tx_eth_seg.evis.evi_vxlan()[-1]\n        tx_evi_vxlan.route_distinguisher.rd_type = (\n            tx_evi_vxlan.route_distinguisher.AS_2OCTET\n        )\n        tx_evi_vxlan.route_distinguisher.rd_value = (\n            str(BGPV4_EVPN_VXLAN[\"RdASNumber\"])\n            + \":\"\n            + str(BGPV4_EVPN_VXLAN[\"RdEvi\"])\n        )\n        tx_evi_vxlan.ad_label = BGPV4_EVPN_VXLAN[\"AdRouteLabel\"]\n        tx_evi_vxlan.pmsi_label = BGPV4_EVPN_VXLAN[\n            \"UpstreamDownstreamAssignedMplsLabel\"\n        ]\n    \n        export_rt = tx_evi_vxlan.route_target_export.routetarget()[-1]\n        import_rt = tx_evi_vxlan.route_target_import.routetarget()[-1]\n        export_rt.rt_type = export_rt.AS_4OCTET\n        export_rt.rt_value = (\n            BGPV4_EVPN_VXLAN_EXPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV4_EVPN_VXLAN_EXPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n        import_rt.rt_type = import_rt.AS_4OCTET\n        import_rt.rt_value = (\n            BGPV4_EVPN_VXLAN_IMPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV4_EVPN_VXLAN_IMPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n    \n        l3_export_rt = tx_evi_vxlan.l3_route_target_export.routetarget()[-1]\n        l3_import_rt = tx_evi_vxlan.l3_route_target_import.routetarget()[-1]\n        l3_export_rt.rt_type = l3_export_rt.AS_4OCTET\n        l3_export_rt.rt_value = (\n            BGPV4_EVPN_VXLAN_L3_EXPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV4_EVPN_VXLAN_L3_EXPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n        l3_import_rt.rt_type = l3_import_rt.AS_4OCTET\n        l3_import_rt.rt_value = (\n            BGPV4_EVPN_VXLAN_L3_IMPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV4_EVPN_VXLAN_L3_IMPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n    \n        tx_evi_vxlan.advanced.origin = tx_evi_vxlan.advanced.EGP\n        tx_evi_vxlan.advanced.multi_exit_discriminator = BGPV4_EVPN_VXLAN[\n            \"MultiExitDiscriminator\"\n        ]\n        tx_evi_vxlan_comm = tx_evi_vxlan.communities.add()\n        tx_evi_vxlan_comm.type = tx_evi_vxlan_comm.MANUAL_AS_NUMBER\n        tx_evi_vxlan_comm.as_number = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"AsNumber\"]\n        )\n        tx_evi_vxlan_comm.as_custom = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"LastTwoOctets\"]\n        )\n        tx_evi_vxlan_ext_comm = tx_evi_vxlan.ext_communities.add()\n        tx_evi_vxlan_ext_comm.type = \"opaque\"\n        tx_evi_vxlan_ext_comm.subtype = \"color\"\n        tx_evi_vxlan_ext_comm.value = \"0000000000C8\"\n        tx_evi_vxlan.as_path.segments.add(\"as_confed_seq\", [9, 10])\n    \n        # Adding tx Broadcast Domain per EVI and MAC range\n        tx_evpn_brodcast_domain = tx_evi_vxlan.broadcast_domains.broadcastdomain()[\n            -1\n        ]\n        tx_evpn_brodcast_domain.ethernet_tag_id = int(\n            BROADCAST_DOMAIN[\"EthernetTagId\"]\n        )\n        tx_evpn_brodcast_domain.vlan_aware_service = True\n        tx_broadcast_macrange = tx_evpn_brodcast_domain.cmac_ip_range.cmaciprange(\n            l2vni=16, l3vni=20, name=\"tx_cmaciprange\", include_default_gateway=True\n        )[-1]\n        tx_broadcast_macrange.mac_addresses.address = MAC_ADDRESS[\"Mac\"]\n        tx_broadcast_macrange.ipv4_addresses.address = IP_ADDRESS[\"NetworkAddress\"]\n        tx_broadcast_macrange.ipv6_addresses.address = IPV6_ADDRESS[\n            \"NetworkAddress\"\n        ]\n    \n        tx_broadcast_macrange.advanced.multi_exit_discriminator = int(\n            CMAC_PROPERTIES[\"MultiExitDiscriminator\"]\n        )\n    \n        cmac_comm = tx_broadcast_macrange.communities.add()\n        cmac_comm.type = cmac_comm.MANUAL_AS_NUMBER\n        cmac_comm.as_number = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"AsNumber\"]\n        )\n        cmac_comm.as_custom = int(\n            BGPV4_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"LastTwoOctets\"]\n        )\n        cmac_ext_comm = tx_broadcast_macrange.ext_communities.add()\n        cmac_ext_comm.type = \"opaque\"\n        cmac_ext_comm.subtype = \"color\"\n        cmac_ext_comm.value = \"0000000000C8\"\n        tx_broadcast_macrange.as_path.segments.add(\"as_confed_seq\", [9, 10])\n    \n>       api.set_config(config)\n\ntests/bgp_evpn/test_bgp_evpn_attribute_validation.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe640efc0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\nE               self.ngpf.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\nE               self._configure_topology()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\nE               self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE            'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 0.012s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 2.017s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 0.190s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.098s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 0.589s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.085s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 0.280s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 0.368s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":12,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp_evpn.test_bgp_evpn_attribute_validation"},{"name":"package","value":"bgp_evpn.test_bgp_evpn_attribute_validation"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":60,"unknown":0,"total":61},"items":[{"uid":"87a17bc0b13727e3","status":"passed","time":{"start":1742381702821,"stop":1742381740747,"duration":37926}},{"uid":"a1c32bb7ad79040","status":"passed","time":{"start":1742374910714,"stop":1742374943071,"duration":32357}},{"uid":"54eca66b8875736c","status":"passed","time":{"start":1742299164935,"stop":1742299200933,"duration":35998}},{"uid":"e8a492a7c4f953af","status":"passed","time":{"start":1741799882568,"stop":1741799918070,"duration":35502}},{"uid":"2a3107dda7ecf57a","status":"passed","time":{"start":1741788649556,"stop":1741788680931,"duration":31375}},{"uid":"6ef94473179fbdb9","status":"passed","time":{"start":1741764418062,"stop":1741764453133,"duration":35071}},{"uid":"e98577fb87561665","status":"passed","time":{"start":1741757585447,"stop":1741757630638,"duration":45191}},{"uid":"60cdf7a96a5c54df","status":"passed","time":{"start":1741690639312,"stop":1741690672973,"duration":33661}},{"uid":"a9eb200d4e8abd6","status":"passed","time":{"start":1741682454375,"stop":1741682493769,"duration":39394}},{"uid":"3b2af60e1381bb42","status":"passed","time":{"start":1741584950599,"stop":1741584991697,"duration":41098}},{"uid":"bcc811096236e252","status":"passed","time":{"start":1741547140558,"stop":1741547178316,"duration":37758}},{"uid":"7106c70f56c10ae6","status":"passed","time":{"start":1741459053851,"stop":1741459093173,"duration":39322}},{"uid":"185c8449cd535ce2","status":"passed","time":{"start":1741451329877,"stop":1741451364686,"duration":34809}},{"uid":"5a800c5c910ddda5","status":"passed","time":{"start":1741375664779,"stop":1741375700797,"duration":36018}},{"uid":"e8f918d761ff8e98","status":"passed","time":{"start":1741368681952,"stop":1741368723638,"duration":41686}},{"uid":"2185609e40b679ed","status":"passed","time":{"start":1741353394880,"stop":1741353430085,"duration":35205}},{"uid":"fbed8842ce5d0691","status":"passed","time":{"start":1741346675485,"stop":1741346717143,"duration":41658}},{"uid":"4b2ef324cc617ff1","status":"passed","time":{"start":1741066144231,"stop":1741066177722,"duration":33491}},{"uid":"bc611eac94e69c6e","status":"passed","time":{"start":1741017342205,"stop":1741017380700,"duration":38495}},{"uid":"c8209aaea20da46a","status":"passed","time":{"start":1741010585345,"stop":1741010624710,"duration":39365}}]},"tags":[]},"source":"2570a33f21294274.json","parameterValues":[]}
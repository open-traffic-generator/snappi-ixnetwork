{"uid":"5bd2b1adc7cf0368","name":"test_bgp_evpn","historyId":"pytest:bgp_evpn.test_bgp_evpn#test_bgp_evpn","time":{"start":1753368506584,"stop":1753368506627,"duration":43},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b361b920>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b36c7a60>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_bgp_evpn(api, utils):\n        # Creating Ports\n        config = api.config()\n        p1 = config.ports.port(name=\"p1\", location=utils.settings.ports[0])[-1]\n        p2 = config.ports.port(name=\"p2\", location=utils.settings.ports[1])[-1]\n    \n        # Create BGP devices on tx & rx\n        tx_d = config.devices.device(name=\"tx_d\")[-1]\n        rx_d = config.devices.device(name=\"rx_d\")[-1]\n    \n        tx_eth = tx_d.ethernets.add()\n        tx_eth.connection.port_name = p1.name\n        rx_eth = rx_d.ethernets.add()\n        rx_eth.connection.port_name = p2.name\n    \n        tx_eth.name = \"tx_eth\"\n        tx_eth.mac = \"00:11:00:00:00:01\"\n        tx_ip = tx_eth.ipv4_addresses.ipv4(\n            name=\"tx_ip\", address=\"20.20.20.2\", gateway=\"20.20.20.1\"\n        )[-1]\n    \n        rx_eth.name = \"rx_eth\"\n        rx_eth.mac = \"00:12:00:00:00:01\"\n        rx_ip = rx_eth.ipv4_addresses.ipv4(\n            name=\"rx_ip\", address=\"20.20.20.1\", gateway=\"20.20.20.2\"\n        )[-1]\n    \n        # tx_bgp\n        tx_bgp = tx_d.bgp\n        tx_bgp.router_id = \"192.0.0.1\"\n        tx_bgp_iface = tx_bgp.ipv4_interfaces.v4interface(ipv4_name=tx_ip.name)[-1]\n        tx_bgp_peer = tx_bgp_iface.peers.v4peer(\n            name=\"tx_eBGP\",\n            peer_address=\"20.20.20.1\",\n            as_type=\"ebgp\",\n            as_number=100,\n        )[-1]\n    \n        # rx_bgp\n        rx_bgp = rx_d.bgp\n        rx_bgp.router_id = \"193.0.0.1\"\n        rx_bgp_iface = rx_bgp.ipv4_interfaces.v4interface(ipv4_name=rx_ip.name)[-1]\n        rx_bgp_peer = rx_bgp_iface.peers.v4peer(\n            name=\"rx_eBGP\",\n            peer_address=\"20.20.20.2\",\n            as_type=\"ebgp\",\n            as_number=200,\n        )[-1]\n    \n        # Create & advertise loopback under bgp in tx and rx\n        tx_l1 = tx_d.ipv4_loopbacks.add()\n        tx_l1.name = \"tx_loopback1\"\n        tx_l1.eth_name = \"tx_eth\"\n        tx_l1.address = \"1.1.1.1\"\n    \n        tx_l1_r = tx_bgp_peer.v4_routes.add(name=\"tx_l1\")\n        tx_l1_r.addresses.add(address=\"1.1.1.1\", prefix=32)\n    \n        rx_l1 = rx_d.ipv4_loopbacks.add()\n        rx_l1.name = \"rx_loopback1\"\n        rx_l1.eth_name = \"rx_eth\"\n        rx_l1.address = \"2.2.2.2\"\n    \n        rx_l1_r = rx_bgp_peer.v4_routes.add(name=\"rx_l1\")\n        rx_l1_r.addresses.add(address=\"2.2.2.2\", prefix=32)\n    \n        # Create BGP EVPN on tx\n        tx_vtep = config.devices.device(name=\"tx_vtep\")[-1]\n        tx_vtep_bgp = tx_vtep.bgp\n        tx_vtep_bgp.router_id = \"190.0.0.1\"\n        tx_vtep_bgp_iface = tx_vtep_bgp.ipv4_interfaces.v4interface(\n            ipv4_name=tx_l1.name\n        )[-1]\n        tx_vtep_bgp_peer = tx_vtep_bgp_iface.peers.v4peer(\n            name=\"bgp1\", peer_address=\"2.2.2.2\", as_type=\"ibgp\", as_number=101\n        )[-1]\n    \n        # Adding 1 Ethernet Segment per Bgp Peer\n        tx_vtep_es1 = tx_vtep_bgp_peer.evpn_ethernet_segments.ethernetsegment()[-1]\n    \n        # Adding 1 EVI on the Ethernet Segment\n        tx_es1_evisV4_1 = tx_vtep_es1.evis.evi_vxlan()[-1]\n        tx_es1_evisV4_1.route_distinguisher.auto_config_rd_ip_addr = True\n        tx_es1_evisV4_1.route_distinguisher.rd_type = (\n            tx_es1_evisV4_1.route_distinguisher.AS_2OCTET\n        )\n        tx_es1_evisV4_1.route_distinguisher.rd_value = \"100:1\"\n    \n        export_rt = tx_es1_evisV4_1.route_target_export.routetarget()[-1]\n        import_rt = tx_es1_evisV4_1.route_target_import.routetarget()[-1]\n        export_rt.rt_type = export_rt.AS_2OCTET\n        export_rt.rt_value = \"100:20\"\n    \n        import_rt.rt_type = import_rt.AS_2OCTET\n        import_rt.rt_value = \"100:20\"\n    \n        # Adding 1 Broadcast Domain per EVI\n        tx_es1_evisV4_1_bd_1 = tx_es1_evisV4_1.broadcast_domains.broadcastdomain()[\n            -1\n        ]\n    \n        # Adding 1 MAC Range Per Broadcast Domain\n        tx_es1_evisV4_1_bd_1_mac_Pool1 = (\n            tx_es1_evisV4_1_bd_1.cmac_ip_range.cmaciprange(l2vni=20)[-1]\n        )\n    \n        tx_es1_evisV4_1_bd_1_mac_Pool1.name = \"tx_mac_pool\"\n        tx_es1_evisV4_1_bd_1_mac_Pool1.mac_addresses.address = \"10:11:22:33:44:55\"\n    \n        # Adding 1 IP Range Per Broadcast Domain\n        tx_es1_evisV4_1_bd_1_mac_Pool1.ipv4_addresses.address = \"192.168.0.1\"\n    \n        # Create BGP EVPN on rx\n        rx_vtep = config.devices.device(name=\"rx_vtep\")[-1]\n        rx_vtep_bgp = rx_vtep.bgp\n        rx_vtep_bgp.router_id = \"191.0.0.1\"\n        rx_vtep_bgp_iface = rx_vtep_bgp.ipv4_interfaces.v4interface(\n            ipv4_name=rx_l1.name\n        )[-1]\n        rx_vtep_bgp_peer = rx_vtep_bgp_iface.peers.v4peer(\n            name=\"bgp2\", peer_address=\"1.1.1.1\", as_type=\"ibgp\", as_number=101\n        )[-1]\n    \n        # Adding 1 Ethernet Segment per Bgp Peer\n        rx_vtep_es1 = rx_vtep_bgp_peer.evpn_ethernet_segments.ethernetsegment()[-1]\n    \n        # Adding 1 EVI on the Ethernet Segment\n        rx_es1_evisV4_1 = rx_vtep_es1.evis.evi_vxlan()[-1]\n    \n        rx_es1_evisV4_1.route_distinguisher.rd_type = (\n            rx_es1_evisV4_1.route_distinguisher.AS_2OCTET\n        )\n        rx_es1_evisV4_1.route_distinguisher.rd_value = \"1000:1\"\n    \n        export_rt = rx_es1_evisV4_1.route_target_export.routetarget()[-1]\n        import_rt = rx_es1_evisV4_1.route_target_import.routetarget()[-1]\n        export_rt.rt_type = export_rt.AS_2OCTET\n        export_rt.rt_value = \"100:20\"\n    \n        import_rt.rt_type = import_rt.AS_2OCTET\n        import_rt.rt_value = \"100:20\"\n    \n        # Adding 1 Broadcast Domain per EVI\n        rx_es1_evisV4_1_bd_1 = rx_es1_evisV4_1.broadcast_domains.broadcastdomain()[\n            -1\n        ]\n    \n        # Adding 1 MAC Range Per Broadcast Domain\n        rx_es1_evisV4_1_bd_1_mac_Pool1 = (\n            rx_es1_evisV4_1_bd_1.cmac_ip_range.cmaciprange(l2vni=20)[-1]\n        )\n        rx_es1_evisV4_1_bd_1_mac_Pool1.name = \"rx_mac_pool\"\n        rx_es1_evisV4_1_bd_1_mac_Pool1.mac_addresses.address = \"10:11:22:33:44:77\"\n    \n        # Adding 1 IP Range Per Broadcast Domain\n        rx_es1_evisV4_1_bd_1_mac_Pool1.ipv4_addresses.address = \"192.168.1.2\"\n    \n        f1 = config.flows.flow(name=\"f1\")[-1]\n        f1.tx_rx.device.tx_names = [tx_es1_evisV4_1_bd_1_mac_Pool1.name]\n        f1.tx_rx.device.rx_names = [rx_es1_evisV4_1_bd_1_mac_Pool1.name]\n    \n        f1.duration.fixed_packets.packets = 1000\n    \n        f1.size.fixed = 1500\n        f1.metrics.enable = True\n        f1.metrics.loss = True\n    \n>       utils.start_traffic(api, config)\n\ntests/bgp_evpn/test_bgp_evpn.py:168: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/common.py:126: in start_traffic\n    api.set_config(cfg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b361b920>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp_evpn.test_bgp_evpn"},{"name":"package","value":"bgp_evpn.test_bgp_evpn"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":0,"skipped":0,"passed":161,"unknown":0,"total":177},"items":[{"uid":"91ba8f976ac7620e","status":"passed","time":{"start":1752836398951,"stop":1752836493853,"duration":94902}},{"uid":"b7f57d4ee49003a8","status":"passed","time":{"start":1752760243902,"stop":1752760345496,"duration":101594}},{"uid":"ae0e6ed01d25ffc4","status":"passed","time":{"start":1752244885705,"stop":1752244988675,"duration":102970}},{"uid":"c24049ce60c6d2a3","status":"passed","time":{"start":1752145840252,"stop":1752145939032,"duration":98780}},{"uid":"aa4343e348b160de","status":"passed","time":{"start":1751479010972,"stop":1751479110955,"duration":99983}},{"uid":"57bdf56153c9b68c","status":"passed","time":{"start":1751472402834,"stop":1751472508956,"duration":106122}},{"uid":"95a33244056cd4e8","status":"passed","time":{"start":1751283215057,"stop":1751283321097,"duration":106040}},{"uid":"3da5a8d9175b0c92","status":"passed","time":{"start":1751276144532,"stop":1751276246035,"duration":101503}},{"uid":"fe731636004271d","status":"passed","time":{"start":1751231642336,"stop":1751231744345,"duration":102009}},{"uid":"ed105200104fe923","status":"passed","time":{"start":1750985352305,"stop":1750985460777,"duration":108472}},{"uid":"247ef4cae3d97883","status":"passed","time":{"start":1750836697285,"stop":1750836803293,"duration":106008}},{"uid":"89dcd730d32ab43f","status":"passed","time":{"start":1750656827226,"stop":1750656933760,"duration":106534}},{"uid":"1a0847de82765e70","status":"passed","time":{"start":1750246239210,"stop":1750246351297,"duration":112087}},{"uid":"521f9a2a66e56966","status":"passed","time":{"start":1750239203710,"stop":1750239301382,"duration":97672}},{"uid":"d12a59b3c3438f01","status":"passed","time":{"start":1749770085540,"stop":1749770186601,"duration":101061}},{"uid":"9acb85fce33105dd","status":"passed","time":{"start":1749546564693,"stop":1749546665876,"duration":101183}},{"uid":"ac2b86692ad36cbd","status":"passed","time":{"start":1748968328989,"stop":1748968427799,"duration":98810}},{"uid":"c08ea9e2b8fa8559","status":"passed","time":{"start":1748929822995,"stop":1748929928023,"duration":105028}},{"uid":"87349ae77eddb799","status":"passed","time":{"start":1748864245704,"stop":1748864340196,"duration":94492}},{"uid":"cbaf5a877b743fb5","status":"passed","time":{"start":1748857106711,"stop":1748857212059,"duration":105348}}]},"tags":[]},"source":"5bd2b1adc7cf0368.json","parameterValues":[]}
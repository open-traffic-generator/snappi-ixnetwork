{"uid":"1666f5987eca6f4e","name":"test_compact","historyId":"pytest:test_compact#test_compact","time":{"start":1742993864845,"stop":1742993878865,"duration":14020},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\n    self.ngpf.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\n    self._configure_topology()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\n    self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\n 'Config' object has no attribute 'stateful_flows'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe35f2430>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:363: in config_ixnetwork\n    self.ngpf.config()\nsnappi_ixnetwork/device/ngpf.py:69: in config\n    self._configure_topology()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.device.ngpf.Ngpf object at 0x7fdbe3e23b50>\n\n    def _configure_topology(self):\n        self.stop_topology()\n        self.api._remove(self.api._topology, [])\n        ixn_topos = self.create_node(self._ixn_config, \"topology\")\n        # Configured all interfaces\n        self._configure_device_group(ixn_topos)\n    \n        # Configure all MACsec interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._macsec.config(device)\n    \n        # We need to configure all interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._bgp.config(device)\n    \n        #Configure all RoCEv2 interface before configure protocols\n        for device in self.api.snappi_config.devices:\n>           self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE           AttributeError: 'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/device/ngpf.py:125: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_compact(api, utils):\n        \"\"\"\n        1. Configure 1000 similar devices contain Ether>IPv4>BGPv4\n           route in two ports\n        2. Create three traffic each traffic with diff set of endpoints\n        3. Concrete class should compact the devices to IxNet DeviceGroup.\n        4. Validate all through RestPy\n        \"\"\"\n        SIZE = 1024\n        PACKETS = 1000\n    \n        config_values = dict()\n        num_of_devices = 1000\n        num_of_routes = 1000\n        config_values[\"d1_name\"] = \"Tx Device 1\"\n        config_values[\"d2_name\"] = \"Rx Device 1\"\n        config_values[\"d3_name\"] = \"Rx Device 3\"\n        config_values[\"Multiplier\"] = num_of_devices\n        rx_device_with_rr = 3\n    \n        config = api.config()\n        api.enable_scaling(True)\n    \n        tx_port, rx_port = config.ports.port(\n            name=\"Tx Port\", location=utils.settings.ports[0]\n        ).port(name=\"Rx Port\", location=utils.settings.ports[1])\n    \n        l1 = config.layer1.layer1()[0]\n        l1.name = \"l1\"\n        l1.port_names = [rx_port.name, tx_port.name]\n        l1.media = utils.settings.media\n        l1.speed = utils.settings.speed\n    \n        macs = get_macs(\"000000000011\", 2 * num_of_devices)\n    \n        config_values[\"tx_macs\"], config_values[\"rx_macs\"] = macs[::2], macs[1::2]\n        config_values[\"vlan_ids\"] = [str(i) for i in range(1, num_of_devices + 1)]\n    \n        ip_adds = get_ip_addresses(\"10.10.2.1\", 2 * num_of_devices)\n        ipv6_adds = get_ipv6_addrs(\"2001::1/64\", 2 * num_of_devices)\n    \n        config_values[\"tx_adds\"], config_values[\"rx_adds\"] = (\n            ip_adds[::2],\n            ip_adds[1::2],\n        )\n    \n        config_values[\"tx_ipv6_adds\"], config_values[\"rx_ipv6_adds\"] = (\n            ipv6_adds[::2],\n            ipv6_adds[1::2],\n        )\n        config_values[\"tx_rr_add1\"] = get_ip_addresses(\"200.1.0.0\", num_of_routes)\n        config_values[\"tx_rr_add2\"] = get_ip_addresses(\"201.1.0.0\", num_of_routes)\n        next_hop_addr = get_ip_addresses(\"4.4.4.1\", num_of_routes)\n    \n        config_values[\"rx_rr_add1\"] = \"210.1.0.0\"\n    \n        for i in range(1, num_of_devices + 1):\n            tx_device = config.devices.add()\n            tx_device.name = \"Tx Device {0}\".format(i)\n            tx_eth = tx_device.ethernets.add()\n            tx_eth.connection.port_name = tx_port.name\n            tx_eth.name = \"Tx eth {0}\".format(i)\n            tx_eth.mac = config_values[\"tx_macs\"][i - 1]\n            tx_vlan = tx_eth.vlans.vlan()[-1]\n            tx_vlan.name = \"Tx vlan {0}\".format(i)\n            tx_vlan.id = int(config_values[\"vlan_ids\"][i - 1])\n            tx_ip = tx_eth.ipv4_addresses.add()\n            tx_ip.name = \"Tx IP {0}\".format(i)\n            tx_ip.address = config_values[\"tx_adds\"][i - 1]\n            tx_ip.gateway = config_values[\"rx_adds\"][i - 1]\n            tx_ip.prefix = 24\n    \n            tx_ipv6 = tx_eth.ipv6_addresses.add()\n            tx_ipv6.name = \"Tx IP v6{0}\".format(i)\n            tx_ipv6.address = config_values[\"tx_ipv6_adds\"][i - 1]\n            tx_ipv6.gateway = config_values[\"rx_ipv6_adds\"][i - 1]\n            tx_ipv6.prefix = 64\n    \n            tx_bgp = tx_device.bgp\n            tx_bgp.router_id = config_values[\"tx_adds\"][i - 1]\n            tx_bgp_int = tx_bgp.ipv4_interfaces.add()\n            tx_bgp_int.ipv4_name = tx_ip.name\n            tx_peer = tx_bgp_int.peers.add()\n            tx_peer.name = \"BGP Peer {0}\".format(i)\n            tx_peer.as_type = \"ibgp\"\n            tx_peer.peer_address = config_values[\"rx_adds\"][i - 1]\n            tx_peer.as_number = 65200\n    \n            tx_rr = tx_peer.v4_routes.add(name=\"Tx RR {0}\".format(i))\n            tx_rr.addresses.add(\n                count=20, address=config_values[\"tx_rr_add1\"][i - 1], prefix=32\n            )\n            tx_rr.addresses.add(\n                count=10, address=config_values[\"tx_rr_add2\"][i - 1], prefix=24\n            )\n            tx_rr.next_hop_ipv4_address = next_hop_addr[i - 1]\n    \n        for i in range(1, num_of_devices + 1):\n            rx_device = config.devices.add()\n            rx_device.name = \"Rx Device {0}\".format(i)\n            rx_eth = rx_device.ethernets.add()\n            rx_eth.connection.port_name = rx_port.name\n            rx_eth.name = \"Rx eth {0}\".format(i)\n            rx_eth.mac = config_values[\"rx_macs\"][i - 1]\n            rx_vlan = rx_eth.vlans.vlan()[-1]\n            rx_vlan.name = \"Rx vlan {0}\".format(i)\n            rx_vlan.id = int(config_values[\"vlan_ids\"][i - 1])\n            rx_ip = rx_eth.ipv4_addresses.add()\n            rx_ip.name = \"Rx IP {0}\".format(i)\n            rx_ip.address = config_values[\"rx_adds\"][i - 1]\n            rx_ip.gateway = config_values[\"tx_adds\"][i - 1]\n            rx_ip.prefix = 24\n    \n            rx_ipv6 = rx_eth.ipv6_addresses.add()\n            rx_ipv6.name = \"Rx IP v6{0}\".format(i)\n            rx_ipv6.address = config_values[\"rx_ipv6_adds\"][i - 1]\n            rx_ipv6.gateway = config_values[\"tx_ipv6_adds\"][i - 1]\n            rx_ipv6.prefix = 64\n    \n            rx_bgp = rx_device.bgp\n            rx_bgp.router_id = config_values[\"rx_adds\"][i - 1]\n            rx_bgp_int = rx_bgp.ipv4_interfaces.add()\n            rx_bgp_int.ipv4_name = rx_ip.name\n            rx_peer = rx_bgp_int.peers.add()\n            rx_peer.name = \"Rx Bgp {0}\".format(i)\n            rx_peer.as_type = \"ibgp\"\n            rx_peer.peer_address = config_values[\"tx_adds\"][i - 1]\n            rx_peer.as_number = 65200\n    \n    \n            if i == rx_device_with_rr:\n                rx_rr = rx_peer.v4_routes.add(name=\"Rx RR {0}\".format(i))\n                rx_rr.addresses.add(\n                    count=1000,\n                    address=config_values[\"rx_rr_add1\"],\n                    prefix=32,\n                )\n    \n        config_values[\"f1_name\"] = \"f1\"\n        config_values[\"f2_name\"] = \"f2\"\n        config_values[\"f3_name\"] = \"f3\"\n        flow1, flow2, flow3 = (\n            config.flows.flow(name=config_values[\"f1_name\"])\n            .flow(name=config_values[\"f2_name\"])\n            .flow(name=config_values[\"f3_name\"])\n        )\n    \n        # Route Range as endpoints\n        flow1.tx_rx.device.tx_names = [\"Tx RR 2\", \"Tx RR 4\"]\n        flow1.tx_rx.device.rx_names = [\"Rx RR 3\"]\n        _, _, tcp = flow1.packet.ethernet().ipv4().tcp()\n        tcp.src_port.value = 555\n        tcp.dst_port.value = 666\n    \n        flow1.size.fixed = SIZE\n        flow1.duration.fixed_packets.packets = PACKETS\n    \n        flow1.metrics.enable = True\n        flow1.metrics.loss = True\n    \n        # Ethernet as endpoints\n        flow2.tx_rx.device.tx_names = [\"Tx eth 2\"]\n        flow2.tx_rx.device.rx_names = [\"Rx eth 2\"]\n    \n        flow2.size.fixed = SIZE\n        flow2.duration.fixed_packets.packets = PACKETS\n    \n        flow2.metrics.enable = True\n        flow2.metrics.loss = True\n    \n        # All Ipv4 as endpoints\n        flow3.tx_rx.device.tx_names = [\n            \"Tx IP {0}\".format(i) for i in range(1, num_of_devices + 1)\n        ]\n        flow3.tx_rx.device.rx_names = [\n            \"Rx IP {0}\".format(i) for i in range(1, num_of_devices + 1)\n        ]\n    \n        flow3.size.fixed = SIZE\n        flow3.duration.fixed_packets.packets = PACKETS\n    \n        flow3.metrics.enable = True\n        flow3.metrics.loss = True\n    \n>       api.set_config(config)\n\ntests/test_compact.py:253: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe35f2430>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\nE               self.ngpf.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\nE               self._configure_topology()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\nE               self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE            'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 1.874s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 2.030s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 0.187s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.094s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Speed conversion is not require for (port.name, speed) : [('Tx Port', 'normal'), ('Rx Port', 'normal')]","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.140s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location connect [Tx Port, Rx Port] 1.262s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1443 Tx Port connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1443 Rx Port connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location state check [Tx Port, Rx Port] 0.287s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 2.425s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 2.070s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.097s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 1.827s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 1.922s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":17,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"test_compact"},{"name":"package","value":"test_compact"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":56,"unknown":0,"total":61},"items":[{"uid":"1c143def2296614f","status":"passed","time":{"start":1742381702821,"stop":1742381792672,"duration":89851}},{"uid":"8e72f2bbe3d8e303","status":"passed","time":{"start":1742374910714,"stop":1742375015363,"duration":104649}},{"uid":"78c8ca081a42e9a7","status":"passed","time":{"start":1742299164935,"stop":1742299259099,"duration":94164}},{"uid":"527adf0899771c27","status":"passed","time":{"start":1741799882568,"stop":1741799972169,"duration":89601}},{"uid":"43daa48b13060f0e","status":"passed","time":{"start":1741788649556,"stop":1741788761488,"duration":111932}},{"uid":"4b176abdc1a72381","status":"passed","time":{"start":1741764418062,"stop":1741764520190,"duration":102128}},{"uid":"b0a9eb7edd38f876","status":"passed","time":{"start":1741757585447,"stop":1741757669663,"duration":84216}},{"uid":"c76016d2a07e0f7b","status":"passed","time":{"start":1741690639312,"stop":1741690727378,"duration":88066}},{"uid":"d90fc6c5db3b6fbb","status":"passed","time":{"start":1741682454375,"stop":1741682545580,"duration":91205}},{"uid":"8f5de35993cdb4","status":"passed","time":{"start":1741584950599,"stop":1741585056496,"duration":105897}},{"uid":"dd56c1dcd382a1","status":"passed","time":{"start":1741547140558,"stop":1741547232987,"duration":92429}},{"uid":"2d1237a177df759f","status":"passed","time":{"start":1741459053851,"stop":1741459158891,"duration":105040}},{"uid":"907ea80b9a8cc9f7","status":"passed","time":{"start":1741451329877,"stop":1741451423109,"duration":93232}},{"uid":"bdfc8cab851439dc","status":"passed","time":{"start":1741375664779,"stop":1741375778042,"duration":113263}},{"uid":"23b7f5ca84edbdad","status":"passed","time":{"start":1741368681952,"stop":1741368779091,"duration":97139}},{"uid":"b496e16ab72a4c34","status":"passed","time":{"start":1741353394880,"stop":1741353507404,"duration":112524}},{"uid":"3eee317e90f007f1","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 434, in set_control_state\n    event_names = self.ngpf.set_route_state(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 304, in set_route_state\n    self.api._ixnetwork.Globals.Topology.ApplyOnTheFly()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/globals/topology/topology_678a8dc80c9b4b2b5c741072eab4305d.py\", line 1846, in ApplyOnTheFly\n    return self._execute(\"applyOnTheFly\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 289, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 572, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 640, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 476, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  Action ApplyChanges cannot be executed while other actions are in progress. Actions in progress: \nClear Stats Rx IP v63\n.","time":{"start":1741346675485,"stop":1741346768723,"duration":93238}},{"uid":"ec40185fc066404b","status":"passed","time":{"start":1741066144231,"stop":1741066244644,"duration":100413}},{"uid":"e8696ae64fa2104f","status":"passed","time":{"start":1741017342205,"stop":1741017440118,"duration":97913}},{"uid":"2ed1ba793a9f9569","status":"passed","time":{"start":1741010585345,"stop":1741010694731,"duration":109386}}]},"tags":[]},"source":"1666f5987eca6f4e.json","parameterValues":[]}
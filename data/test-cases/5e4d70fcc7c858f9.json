{"uid":"5e4d70fcc7c858f9","name":"test_mka_stats","historyId":"pytest:mka.test_mka_stats#test_mka_stats","time":{"start":1756112750540,"stop":1756112817831,"duration":67291},"status":"failed","statusMessage":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7f7de556dc00>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7f7de556dc00> = <snappi.snappi.MetricsResponse object at 0x7f7de55dd760>.mka_metrics","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7f7de9512770>\nb2b_raw_config = <snappi.snappi.Config object at 0x7f7de555e250>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_mka_stats(api, b2b_raw_config, utils):\n        \"\"\"\n        Test for the mka configuration\n        \"\"\"\n        api.set_config(api.config())\n        b2b_raw_config.flows.clear()\n    \n        p1, p2 = b2b_raw_config.ports\n        d1, d2 = b2b_raw_config.devices.device(name=\"mka_dev1\").device(name=\"mka_dev2\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:00:00:11\", \"00:00:00:00:00:22\"\n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n    \n        # MACsec\n        macsec1, macsec2 = d1.macsec, d2.macsec\n        macsec1_int, macsec2_int = macsec1.ethernet_interfaces.add(), macsec2.ethernet_interfaces.add()\n        macsec1_int.eth_name, macsec2_int.eth_name = eth1.name, eth2.name\n        secy1, secy2 = macsec1_int.secure_entity, macsec2_int.secure_entity\n        secy1.name, secy2.name = \"macsec1\", \"macsec2\"\n    \n        # Data plane\n        secy1.data_plane.choice = secy2.data_plane.choice = \"no_encapsulation\"\n    \n        # MKA\n        secy1_key_gen_proto, secy2_key_gen_proto = secy1.key_generation_protocol, secy2.key_generation_protocol\n        secy1_key_gen_proto.choice = secy2_key_gen_proto.choice = \"mka\"\n        kay1, kay2 = secy1_key_gen_proto.mka, secy2_key_gen_proto.mka\n        kay1.name, kay2.name = \"mka1\", \"mka2\"\n    \n        # Basic properties\n        kay1.basic.key_derivation_function = kay2.basic.key_derivation_function = \"aes_cmac_128\"\n    \n        kay1.basic.psk_chain_start_time.choice = kay2.basic.psk_chain_start_time.choice = \"utc\"\n        kay1_psk_chain_start_time = kay1.basic.psk_chain_start_time.utc\n        kay2_psk_chain_start_time = kay2.basic.psk_chain_start_time.utc\n    \n        kay1_psk_chain_start_time.day = kay2_psk_chain_start_time.day = 6\n        kay1_psk_chain_start_time.month = kay2_psk_chain_start_time.month = 5\n        kay1_psk_chain_start_time.year = kay2_psk_chain_start_time.year = 2025\n        kay1_psk_chain_start_time.hour = kay2_psk_chain_start_time.hour = 7\n        kay1_psk_chain_start_time.minute = kay2_psk_chain_start_time.minute = 10\n        kay1_psk_chain_start_time.second = kay2_psk_chain_start_time.second = 56\n    \n        # Key source: PSK\n        kay1_key_src, kay2_key_src = kay1.basic.key_source, kay2.basic.key_source\n        kay1_key_src.choice = kay2_key_src.choice = \"psk\"\n        kay1_psk_chain, kay2_psk_chain = kay1_key_src.psks, kay2_key_src.psks\n    \n        # PSK 1\n        kay1_psk1, kay2_psk1 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk1.cak_name = kay2_psk1.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD01\"\n        kay1_psk1.cak_value = kay2_psk1.cak_value = \"0xF123456789ABCDEF0123456789ABCD01\"\n    \n        kay1_psk1.start_offset_time.hh = kay2_psk1.start_offset_time.hh = 0\n        kay1_psk1.start_offset_time.mm = kay2_psk1.start_offset_time.mm = 0\n    \n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 0\n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 10\n    \n        # PSK 2\n        kay1_psk2, kay2_psk2 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk2.cak_name = kay2_psk2.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD02\"\n        kay1_psk2.cak_value = kay2_psk2.cak_value = \"0xF123456789ABCDEF0123456789ABCD02\"\n    \n        kay1_psk2.start_offset_time.hh = kay2_psk2.start_offset_time.hh = 0\n        kay1_psk2.start_offset_time.mm = kay2_psk2.start_offset_time.mm = 9\n    \n        kay1_psk2.end_offset_time.hh = kay2_psk2.end_offset_time.hh = 0\n        kay1_psk2.end_offset_time.mm = kay2_psk2.end_offset_time.mm = 0\n    \n        # Rekey mode\n        kay1_rekey_mode, kay2_rekey_mode = kay1.basic.rekey_mode, kay2.basic.rekey_mode\n        kay1_rekey_mode.choice = kay2_rekey_mode.choice = \"timer_based\"\n        kay1_rekey_timer_based, kay2_rekey_timer_based = kay1_rekey_mode.timer_based, kay2_rekey_mode.timer_based\n        kay1_rekey_timer_based.choice = kay2_rekey_timer_based.choice = \"fixed_count\"\n        kay1_rekey_timer_based.fixed_count = kay2_rekey_timer_based.fixed_count = 20\n        kay1_rekey_timer_based.interval = kay2_rekey_timer_based.interval = 200\n    \n        # Remaining basic properties autofilled\n    \n        # Tx SC\n        kay1_tx, kay2_tx = kay1.tx, kay2.tx\n        kay1_txsc1, kay2_txsc1 = kay1_tx.secure_channels.add(), kay2_tx.secure_channels.add()\n        kay1_txsc1.name, kay2_txsc1.name = \"txsc1\", \"txsc2\"\n        kay1_txsc1.system_id, kay2_txsc1.system_id = eth1.mac, eth2.mac\n        # Remaining Tx SC settings autofilled\n    \n        utils.start_traffic(api, b2b_raw_config)\n        utils.wait_for(\n            lambda: results_ok(api), \"stats to be as expected\", timeout_seconds=10\n        )\n        enums = [\n            \"mkpdu_tx\",\n            \"mkpdu_rx\",\n            \"live_peer_count\",\n            \"potential_peer_count\",\n            \"latest_key_tx_peer_count\",\n            \"latest_key_rx_peer_count\",\n            \"malformed_mkpdu\",\n            \"icv_mismatch\",\n        ]\n        expected_results = {\n            \"mka_dev1\": [0, 0, 0, 0, 0, 0, 0, 0],\n            \"mka_dev2\": [0, 0, 0, 0, 0, 0, 0, 0],\n        }\n        req = api.metrics_request()\n        req.mka.peer_names = [\"mka_dev1\"]\n        results = api.get_metrics(req)\n>       assert len(results.mka_metrics) == 1\nE       assert 2 == 1\nE        +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7f7de556dc00>)\nE        +    where <snappi.snappi.MkaMetricIter object at 0x7f7de556dc00> = <snappi.snappi.MetricsResponse object at 0x7f7de55dd760>.mka_metrics\n\ntests/mka/test_mka_stats.py:116: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1518 tx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1518 rx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"mka.test_mka_stats"},{"name":"package","value":"mka.test_mka_stats"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":97,"broken":0,"skipped":1,"passed":78,"unknown":0,"total":176},"items":[{"uid":"4f4820e064045c73","status":"passed","time":{"start":1756097345515,"stop":1756097419904,"duration":74389}},{"uid":"b677891b9dab9bea","status":"passed","time":{"start":1755853618770,"stop":1755853695225,"duration":76455}},{"uid":"caf31e5569a0cda4","status":"passed","time":{"start":1755770830114,"stop":1755770905350,"duration":75236}},{"uid":"b20da37196d3e70e","status":"passed","time":{"start":1755605594608,"stop":1755605667005,"duration":72397}},{"uid":"127276238537ff3c","status":"passed","time":{"start":1755598268759,"stop":1755598344906,"duration":76147}},{"uid":"9c2c7fa2fcbe10e9","status":"passed","time":{"start":1755590656281,"stop":1755590739822,"duration":83541}},{"uid":"c130df5c6e09219c","status":"passed","time":{"start":1755582190551,"stop":1755582267679,"duration":77128}},{"uid":"437328f07bf48da6","status":"passed","time":{"start":1755172446673,"stop":1755172528541,"duration":81868}},{"uid":"4ff84ff22fdc6bb3","status":"passed","time":{"start":1755152544019,"stop":1755152627908,"duration":83889}},{"uid":"db258372e2f2b6b4","status":"passed","time":{"start":1754658965828,"stop":1754659043891,"duration":78063}},{"uid":"94a13c79a742a23e","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7f33a9899900>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7f33a9899900> = <snappi.snappi.MetricsResponse object at 0x7f33a95d3150>.mka_metrics","time":{"start":1754630978584,"stop":1754631046164,"duration":67580}},{"uid":"68e0d1413b25f854","status":"passed","time":{"start":1754558943969,"stop":1754559025333,"duration":81364}},{"uid":"1d551032a7f65b80","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7fa9bc09ac80>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7fa9bc09ac80> = <snappi.snappi.MetricsResponse object at 0x7fa9bb1ca7a0>.mka_metrics","time":{"start":1754546458930,"stop":1754546532981,"duration":74051}},{"uid":"1d2e011240f5e8ee","status":"passed","time":{"start":1754506043870,"stop":1754506126708,"duration":82838}},{"uid":"81c99c4c69380a61","status":"passed","time":{"start":1754497549774,"stop":1754497630100,"duration":80326}},{"uid":"7a5a03f325ce8af","status":"passed","time":{"start":1754464142327,"stop":1754464221377,"duration":79050}},{"uid":"65192e97d7f269ca","status":"passed","time":{"start":1754456730779,"stop":1754456810227,"duration":79448}},{"uid":"72bfcfe58354f7db","status":"passed","time":{"start":1754377059323,"stop":1754377135122,"duration":75799}},{"uid":"b5877031654f742a","status":"passed","time":{"start":1754345071017,"stop":1754345152876,"duration":81859}},{"uid":"b20396cd1ebdb87b","status":"passed","time":{"start":1754337190110,"stop":1754337269141,"duration":79031}}]},"tags":[]},"source":"5e4d70fcc7c858f9.json","parameterValues":[]}
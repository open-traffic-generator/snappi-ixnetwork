{"uid":"1855da121842bb83","name":"test_vxlan_compact","historyId":"pytest:vxlan.test_vxlan_compact#test_vxlan_compact","time":{"start":1742993864845,"stop":1742993867396,"duration":2551},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\n    self.ngpf.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\n    self._configure_topology()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\n    self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\n 'Config' object has no attribute 'stateful_flows'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe09389a0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:363: in config_ixnetwork\n    self.ngpf.config()\nsnappi_ixnetwork/device/ngpf.py:69: in config\n    self._configure_topology()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.device.ngpf.Ngpf object at 0x7fdbe3e23b50>\n\n    def _configure_topology(self):\n        self.stop_topology()\n        self.api._remove(self.api._topology, [])\n        ixn_topos = self.create_node(self._ixn_config, \"topology\")\n        # Configured all interfaces\n        self._configure_device_group(ixn_topos)\n    \n        # Configure all MACsec interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._macsec.config(device)\n    \n        # We need to configure all interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._bgp.config(device)\n    \n        #Configure all RoCEv2 interface before configure protocols\n        for device in self.api.snappi_config.devices:\n>           self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE           AttributeError: 'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/device/ngpf.py:125: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_vxlan_compact(api, utils):\n        count = 4\n        config = api.config()\n    \n        edge1_macs = get_macs(\"001801000011\", count)\n        edge2_macs = get_macs(\"001601000011\", count)\n    \n        p1, p2 = config.ports.port(\n            name=\"tx\", location=utils.settings.ports[0]\n        ).port(name=\"rx\", location=utils.settings.ports[1])\n    \n        d1, d2 = config.devices.device(name=\"d1\").device(name=\"d2\")\n    \n        api.enable_scaling(True)\n    \n        e1, e2 = d1.ethernets.add(), d2.ethernets.add()\n        e1.connection.port_name, e2.connection.port_name = p1.name, p2.name\n        e1.name, e2.name = \"e1\", \"e2\"\n        e1.mac, e2.mac = \"00:01:00:00:00:01\", \"00:01:00:00:00:02\"\n    \n        ip1, ip2 = e1.ipv4_addresses.add(), e2.ipv4_addresses.add()\n        ip1.name, ip2.name = \"ip_d1\", \"ip_d2\"\n    \n        ip1.address, ip2.address = \"10.10.10.1\", \"10.10.10.2\"\n        ip1.gateway, ip2.gateway = \"10.10.10.2\", \"10.10.10.1\"\n    \n        bgp1, bgp2 = d1.bgp, d2.bgp\n        bgp1.router_id, bgp2.router_id = \"10.10.10.1\", \"10.10.10.2\"\n        bgp1_ipv4 = bgp1.ipv4_interfaces.add()\n        bgp2_ipv4 = bgp2.ipv4_interfaces.add()\n    \n        bgp1_ipv4.ipv4_name, bgp2_ipv4.ipv4_name = ip1.name, ip2.name\n        bgp1_peer, bgp2_peer = bgp1_ipv4.peers.add(), bgp2_ipv4.peers.add()\n        bgp1_peer.name, bgp2_peer.name = \"bgp_router1\", \"bgp_router2\"\n    \n        bgp1_peer.peer_address, bgp2_peer.peer_address = \"10.10.10.2\", \"10.10.10.1\"\n        bgp1_peer.as_type, bgp2_peer.as_type = \"ebgp\", \"ebgp\"\n        bgp1_peer.as_number, bgp2_peer.as_number = 100, 200\n    \n        # Create & advertise loopback under bgp in d1 & d2\n        d1_l1 = d1.ipv4_loopbacks.add()\n        d1_l1.name = \"d1_loopback1\"\n        d1_l1.eth_name = \"e1\"\n        d1_l1.address = \"1.1.1.1\"\n    \n        bgp1_l1 = bgp1_peer.v4_routes.add(name=\"bgp_l1\")\n        bgp1_l1.addresses.add(address=\"1.1.1.1\", prefix=32)\n    \n        d2_l1 = d2.ipv4_loopbacks.add()\n        d2_l1.name = \"d2_loopback1\"\n        d2_l1.eth_name = \"e2\"\n        d2_l1.address = \"2.2.2.2\"\n    \n        bgp2_l1 = bgp2_peer.v4_routes.add(name=\"bgp2_l1\")\n        bgp2_l1.addresses.add(address=\"2.2.2.2\", prefix=32)\n    \n        # Create vxlan on d1\n        d1_vxlan = d1.vxlan.v4_tunnels.add()\n    \n        d1_vxlan.vni = 1000\n        d1_vxlan.source_interface = d1_l1.name\n        d1_vxlan.name = \"d1_vxlan\"\n    \n        # unicast communication\n        vtep = d1_vxlan.destination_ip_mode.unicast.vteps.add()\n        vtep.remote_vtep_address = \"2.2.2.2\"\n        for i in range(1, count + 1):\n            vtep.arp_suppression_cache.add(edge2_macs[i], \"100.1.{}.2\".format(i))\n    \n        # Create vxlan on d2\n        d2_vxlan = d2.vxlan.v4_tunnels.add()\n    \n        d2_vxlan.vni = 1000\n        d2_vxlan.source_interface = d2_l1.name\n        d2_vxlan.name = \"d2_vxlan\"\n    \n        # unicast communication\n        vtep = d2_vxlan.destination_ip_mode.unicast.vteps.add()\n        vtep.remote_vtep_address = \"1.1.1.1\"\n        for i in range(1, count + 1):\n            vtep.arp_suppression_cache.add(edge1_macs[i], \"100.1.{}.1\".format(i))\n    \n        for i in range(1, count + 1):\n            edge1_d = config.devices.device(name=\"edge1_d{}\".format(i))[-1]\n            edge2_d = config.devices.device(name=\"edge2_d{}\".format(i))[-1]\n    \n            edge1_e = edge1_d.ethernets.ethernet()[-1]\n            edge2_e = edge2_d.ethernets.ethernet()[-1]\n    \n            edge1_e.connection.vxlan_name = \"d1_vxlan\"\n            edge2_e.connection.vxlan_name = \"d2_vxlan\"\n    \n            edge1_e.name = \"edge1_e{}\".format(i)\n            edge2_e.name = \"edge2_e{}\".format(i)\n    \n            edge1_e.mac = edge1_macs[i]\n            edge2_e.mac = edge2_macs[i]\n    \n            edge1_ip = edge1_e.ipv4_addresses.add()\n            edge2_ip = edge2_e.ipv4_addresses.add()\n    \n            edge1_ip.name = \"edge1_ip_d{}\".format(i)\n            edge2_ip.name = \"edge2_ip_d{}\".format(i)\n    \n            edge1_ip.address = \"100.1.{}.1\".format(i)\n            edge2_ip.address = \"100.1.{}.2\".format(i)\n    \n            edge1_ip.gateway = \"100.1.{}.2\".format(i)\n            edge2_ip.gateway = \"100.1.{}.1\".format(i)\n    \n            edge1_bgp, edge2_bgp = edge1_d.bgp, edge2_d.bgp\n            edge1_bgp.router_id = \"100.1.{}.1\".format(i)\n            edge2_bgp.router_id = \"100.1.{}.2\".format(i)\n    \n            edge1_bgp_ipv4 = edge1_bgp.ipv4_interfaces.add()\n            edge2_bgp_ipv4 = edge2_bgp.ipv4_interfaces.add()\n    \n            edge1_bgp_ipv4.ipv4_name = \"edge1_ip_d{}\".format(i)\n            edge2_bgp_ipv4.ipv4_name = \"edge2_ip_d{}\".format(i)\n    \n            edge1_bgp_peer = edge1_bgp_ipv4.peers.add()\n            edge2_bgp_peer = edge2_bgp_ipv4.peers.add()\n    \n            edge1_bgp_peer.name = \"edge1_bgp{}\".format(i)\n            edge2_bgp_peer.name = \"edge2_bgp{}\".format(i)\n    \n            edge1_bgp_peer.peer_address = \"100.1.{}.2\".format(i)\n            edge2_bgp_peer.peer_address = \"100.1.{}.1\".format(i)\n    \n            edge1_bgp_peer.as_type, edge2_bgp_peer.as_type = \"ibgp\", \"ibgp\"\n            edge1_bgp_peer.as_number, edge2_bgp_peer.as_number = 1000, 1000\n    \n            edge1_bgp_rr = edge1_bgp_peer.v4_routes.add(name=\"A1{}\".format(i))\n            edge1_bgp_rr.addresses.add(\n                address=\"1.1.0.{}\".format(i), count=180, prefix=32\n            )\n    \n            edge1_bgp_rr2 = edge1_bgp_peer.v4_routes.add(name=\"D1{}\".format(i))\n            edge1_bgp_rr2.addresses.add(\n                address=\"2.1.0.{}\".format(i), count=1, prefix=32\n            )\n    \n            edge2_bgp_rr = edge2_bgp_peer.v4_routes.add(name=\"A2{}\".format(i))\n            edge2_bgp_rr.addresses.add(\n                address=\"3.1.0.{}\".format(i), count=180, prefix=32\n            )\n    \n            edge2_bgp_rr2 = edge2_bgp_peer.v4_routes.add(name=\"D2{}\".format(i))\n            edge2_bgp_rr2.addresses.add(\n                address=\"4.1.0.{}\".format(i), count=1, prefix=32\n            )\n    \n        a1_routes = [\"A1{}\".format(i) for i in range(1, count + 1)]\n        d1_routes = [\"D1{}\".format(i) for i in range(1, count + 1)]\n    \n        a2_routes = [\"A2{}\".format(i) for i in range(1, count + 1)]\n        d2_routes = [\"D2{}\".format(i) for i in range(1, count + 1)]\n    \n        flow = config.flows.flow(name=\"f1\")[-1]\n        flow.tx_rx.device.tx_names = a1_routes + d1_routes\n        flow.tx_rx.device.rx_names = a2_routes + d2_routes\n    \n        flow.duration.fixed_packets.packets = count * 10\n    \n        flow.metrics.enable = True\n        flow.metrics.loss = True\n    \n>       api.set_config(config)\n\ntests/vxlan/test_vxlan_compact.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe09389a0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\nE               self.ngpf.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\nE               self._configure_topology()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\nE               self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE            'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 0.012s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 0.295s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 0.190s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.093s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 0.751s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.090s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 0.285s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 0.373s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":12,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"vxlan.test_vxlan_compact"},{"name":"package","value":"vxlan.test_vxlan_compact"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":60,"unknown":0,"total":61},"items":[{"uid":"10026202af6cdaff","status":"passed","time":{"start":1742381702821,"stop":1742381713061,"duration":10240}},{"uid":"e3e91d82f37ccdd4","status":"passed","time":{"start":1742374910714,"stop":1742374921824,"duration":11110}},{"uid":"edefb7c62bcb19e5","status":"passed","time":{"start":1742299164935,"stop":1742299177711,"duration":12776}},{"uid":"7a1ea11cf00e8e01","status":"passed","time":{"start":1741799882568,"stop":1741799893941,"duration":11373}},{"uid":"cc48233da4f38da2","status":"passed","time":{"start":1741788649556,"stop":1741788666465,"duration":16909}},{"uid":"ff244c554373040d","status":"passed","time":{"start":1741764418062,"stop":1741764429162,"duration":11100}},{"uid":"fa01674ae3597847","status":"passed","time":{"start":1741757585447,"stop":1741757597549,"duration":12102}},{"uid":"24cc2caa29923c06","status":"passed","time":{"start":1741690639312,"stop":1741690651306,"duration":11994}},{"uid":"ed4e6064485be16f","status":"passed","time":{"start":1741682454375,"stop":1741682468669,"duration":14294}},{"uid":"b6ad146f09bcdf43","status":"passed","time":{"start":1741584950599,"stop":1741584971036,"duration":20437}},{"uid":"d387d87400e85ed2","status":"passed","time":{"start":1741547140558,"stop":1741547157359,"duration":16801}},{"uid":"9bcf8e7ba981ec43","status":"passed","time":{"start":1741459053851,"stop":1741459069779,"duration":15928}},{"uid":"14bd4d28647cb89b","status":"passed","time":{"start":1741451329877,"stop":1741451347256,"duration":17379}},{"uid":"ce6e5b2ad2256f41","status":"passed","time":{"start":1741375664779,"stop":1741375680470,"duration":15691}},{"uid":"500e61e093566173","status":"passed","time":{"start":1741368681952,"stop":1741368704183,"duration":22231}},{"uid":"889b65aacf70d01c","status":"passed","time":{"start":1741353394880,"stop":1741353411636,"duration":16756}},{"uid":"34e8967cd92f54e7","status":"passed","time":{"start":1741346675485,"stop":1741346691766,"duration":16281}},{"uid":"e42f219fa814c25","status":"passed","time":{"start":1741066144231,"stop":1741066161240,"duration":17009}},{"uid":"8cf292def0de3049","status":"passed","time":{"start":1741017342205,"stop":1741017360081,"duration":17876}},{"uid":"429bc91f454c7faf","status":"passed","time":{"start":1741010585345,"stop":1741010603653,"duration":18308}}]},"tags":[]},"source":"1855da121842bb83.json","parameterValues":[]}
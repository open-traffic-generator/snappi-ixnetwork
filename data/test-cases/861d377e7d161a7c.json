{"uid":"861d377e7d161a7c","name":"test_bgp_evpn","historyId":"pytest:bgp_evpn.test_bgp_evpn#test_bgp_evpn","time":{"start":1743020239133,"stop":1743020322650,"duration":83517},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 450, in set_control_state\n    self.traffic_item.transmit(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1341, in transmit\n    if (device.rocev2) and request.state == \"stop\":\n 'Device' object has no attribute 'rocev2'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fda9c75b4c0>\npayload = <snappi.snappi.ControlState object at 0x7fda99cf1530>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    event_state = request_payload.state\n                    with Timer(self, \"Setting route state\"):\n                        event_names = self.ngpf.set_route_state(request_payload)\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n>               self.traffic_item.transmit(request_payload)\n\nsnappi_ixnetwork/snappi_api.py:450: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7fda9a128df0>\nrequest = <snappi.snappi.StateTrafficFlowTransmit object at 0x7fda99d40d10>\n\n    def transmit(self, request):\n        \"\"\"Set flow transmit\n        1) check set_protocol_state for device protocols\n        2) If start then generate and apply traffic\n        3) Execute requested transmit action (start|stop|pause|resume)\n        \"\"\"\n        regex = \"\"\n        flow_names = [flow.name for flow in self._api._config.flows]\n        if request and request.flow_names:\n            flow_names = request.flow_names\n        if len(flow_names) == 1:\n            regex = \"^%s$\" % self._api.special_char(flow_names)[0]\n        elif len(flow_names) > 1:\n            regex = \"^(%s)$\" % \"|\".join(self._api.special_char(flow_names))\n    \n        self.logger.debug(\n            \"These %s flows will go into %s state\"\n            % (flow_names, request.state)\n        )\n        if request.state == \"start\":\n            ##This portion of code is to handle different stateful_traffic flow, currently only rocev2\n            for device in self._api._config.devices:\n                #Check if rocev2 exists in topology\n                if hasattr(device, \"rocev2\") and device.rocev2:\n                    ####### Create and Apply RoCEv2 Flow Groups here, as we have identified that RoCEv2 is present in Topology\n                    self._api._traffic.AddRoCEv2FlowGroups()\n                    rocev2_traffic = self._api._traffic.RoceV2Traffic.find(Enabled=True)\n                    stateful_flow = None\n                    options = None\n                    if hasattr(self._api._config, \"stateful_flows\"):\n                        stateful_flow = self._api._config.stateful_flows\n                    if hasattr(self._api._config, \"options\"):\n                        options = self._api._config.options\n                    self._rocev2._configureTrafficParameters(rocev2_traffic, stateful_flow, options)\n                    with Timer(self._api, \"Flows generate/apply\"):\n                        self._api._traffic.Apply()\n                    print (\"Starting Traffic\")\n                    self._api._traffic.Start()\n                    break\n            if len(self._api._topology.find()) > 0:\n                glob_topo = self._api._globals.Topology.refresh()\n                if glob_topo.Status == \"notStarted\":\n                    raise Exception(\n                        \"Please start protocols using set_protocol_state \"\n                        \"before start traffic\"\n                    )\n            if len(self._api._traffic_item.find()) == 0:\n                return\n            self._api._traffic_item.find(State=\"^unapplied$\")\n            if len(self._api._traffic_item) > 0:\n                with Timer(self._api, \"Flows generate/apply\"):\n                    self._api._traffic_item.Generate()\n                    self._api._traffic.Apply()\n            self._api._traffic_item.find(State=\"^started$\")\n            if len(self._api._traffic_item) == 0:\n                with Timer(self._api, \"Flows clear statistics\"):\n                    self._api._ixnetwork.ClearStats(\n                        [\n                            \"waitForPortStatsRefresh\",\n                            \"waitForTrafficStatsRefresh\",\n                        ]\n                    )\n            self._api.capture._start_capture()\n        self._api._traffic_item.find(Name=regex)\n        for device in self._api._config.devices:\n>           if (device.rocev2) and request.state == \"stop\":\nE           AttributeError: 'Device' object has no attribute 'rocev2'\n\nsnappi_ixnetwork/trafficitem.py:1341: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fda9c75b4c0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_bgp_evpn(api, utils):\n        # Creating Ports\n        config = api.config()\n        p1 = config.ports.port(name=\"p1\", location=utils.settings.ports[0])[-1]\n        p2 = config.ports.port(name=\"p2\", location=utils.settings.ports[1])[-1]\n    \n        # Create BGP devices on tx & rx\n        tx_d = config.devices.device(name=\"tx_d\")[-1]\n        rx_d = config.devices.device(name=\"rx_d\")[-1]\n    \n        tx_eth = tx_d.ethernets.add()\n        tx_eth.connection.port_name = p1.name\n        rx_eth = rx_d.ethernets.add()\n        rx_eth.connection.port_name = p2.name\n    \n        tx_eth.name = \"tx_eth\"\n        tx_eth.mac = \"00:11:00:00:00:01\"\n        tx_ip = tx_eth.ipv4_addresses.ipv4(\n            name=\"tx_ip\", address=\"20.20.20.2\", gateway=\"20.20.20.1\"\n        )[-1]\n    \n        rx_eth.name = \"rx_eth\"\n        rx_eth.mac = \"00:12:00:00:00:01\"\n        rx_ip = rx_eth.ipv4_addresses.ipv4(\n            name=\"rx_ip\", address=\"20.20.20.1\", gateway=\"20.20.20.2\"\n        )[-1]\n    \n        # tx_bgp\n        tx_bgp = tx_d.bgp\n        tx_bgp.router_id = \"192.0.0.1\"\n        tx_bgp_iface = tx_bgp.ipv4_interfaces.v4interface(ipv4_name=tx_ip.name)[-1]\n        tx_bgp_peer = tx_bgp_iface.peers.v4peer(\n            name=\"tx_eBGP\",\n            peer_address=\"20.20.20.1\",\n            as_type=\"ebgp\",\n            as_number=100,\n        )[-1]\n    \n        # rx_bgp\n        rx_bgp = rx_d.bgp\n        rx_bgp.router_id = \"193.0.0.1\"\n        rx_bgp_iface = rx_bgp.ipv4_interfaces.v4interface(ipv4_name=rx_ip.name)[-1]\n        rx_bgp_peer = rx_bgp_iface.peers.v4peer(\n            name=\"rx_eBGP\",\n            peer_address=\"20.20.20.2\",\n            as_type=\"ebgp\",\n            as_number=200,\n        )[-1]\n    \n        # Create & advertise loopback under bgp in tx and rx\n        tx_l1 = tx_d.ipv4_loopbacks.add()\n        tx_l1.name = \"tx_loopback1\"\n        tx_l1.eth_name = \"tx_eth\"\n        tx_l1.address = \"1.1.1.1\"\n    \n        tx_l1_r = tx_bgp_peer.v4_routes.add(name=\"tx_l1\")\n        tx_l1_r.addresses.add(address=\"1.1.1.1\", prefix=32)\n    \n        rx_l1 = rx_d.ipv4_loopbacks.add()\n        rx_l1.name = \"rx_loopback1\"\n        rx_l1.eth_name = \"rx_eth\"\n        rx_l1.address = \"2.2.2.2\"\n    \n        rx_l1_r = rx_bgp_peer.v4_routes.add(name=\"rx_l1\")\n        rx_l1_r.addresses.add(address=\"2.2.2.2\", prefix=32)\n    \n        # Create BGP EVPN on tx\n        tx_vtep = config.devices.device(name=\"tx_vtep\")[-1]\n        tx_vtep_bgp = tx_vtep.bgp\n        tx_vtep_bgp.router_id = \"190.0.0.1\"\n        tx_vtep_bgp_iface = tx_vtep_bgp.ipv4_interfaces.v4interface(\n            ipv4_name=tx_l1.name\n        )[-1]\n        tx_vtep_bgp_peer = tx_vtep_bgp_iface.peers.v4peer(\n            name=\"bgp1\", peer_address=\"2.2.2.2\", as_type=\"ibgp\", as_number=101\n        )[-1]\n    \n        # Adding 1 Ethernet Segment per Bgp Peer\n        tx_vtep_es1 = tx_vtep_bgp_peer.evpn_ethernet_segments.ethernetsegment()[-1]\n    \n        # Adding 1 EVI on the Ethernet Segment\n        tx_es1_evisV4_1 = tx_vtep_es1.evis.evi_vxlan()[-1]\n        tx_es1_evisV4_1.route_distinguisher.auto_config_rd_ip_addr = True\n        tx_es1_evisV4_1.route_distinguisher.rd_type = (\n            tx_es1_evisV4_1.route_distinguisher.AS_2OCTET\n        )\n        tx_es1_evisV4_1.route_distinguisher.rd_value = \"100:1\"\n    \n        export_rt = tx_es1_evisV4_1.route_target_export.routetarget()[-1]\n        import_rt = tx_es1_evisV4_1.route_target_import.routetarget()[-1]\n        export_rt.rt_type = export_rt.AS_2OCTET\n        export_rt.rt_value = \"100:20\"\n    \n        import_rt.rt_type = import_rt.AS_2OCTET\n        import_rt.rt_value = \"100:20\"\n    \n        # Adding 1 Broadcast Domain per EVI\n        tx_es1_evisV4_1_bd_1 = tx_es1_evisV4_1.broadcast_domains.broadcastdomain()[\n            -1\n        ]\n    \n        # Adding 1 MAC Range Per Broadcast Domain\n        tx_es1_evisV4_1_bd_1_mac_Pool1 = (\n            tx_es1_evisV4_1_bd_1.cmac_ip_range.cmaciprange(l2vni=20)[-1]\n        )\n    \n        tx_es1_evisV4_1_bd_1_mac_Pool1.name = \"tx_mac_pool\"\n        tx_es1_evisV4_1_bd_1_mac_Pool1.mac_addresses.address = \"10:11:22:33:44:55\"\n    \n        # Adding 1 IP Range Per Broadcast Domain\n        tx_es1_evisV4_1_bd_1_mac_Pool1.ipv4_addresses.address = \"192.168.0.1\"\n    \n        # Create BGP EVPN on rx\n        rx_vtep = config.devices.device(name=\"rx_vtep\")[-1]\n        rx_vtep_bgp = rx_vtep.bgp\n        rx_vtep_bgp.router_id = \"191.0.0.1\"\n        rx_vtep_bgp_iface = rx_vtep_bgp.ipv4_interfaces.v4interface(\n            ipv4_name=rx_l1.name\n        )[-1]\n        rx_vtep_bgp_peer = rx_vtep_bgp_iface.peers.v4peer(\n            name=\"bgp2\", peer_address=\"1.1.1.1\", as_type=\"ibgp\", as_number=101\n        )[-1]\n    \n        # Adding 1 Ethernet Segment per Bgp Peer\n        rx_vtep_es1 = rx_vtep_bgp_peer.evpn_ethernet_segments.ethernetsegment()[-1]\n    \n        # Adding 1 EVI on the Ethernet Segment\n        rx_es1_evisV4_1 = rx_vtep_es1.evis.evi_vxlan()[-1]\n    \n        rx_es1_evisV4_1.route_distinguisher.rd_type = (\n            rx_es1_evisV4_1.route_distinguisher.AS_2OCTET\n        )\n        rx_es1_evisV4_1.route_distinguisher.rd_value = \"1000:1\"\n    \n        export_rt = rx_es1_evisV4_1.route_target_export.routetarget()[-1]\n        import_rt = rx_es1_evisV4_1.route_target_import.routetarget()[-1]\n        export_rt.rt_type = export_rt.AS_2OCTET\n        export_rt.rt_value = \"100:20\"\n    \n        import_rt.rt_type = import_rt.AS_2OCTET\n        import_rt.rt_value = \"100:20\"\n    \n        # Adding 1 Broadcast Domain per EVI\n        rx_es1_evisV4_1_bd_1 = rx_es1_evisV4_1.broadcast_domains.broadcastdomain()[\n            -1\n        ]\n    \n        # Adding 1 MAC Range Per Broadcast Domain\n        rx_es1_evisV4_1_bd_1_mac_Pool1 = (\n            rx_es1_evisV4_1_bd_1.cmac_ip_range.cmaciprange(l2vni=20)[-1]\n        )\n        rx_es1_evisV4_1_bd_1_mac_Pool1.name = \"rx_mac_pool\"\n        rx_es1_evisV4_1_bd_1_mac_Pool1.mac_addresses.address = \"10:11:22:33:44:77\"\n    \n        # Adding 1 IP Range Per Broadcast Domain\n        rx_es1_evisV4_1_bd_1_mac_Pool1.ipv4_addresses.address = \"192.168.1.2\"\n    \n        f1 = config.flows.flow(name=\"f1\")[-1]\n        f1.tx_rx.device.tx_names = [tx_es1_evisV4_1_bd_1_mac_Pool1.name]\n        f1.tx_rx.device.rx_names = [rx_es1_evisV4_1_bd_1_mac_Pool1.name]\n    \n        f1.duration.fixed_packets.packets = 1000\n    \n        f1.size.fixed = 1500\n        f1.metrics.enable = True\n        f1.metrics.loss = True\n    \n>       utils.start_traffic(api, config)\n\ntests/bgp_evpn/test_bgp_evpn.py:168: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/common.py:155: in start_traffic\n    res = api.set_control_state(cs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fda9c75b4c0>\npayload = <snappi.snappi.ControlState object at 0x7fda99cf1530>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    event_state = request_payload.state\n                    with Timer(self, \"Setting route state\"):\n                        event_names = self.ngpf.set_route_state(request_payload)\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n                self.traffic_item.transmit(request_payload)\n            elif control_option is not None:\n                msg = \"{} is not a supported choice for metrics; \\\n                the supported choices are \\\n                ['port', 'protocol', traffic]\".format(\n                    control_option\n                )\n                raise SnappiIxnException(400, msg)\n            self._event_info = EventInfo(event_type, event_state, event_names)\n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 450, in set_control_state\nE               self.traffic_item.transmit(request_payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1341, in transmit\nE               if (device.rocev2) and request.state == \"stop\":\nE            'Device' object has no attribute 'rocev2'\n\nsnappi_ixnetwork/snappi_api.py:460: SnappiIxnException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 0.012s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 5.482s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 0.199s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.097s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location connect [p1, p2] 23.008s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location state check [p1, p2] 0.308s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 24.551s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.105s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 0.558s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Create IxNetwork device config : 0.001s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Push IxNetwork device config : 2.102s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 2.753s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows configuration 2.246s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Start interfaces 1.968s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 IxNet - Please Start BGP on selected Tx ports before trying to generate BGP EVPN traffic.","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows generate/apply 6.208s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows clear statistics 10.020s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures start 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":23,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp_evpn.test_bgp_evpn"},{"name":"package","value":"bgp_evpn.test_bgp_evpn"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":62,"unknown":0,"total":64},"items":[{"uid":"83206e6996a54fcd","status":"passed","time":{"start":1743003871353,"stop":1743003961302,"duration":89949}},{"uid":"e5e745104ed6c69d","status":"passed","time":{"start":1742996899832,"stop":1742997002669,"duration":102837}},{"uid":"2954724b7f37c86a","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\n    self.ngpf.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\n    self._configure_topology()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\n    self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\n 'Config' object has no attribute 'stateful_flows'","time":{"start":1742993864845,"stop":1742993877303,"duration":12458}},{"uid":"e90ce1998f6c18c8","status":"passed","time":{"start":1742381702821,"stop":1742381807363,"duration":104542}},{"uid":"6ee17a6b6bea94d0","status":"passed","time":{"start":1742374910714,"stop":1742375015370,"duration":104656}},{"uid":"57f513bdad7ed390","status":"passed","time":{"start":1742299164935,"stop":1742299281991,"duration":117056}},{"uid":"923f41c2c9a78cb7","status":"passed","time":{"start":1741799882568,"stop":1741799974861,"duration":92293}},{"uid":"74bd63d351e19ba1","status":"passed","time":{"start":1741788649556,"stop":1741788750567,"duration":101011}},{"uid":"be1e1b8c0e25c3cd","status":"passed","time":{"start":1741764418062,"stop":1741764518751,"duration":100689}},{"uid":"addf0c847472edcd","status":"passed","time":{"start":1741757585447,"stop":1741757685672,"duration":100225}},{"uid":"5eebbb47d5ec6750","status":"passed","time":{"start":1741690639312,"stop":1741690736800,"duration":97488}},{"uid":"2f17a3834bf0bfb9","status":"passed","time":{"start":1741682454375,"stop":1741682552141,"duration":97766}},{"uid":"c42848a2fb90b80e","status":"passed","time":{"start":1741584950599,"stop":1741585050199,"duration":99600}},{"uid":"41a0b3295bcd7567","status":"passed","time":{"start":1741547140558,"stop":1741547243252,"duration":102694}},{"uid":"ed9abf72244436c4","status":"passed","time":{"start":1741459053851,"stop":1741459159486,"duration":105635}},{"uid":"3410190ed6931894","status":"passed","time":{"start":1741451329877,"stop":1741451434385,"duration":104508}},{"uid":"a1cbbed3b15c006e","status":"passed","time":{"start":1741375664779,"stop":1741375764280,"duration":99501}},{"uid":"71c37c919ff149f3","status":"passed","time":{"start":1741368681952,"stop":1741368780469,"duration":98517}},{"uid":"4bc81a25686a1328","status":"passed","time":{"start":1741353394880,"stop":1741353496626,"duration":101746}},{"uid":"6f7d5f17659579e6","status":"passed","time":{"start":1741346675485,"stop":1741346773752,"duration":98267}}]},"tags":[]},"source":"861d377e7d161a7c.json","parameterValues":[]}
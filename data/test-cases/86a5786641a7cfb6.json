{"uid":"86a5786641a7cfb6","name":"test_multiple_ips_on_ethernet","historyId":"pytest:bgp.test_validate_bgp#test_multiple_ips_on_ethernet","time":{"start":1742993864845,"stop":1742993870262,"duration":5417},"status":"failed","statusMessage":"assert False is True","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe640c9a0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:363: in config_ixnetwork\n    self.ngpf.config()\nsnappi_ixnetwork/device/ngpf.py:69: in config\n    self._configure_topology()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.device.ngpf.Ngpf object at 0x7fdbe3e23b50>\n\n    def _configure_topology(self):\n        self.stop_topology()\n        self.api._remove(self.api._topology, [])\n        ixn_topos = self.create_node(self._ixn_config, \"topology\")\n        # Configured all interfaces\n        self._configure_device_group(ixn_topos)\n    \n        # Configure all MACsec interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._macsec.config(device)\n    \n        # We need to configure all interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._bgp.config(device)\n    \n        #Configure all RoCEv2 interface before configure protocols\n        for device in self.api.snappi_config.devices:\n>           self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE           AttributeError: 'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/device/ngpf.py:125: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nb2b_raw_config = <snappi.snappi.Config object at 0x7fdbe640c9a0>\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\n\n    def test_multiple_ips_on_ethernet(b2b_raw_config, api):\n        \"\"\"Validate Multiple IPv4 or IPv6 configured on top of single Etherent\"\"\"\n        b2b_raw_config.flows.clear()\n    \n        p1, p2 = b2b_raw_config.ports\n        d1, d2 = b2b_raw_config.devices.device(name=\"tx_bgp\").device(name=\"rx_bgp\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:00:00:11\", \"00:00:00:00:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        ip3, ip4 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        bgp1, bgp2 = d1.bgp, d2.bgp\n    \n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n        ip3.name, ip4.name = \"ip3\", \"ip4\"\n        bgp1.router_id, bgp2.router_id = \"192.0.0.1\", \"192.0.0.2\"\n        bgp1_int, bgp2_int = bgp1.ipv4_interfaces.add(), bgp2.ipv4_interfaces.add()\n        bgp1_int.ipv4_name, bgp2_int.ipv4_name = ip1.name, ip2.name\n        bgp1_peer, bgp2_peer = bgp1_int.peers.add(), bgp2_int.peers.add()\n        bgp1_peer.name, bgp2_peer.name = \"bgp1\", \"bpg2\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n        ip1.prefix = 24\n    \n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n        ip2.prefix = 24\n    \n        ip3.address = \"20.1.1.1\"\n        ip3.gateway = \"20.1.1.2\"\n        ip3.prefix = 24\n    \n        ip4.address = \"20.1.1.2\"\n        ip4.gateway = \"20.1.1.1\"\n        ip4.prefix = 24\n    \n        bgp1_peer.peer_address = \"10.1.1.2\"\n        bgp1_peer.as_type = \"ibgp\"\n        bgp1_peer.as_number = 10\n    \n        bgp2_peer.peer_address = \"10.1.1.1\"\n        bgp2_peer.as_type = \"ibgp\"\n        bgp2_peer.as_number = 10\n        try:\n>           api.set_config(b2b_raw_config)\n\ntests/bgp/test_validate_bgp.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe640c9a0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\nE               self.ngpf.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\nE               self._configure_topology()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\nE               self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE            'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException\n\nDuring handling of the above exception, another exception occurred:\n\nb2b_raw_config = <snappi.snappi.Config object at 0x7fdbe640c9a0>\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\n\n    def test_multiple_ips_on_ethernet(b2b_raw_config, api):\n        \"\"\"Validate Multiple IPv4 or IPv6 configured on top of single Etherent\"\"\"\n        b2b_raw_config.flows.clear()\n    \n        p1, p2 = b2b_raw_config.ports\n        d1, d2 = b2b_raw_config.devices.device(name=\"tx_bgp\").device(name=\"rx_bgp\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:00:00:11\", \"00:00:00:00:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        ip3, ip4 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        bgp1, bgp2 = d1.bgp, d2.bgp\n    \n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n        ip3.name, ip4.name = \"ip3\", \"ip4\"\n        bgp1.router_id, bgp2.router_id = \"192.0.0.1\", \"192.0.0.2\"\n        bgp1_int, bgp2_int = bgp1.ipv4_interfaces.add(), bgp2.ipv4_interfaces.add()\n        bgp1_int.ipv4_name, bgp2_int.ipv4_name = ip1.name, ip2.name\n        bgp1_peer, bgp2_peer = bgp1_int.peers.add(), bgp2_int.peers.add()\n        bgp1_peer.name, bgp2_peer.name = \"bgp1\", \"bpg2\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n        ip1.prefix = 24\n    \n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n        ip2.prefix = 24\n    \n        ip3.address = \"20.1.1.1\"\n        ip3.gateway = \"20.1.1.2\"\n        ip3.prefix = 24\n    \n        ip4.address = \"20.1.1.2\"\n        ip4.gateway = \"20.1.1.1\"\n        ip4.prefix = 24\n    \n        bgp1_peer.peer_address = \"10.1.1.2\"\n        bgp1_peer.as_type = \"ibgp\"\n        bgp1_peer.as_number = 10\n    \n        bgp2_peer.peer_address = \"10.1.1.1\"\n        bgp2_peer.as_type = \"ibgp\"\n        bgp2_peer.as_number = 10\n        try:\n            api.set_config(b2b_raw_config)\n        except Exception as e:\n            print(str(e))\n            result = \"Multiple IP ip1 on top of name Ethernet\" in str(e)\n>           assert result is True\nE           assert False is True\n\ntests/bgp/test_validate_bgp.py:51: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 0.002s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 0.289s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 1.443s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.091s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Speed change not require due to redundant Layer1 config","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.004s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 0.669s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 1.699s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.087s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 0.267s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 0.377s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":13,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp.test_validate_bgp"},{"name":"package","value":"bgp.test_validate_bgp"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":60,"unknown":0,"total":61},"items":[{"uid":"2fc5954dd9fac1f8","status":"passed","time":{"start":1742381702821,"stop":1742381709303,"duration":6482}},{"uid":"d95d670588852850","status":"passed","time":{"start":1742374910714,"stop":1742374917639,"duration":6925}},{"uid":"6eaea72673c95606","status":"passed","time":{"start":1742299164935,"stop":1742299172473,"duration":7538}},{"uid":"75b13a4e7fde9475","status":"passed","time":{"start":1741799882568,"stop":1741799889078,"duration":6510}},{"uid":"ee331e9f81e73c6","status":"passed","time":{"start":1741788649556,"stop":1741788658940,"duration":9384}},{"uid":"2ed88bcad783c7fd","status":"passed","time":{"start":1741764418062,"stop":1741764424542,"duration":6480}},{"uid":"bcd4344c1bcc5b16","status":"passed","time":{"start":1741757585447,"stop":1741757592488,"duration":7041}},{"uid":"23b3a10a0ab16a1b","status":"passed","time":{"start":1741690639312,"stop":1741690645759,"duration":6447}},{"uid":"414bbdead73663d5","status":"passed","time":{"start":1741682454375,"stop":1741682461382,"duration":7007}},{"uid":"76bf2bf9011f7c7e","status":"passed","time":{"start":1741584950599,"stop":1741584966756,"duration":16157}},{"uid":"d0020e6d93aa56fc","status":"passed","time":{"start":1741547140558,"stop":1741547153592,"duration":13034}},{"uid":"a8178207b5eb7e61","status":"passed","time":{"start":1741459053851,"stop":1741459067867,"duration":14016}},{"uid":"411f24a98adf0090","status":"passed","time":{"start":1741451329877,"stop":1741451342396,"duration":12519}},{"uid":"d21d3f4876b08d2b","status":"passed","time":{"start":1741375664779,"stop":1741375677960,"duration":13181}},{"uid":"554acbecb13cf594","status":"passed","time":{"start":1741368681952,"stop":1741368695523,"duration":13571}},{"uid":"22b66179f06857a8","status":"passed","time":{"start":1741353394880,"stop":1741353407837,"duration":12957}},{"uid":"52592aa6ab1e4edf","status":"passed","time":{"start":1741346675485,"stop":1741346687968,"duration":12483}},{"uid":"2e61337d8014fe1","status":"passed","time":{"start":1741066144231,"stop":1741066158792,"duration":14561}},{"uid":"a52887a520493b20","status":"passed","time":{"start":1741017342205,"stop":1741017355212,"duration":13007}},{"uid":"dfb2645dfe09cfc9","status":"passed","time":{"start":1741010585345,"stop":1741010608507,"duration":23162}}]},"tags":[]},"source":"86a5786641a7cfb6.json","parameterValues":[]}
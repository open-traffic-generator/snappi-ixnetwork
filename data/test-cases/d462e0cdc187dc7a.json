{"uid":"d462e0cdc187dc7a","name":"test_combined_filters","historyId":"pytest:capture.test_combined_capture_filters#test_combined_filters","time":{"start":1747630008909,"stop":1747630019848,"duration":10939},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 278, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self.vport.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 162, in config\n    self._set_location()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 368, in _set_location\n    self._api._vport.ConnectPorts()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/vport/vport.py\", line 1304, in ConnectPorts\n    return self._execute(\"connectPorts\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  Port is in use by other user.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f2e98857a00>\nconfig = <snappi.snappi.Config object at 0x7f2e98352c50>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self.vport.config()\nsnappi_ixnetwork/vport.py:162: in config\n    self._set_location()\nsnappi_ixnetwork/vport.py:368: in _set_location\n    self._api._vport.ConnectPorts()\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/vport/vport.py:1304: in ConnectPorts\n    return self._execute(\"connectPorts\", payload=payload, response_object=None)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py:452: in _execute\n    response = self._connection._execute(url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:293: in _execute\n    return self._send_recv(\"POST\", url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:576: in _send_recv\n    return self._poll()\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:644: in _poll\n    return self._process_response_status_code(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f2e987eeef0>\nurl = None\nheaders = {'Connection': 'keep-alive', 'Content-Type': 'application/json', 'User-Agent': 'ixnetwork-restpy', 'X-Api-Key': '72b147e77ad34d9b95881a58620960f6', ...}\nresponse = <Response [400]>\nasync_status = {'executionTimeMs': 0.0, 'id': '', 'message': None, 'progress': 100, ...}\n\n    def _process_response_status_code(self, url, headers, response, async_status=False):\n        errors = []\n        # add the initial error\n        if async_status is True:\n            async_status = response.json()\n            if (\n                \"message\" in async_status\n                and async_status[\"message\"] is not None\n                and \"API CONTENTION\" in async_status[\"message\"]\n            ):\n                response.status_code = 409\n            else:\n                response.status_code = 400\n            error = \"\"\n            if \"message\" in async_status and async_status[\"message\"] is not None:\n                error += \" \" + async_status[\"message\"]\n            if \"result\" in async_status and async_status[\"result\"] is not None:\n                error += \" \" + async_status[\"result\"]\n            errors.append(error)\n        else:\n            try:\n                for error in response.json()[\"errors\"]:\n                    errors.append(error[\"detail\"])\n            except:\n                errors.append(response.text)\n        # add any /globals/appErrors/error items\n        try:\n            preamble = url[\n                0 : url.find(\"/\", url.find(\"/sessions/\") + len(\"/sessions/\"))\n            ]\n            url = preamble + \"/ixnetwork/globals/appErrors/error\"\n            self._print_request(\"GET\", url)\n            error_response = self._session.request(\n                \"GET\",\n                url,\n                headers=headers,\n                verify=self._verify_cert,\n                allow_redirects=False,\n            )\n            server_info = \"\\tCurrent Server Errors/Warnings:\"\n            for error in error_response.json():\n                if error[\"errorLevel\"] in [\"kError\", \"kWarning\"]:\n                    if server_info is not None:\n                        errors.append(server_info)\n                        server_info = None\n                    errors.append(\n                        \"\\t%s [%s] [%s] %s\"\n                        % (\n                            error[\"lastModified\"],\n                            error[\"errorLevel\"][1:].upper(),\n                            error[\"name\"],\n                            error[\"description\"],\n                        )\n                    )\n        except:\n            pass\n        # raise the appropriate error\n        message = \"\\n\".join(errors)\n        logging.getLogger(__name__).debug(message)\n        if response.status_code == 400:\n>           raise BadRequestError(message, response.status_code)\nE           ixnetwork_restpy.errors.BadRequestError:  Port is in use by other user.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:480: BadRequestError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f2e98857a00>\nsettings = <utils.common.Settings object at 0x7f2e98cb1cc0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_combined_filters(api, settings, utils):\n        \"\"\"\n        This test applies ethernet and vlan capture filters and verifies correct capture results\n        \"\"\"\n        packets = 4\n        config = api.config()\n        p1, p2 = config.ports.port(\n            name=\"p1\", location=utils.settings.ports[0]\n        ).port(name=\"p2\", location=utils.settings.ports[1])\n        cap = config.captures.capture(name=\"capture1\")[-1]\n        cap.port_names = [p2.name]\n        cap.format = cap.PCAPNG\n        cap.overwrite = False\n        eth_filter, vlan_filter = cap.filters.ethernet().vlan()\n    \n        eth_filter.src.value = \"0000ff000000\"\n        eth_filter.src.mask = \"000000000000\"\n        eth_filter.src.negate = False\n        eth_filter.dst.value = \"000806020000\"\n        eth_filter.dst.mask = \"000000000000\"\n        eth_filter.dst.negate = False\n    \n        vlan_filter.id.value = \"0006\"\n        vlan_filter.id.mask = \"F000\"\n        vlan_filter.id.negate = False\n        vlan_filter.priority.value = \"07\"\n        vlan_filter.priority.mask = \"07\"\n        vlan_filter.priority.negate = True\n    \n        (f1,) = config.flows.flow(name=\"f1\")\n        f1.tx_rx.port.tx_name = p1.name\n        f1.tx_rx.port.rx_name = p2.name\n        f1.metrics.enable = True\n        f1.size.fixed = 128\n        f1.rate.pps = 1000\n        f1.duration.fixed_packets.packets = 4\n        eth, vlan = f1.packet.ethernet().vlan()\n        eth.src.values = [\n            \"00:00:ff:00:00:00\",\n            \"00:00:ff:00:00:00\",\n            \"00:00:11:00:00:00\",\n            \"00:00:ff:00:00:00\",\n        ]\n        eth.dst.values = [\n            \"00:00:07:08:00:00\",\n            \"00:00:44:00:00:00\",\n            \"00:00:09:00:00:00\",\n            \"00:08:06:02:00:00\",\n        ]\n        vlan.priority.values = [1, 2, 3, 7]\n        vlan.cfi.values = [0, 1, 0, 1]\n        vlan.id.values = [5, 3, 1, 6]\n    \n>       utils.start_traffic(api, config, start_capture=True)\n\ntests/capture/test_combined_capture_filters.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/common.py:126: in start_traffic\n    api.set_config(cfg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f2e98857a00>\nconfig = <snappi.snappi.Config object at 0x7f2e98352c50>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 278, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self.vport.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 162, in config\nE               self._set_location()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 368, in _set_location\nE               self._api._vport.ConnectPorts()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/vport/vport.py\", line 1304, in ConnectPorts\nE               return self._execute(\"connectPorts\", payload=payload, response_object=None)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\nE               response = self._connection._execute(url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\nE               return self._send_recv(\"POST\", url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\nE               return self._poll()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\nE               return self._process_response_status_code(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\nE               raise BadRequestError(message, response.status_code)\nE             Port is in use by other user.\n\nsnappi_ixnetwork/snappi_api.py:319: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Config validation 0.004s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Ports configuration 6.780s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Captures configuration 0.892s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.094s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location connect [p1, p2] 1.614s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location state check [p1, p2] 0.201s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location configuration 2.501s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":10,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"capture.test_combined_capture_filters"},{"name":"package","value":"capture.test_combined_capture_filters"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":1,"passed":128,"unknown":0,"total":136},"items":[{"uid":"5b0f74e9636887eb","status":"passed","time":{"start":1747569528196,"stop":1747569754964,"duration":226768}},{"uid":"53d0a96228d12036","status":"passed","time":{"start":1747562220875,"stop":1747562442881,"duration":222006}},{"uid":"d7d2eb1b29f90cef","status":"passed","time":{"start":1747375343037,"stop":1747375571916,"duration":228879}},{"uid":"8997508aa2a4b9fd","status":"passed","time":{"start":1747353950744,"stop":1747354177813,"duration":227069}},{"uid":"17cec944f83060ad","status":"passed","time":{"start":1747341697732,"stop":1747341924236,"duration":226504}},{"uid":"4ae0cc40e5954290","status":"passed","time":{"start":1747280280743,"stop":1747280506494,"duration":225751}},{"uid":"d5d9ddb9b9221ef7","status":"passed","time":{"start":1747215978584,"stop":1747216208523,"duration":229939}},{"uid":"36b96d38cfbf1ec1","status":"passed","time":{"start":1747208911545,"stop":1747209132895,"duration":221350}},{"uid":"93f9cd1f56b56021","status":"passed","time":{"start":1747130463794,"stop":1747130688669,"duration":224875}},{"uid":"33ce5486a25cf673","status":"passed","time":{"start":1747123483901,"stop":1747123706716,"duration":222815}},{"uid":"1d78d6974e48c8be","status":"passed","time":{"start":1747017408213,"stop":1747017638381,"duration":230168}},{"uid":"af6440cac27ae0e7","status":"passed","time":{"start":1747008149336,"stop":1747008379676,"duration":230340}},{"uid":"5f8eebe10d1f970d","status":"passed","time":{"start":1747000959729,"stop":1747001184532,"duration":224803}},{"uid":"6d7bc010cdda57b4","status":"passed","time":{"start":1746646967556,"stop":1746647188963,"duration":221407}},{"uid":"9a5ec6f01c0208eb","status":"passed","time":{"start":1746534161940,"stop":1746534389080,"duration":227140}},{"uid":"2a34906766fd81fc","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 360, in config_ixnetwork\n    self.vport.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 162, in config\n    self._set_location()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 368, in _set_location\n    self._api._vport.ConnectPorts()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/vport/vport.py\", line 1304, in ConnectPorts\n    return self._execute(\"connectPorts\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 289, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 572, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 640, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 476, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  Port is in use by other user.","time":{"start":1746512584420,"stop":1746512596801,"duration":12381}},{"uid":"7d9756743a9d9a23","status":"passed","time":{"start":1746463364453,"stop":1746463587124,"duration":222671}},{"uid":"bd7f4fa739fc9900","status":"passed","time":{"start":1746454829753,"stop":1746455054158,"duration":224405}},{"uid":"6111dba31a9fa03f","status":"passed","time":{"start":1746433188387,"stop":1746433418588,"duration":230201}},{"uid":"ed43825e9252000c","status":"passed","time":{"start":1746421868637,"stop":1746422094215,"duration":225578}}]},"tags":[]},"source":"d462e0cdc187dc7a.json","parameterValues":[]}
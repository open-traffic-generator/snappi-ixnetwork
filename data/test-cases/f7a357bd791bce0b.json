{"uid":"f7a357bd791bce0b","name":"test_compact","historyId":"pytest:test_compact#test_compact","time":{"start":1756228444993,"stop":1756228516998,"duration":72005},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 473, in set_control_state\n    self.traffic_item.transmit(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1531, in transmit\n    self._api._traffic.Apply()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/traffic/traffic.py\", line 1415, in Apply\n    return self._execute(\"apply\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  Error in L2/L3 Traffic Apply","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f9f2447d990>\npayload = <snappi.snappi.ControlState object at 0x7f9f215be020>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    event_state = request_payload.state\n                    with Timer(self, \"Setting route state\"):\n                        event_names = self.ngpf.set_route_state(\n                            request_payload\n                        )\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n>               self.traffic_item.transmit(request_payload)\n\nsnappi_ixnetwork/snappi_api.py:473: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/trafficitem.py:1531: in transmit\n    self._api._traffic.Apply()\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/traffic/traffic.py:1415: in Apply\n    return self._execute(\"apply\", payload=payload, response_object=None)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py:452: in _execute\n    response = self._connection._execute(url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:293: in _execute\n    return self._send_recv(\"POST\", url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:576: in _send_recv\n    return self._poll()\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:644: in _poll\n    return self._process_response_status_code(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f9f21b4d4e0>\nurl = None\nheaders = {'Connection': 'keep-alive', 'Content-Type': 'application/json', 'User-Agent': 'ixnetwork-restpy', 'X-Api-Key': '7ab454f63f15459cb958d22bcf9324e9', ...}\nresponse = <Response [400]>\nasync_status = {'executionTimeMs': 29.0, 'id': '', 'message': None, 'progress': 100, ...}\n\n    def _process_response_status_code(self, url, headers, response, async_status=False):\n        errors = []\n        # add the initial error\n        if async_status is True:\n            async_status = response.json()\n            if (\n                \"message\" in async_status\n                and async_status[\"message\"] is not None\n                and \"API CONTENTION\" in async_status[\"message\"]\n            ):\n                response.status_code = 409\n            else:\n                response.status_code = 400\n            error = \"\"\n            if \"message\" in async_status and async_status[\"message\"] is not None:\n                error += \" \" + async_status[\"message\"]\n            if \"result\" in async_status and async_status[\"result\"] is not None:\n                error += \" \" + async_status[\"result\"]\n            errors.append(error)\n        else:\n            try:\n                for error in response.json()[\"errors\"]:\n                    errors.append(error[\"detail\"])\n            except:\n                errors.append(response.text)\n        # add any /globals/appErrors/error items\n        try:\n            preamble = url[\n                0 : url.find(\"/\", url.find(\"/sessions/\") + len(\"/sessions/\"))\n            ]\n            url = preamble + \"/ixnetwork/globals/appErrors/error\"\n            self._print_request(\"GET\", url)\n            error_response = self._session.request(\n                \"GET\",\n                url,\n                headers=headers,\n                verify=self._verify_cert,\n                allow_redirects=False,\n            )\n            server_info = \"\\tCurrent Server Errors/Warnings:\"\n            for error in error_response.json():\n                if error[\"errorLevel\"] in [\"kError\", \"kWarning\"]:\n                    if server_info is not None:\n                        errors.append(server_info)\n                        server_info = None\n                    errors.append(\n                        \"\\t%s [%s] [%s] %s\"\n                        % (\n                            error[\"lastModified\"],\n                            error[\"errorLevel\"][1:].upper(),\n                            error[\"name\"],\n                            error[\"description\"],\n                        )\n                    )\n        except:\n            pass\n        # raise the appropriate error\n        message = \"\\n\".join(errors)\n        logging.getLogger(__name__).debug(message)\n        if response.status_code == 400:\n>           raise BadRequestError(message, response.status_code)\nE           ixnetwork_restpy.errors.BadRequestError:  Error in L2/L3 Traffic Apply\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:480: BadRequestError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f9f2447d990>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_compact(api, utils):\n        \"\"\"\n        1. Configure 1000 similar devices contain Ether>IPv4>BGPv4\n           route in two ports\n        2. Create three traffic each traffic with diff set of endpoints\n        3. Concrete class should compact the devices to IxNet DeviceGroup.\n        4. Validate all through RestPy\n        \"\"\"\n        SIZE = 1024\n        PACKETS = 1000\n    \n        config_values = dict()\n        num_of_devices = 1000\n        num_of_routes = 1000\n        config_values[\"d1_name\"] = \"Tx Device 1\"\n        config_values[\"d2_name\"] = \"Rx Device 1\"\n        config_values[\"d3_name\"] = \"Rx Device 3\"\n        config_values[\"Multiplier\"] = num_of_devices\n        rx_device_with_rr = 3\n    \n        config = api.config()\n        api.enable_scaling(True)\n    \n        tx_port, rx_port = config.ports.port(\n            name=\"Tx Port\", location=utils.settings.ports[0]\n        ).port(name=\"Rx Port\", location=utils.settings.ports[1])\n    \n        l1 = config.layer1.layer1()[0]\n        l1.name = \"l1\"\n        l1.port_names = [rx_port.name, tx_port.name]\n        l1.media = utils.settings.media\n        l1.speed = utils.settings.speed\n    \n        macs = get_macs(\"000000000011\", 2 * num_of_devices)\n    \n        config_values[\"tx_macs\"], config_values[\"rx_macs\"] = macs[::2], macs[1::2]\n        config_values[\"vlan_ids\"] = [str(i) for i in range(1, num_of_devices + 1)]\n    \n        ip_adds = get_ip_addresses(\"10.10.2.1\", 2 * num_of_devices)\n        ipv6_adds = get_ipv6_addrs(\"2001::1/64\", 2 * num_of_devices)\n    \n        config_values[\"tx_adds\"], config_values[\"rx_adds\"] = (\n            ip_adds[::2],\n            ip_adds[1::2],\n        )\n    \n        config_values[\"tx_ipv6_adds\"], config_values[\"rx_ipv6_adds\"] = (\n            ipv6_adds[::2],\n            ipv6_adds[1::2],\n        )\n        config_values[\"tx_rr_add1\"] = get_ip_addresses(\"200.1.0.0\", num_of_routes)\n        config_values[\"tx_rr_add2\"] = get_ip_addresses(\"201.1.0.0\", num_of_routes)\n        next_hop_addr = get_ip_addresses(\"4.4.4.1\", num_of_routes)\n    \n        config_values[\"rx_rr_add1\"] = \"210.1.0.0\"\n    \n        for i in range(1, num_of_devices + 1):\n            tx_device = config.devices.add()\n            tx_device.name = \"Tx Device {0}\".format(i)\n            tx_eth = tx_device.ethernets.add()\n            tx_eth.connection.port_name = tx_port.name\n            tx_eth.name = \"Tx eth {0}\".format(i)\n            tx_eth.mac = config_values[\"tx_macs\"][i - 1]\n            tx_vlan = tx_eth.vlans.vlan()[-1]\n            tx_vlan.name = \"Tx vlan {0}\".format(i)\n            tx_vlan.id = int(config_values[\"vlan_ids\"][i - 1])\n            tx_ip = tx_eth.ipv4_addresses.add()\n            tx_ip.name = \"Tx IP {0}\".format(i)\n            tx_ip.address = config_values[\"tx_adds\"][i - 1]\n            tx_ip.gateway = config_values[\"rx_adds\"][i - 1]\n            tx_ip.prefix = 24\n    \n            tx_ipv6 = tx_eth.ipv6_addresses.add()\n            tx_ipv6.name = \"Tx IP v6{0}\".format(i)\n            tx_ipv6.address = config_values[\"tx_ipv6_adds\"][i - 1]\n            tx_ipv6.gateway = config_values[\"rx_ipv6_adds\"][i - 1]\n            tx_ipv6.prefix = 64\n    \n            tx_bgp = tx_device.bgp\n            tx_bgp.router_id = config_values[\"tx_adds\"][i - 1]\n            tx_bgp_int = tx_bgp.ipv4_interfaces.add()\n            tx_bgp_int.ipv4_name = tx_ip.name\n            tx_peer = tx_bgp_int.peers.add()\n            tx_peer.name = \"BGP Peer {0}\".format(i)\n            tx_peer.as_type = \"ibgp\"\n            tx_peer.peer_address = config_values[\"rx_adds\"][i - 1]\n            tx_peer.as_number = 65200\n    \n            tx_rr = tx_peer.v4_routes.add(name=\"Tx RR {0}\".format(i))\n            tx_rr.addresses.add(\n                count=20, address=config_values[\"tx_rr_add1\"][i - 1], prefix=32\n            )\n            tx_rr.addresses.add(\n                count=10, address=config_values[\"tx_rr_add2\"][i - 1], prefix=24\n            )\n            tx_rr.next_hop_ipv4_address = next_hop_addr[i - 1]\n    \n        for i in range(1, num_of_devices + 1):\n            rx_device = config.devices.add()\n            rx_device.name = \"Rx Device {0}\".format(i)\n            rx_eth = rx_device.ethernets.add()\n            rx_eth.connection.port_name = rx_port.name\n            rx_eth.name = \"Rx eth {0}\".format(i)\n            rx_eth.mac = config_values[\"rx_macs\"][i - 1]\n            rx_vlan = rx_eth.vlans.vlan()[-1]\n            rx_vlan.name = \"Rx vlan {0}\".format(i)\n            rx_vlan.id = int(config_values[\"vlan_ids\"][i - 1])\n            rx_ip = rx_eth.ipv4_addresses.add()\n            rx_ip.name = \"Rx IP {0}\".format(i)\n            rx_ip.address = config_values[\"rx_adds\"][i - 1]\n            rx_ip.gateway = config_values[\"tx_adds\"][i - 1]\n            rx_ip.prefix = 24\n    \n            rx_ipv6 = rx_eth.ipv6_addresses.add()\n            rx_ipv6.name = \"Rx IP v6{0}\".format(i)\n            rx_ipv6.address = config_values[\"rx_ipv6_adds\"][i - 1]\n            rx_ipv6.gateway = config_values[\"tx_ipv6_adds\"][i - 1]\n            rx_ipv6.prefix = 64\n    \n            rx_bgp = rx_device.bgp\n            rx_bgp.router_id = config_values[\"rx_adds\"][i - 1]\n            rx_bgp_int = rx_bgp.ipv4_interfaces.add()\n            rx_bgp_int.ipv4_name = rx_ip.name\n            rx_peer = rx_bgp_int.peers.add()\n            rx_peer.name = \"Rx Bgp {0}\".format(i)\n            rx_peer.as_type = \"ibgp\"\n            rx_peer.peer_address = config_values[\"tx_adds\"][i - 1]\n            rx_peer.as_number = 65200\n    \n    \n            if i == rx_device_with_rr:\n                rx_rr = rx_peer.v4_routes.add(name=\"Rx RR {0}\".format(i))\n                rx_rr.addresses.add(\n                    count=1000,\n                    address=config_values[\"rx_rr_add1\"],\n                    prefix=32,\n                )\n    \n        config_values[\"f1_name\"] = \"f1\"\n        config_values[\"f2_name\"] = \"f2\"\n        config_values[\"f3_name\"] = \"f3\"\n        flow1, flow2, flow3 = (\n            config.flows.flow(name=config_values[\"f1_name\"])\n            .flow(name=config_values[\"f2_name\"])\n            .flow(name=config_values[\"f3_name\"])\n        )\n    \n        # Route Range as endpoints\n        flow1.tx_rx.device.tx_names = [\"Tx RR 2\", \"Tx RR 4\"]\n        flow1.tx_rx.device.rx_names = [\"Rx RR 3\"]\n        _, _, tcp = flow1.packet.ethernet().ipv4().tcp()\n        tcp.src_port.value = 555\n        tcp.dst_port.value = 666\n    \n        flow1.size.fixed = SIZE\n        flow1.duration.fixed_packets.packets = PACKETS\n    \n        flow1.metrics.enable = True\n        flow1.metrics.loss = True\n    \n        # Ethernet as endpoints\n        flow2.tx_rx.device.tx_names = [\"Tx eth 2\"]\n        flow2.tx_rx.device.rx_names = [\"Rx eth 2\"]\n    \n        flow2.size.fixed = SIZE\n        flow2.duration.fixed_packets.packets = PACKETS\n    \n        flow2.metrics.enable = True\n        flow2.metrics.loss = True\n    \n        # All Ipv4 as endpoints\n        flow3.tx_rx.device.tx_names = [\n            \"Tx IP {0}\".format(i) for i in range(1, num_of_devices + 1)\n        ]\n        flow3.tx_rx.device.rx_names = [\n            \"Rx IP {0}\".format(i) for i in range(1, num_of_devices + 1)\n        ]\n    \n        flow3.size.fixed = SIZE\n        flow3.duration.fixed_packets.packets = PACKETS\n    \n        flow3.metrics.enable = True\n        flow3.metrics.loss = True\n    \n        api.set_config(config)\n    \n        validate_compact_config(api, config_values, rx_device_with_rr)\n        print(\"Starting all protocols ...\")\n        # ps = api.protocol_state()\n        # ps.state = ps.START\n        # api.set_protocol_state(ps)\n    \n        cs = api.control_state()\n        cs.protocol.all.state = cs.protocol.all.START\n        api.set_control_state(cs)\n    \n        print(\"Starting transmit on all flows ...\")\n    \n        cs = api.control_state()\n        cs.traffic.flow_transmit.state = cs.traffic.flow_transmit.START\n>       api.set_control_state(cs)\n\ntests/test_compact.py:269: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f9f2447d990>\npayload = <snappi.snappi.ControlState object at 0x7f9f215be020>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    event_state = request_payload.state\n                    with Timer(self, \"Setting route state\"):\n                        event_names = self.ngpf.set_route_state(\n                            request_payload\n                        )\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n                self.traffic_item.transmit(request_payload)\n            elif control_option is not None:\n                msg = \"{} is not a supported choice for metrics; \\\n                the supported choices are \\\n                ['port', 'protocol', traffic]\".format(\n                    control_option\n                )\n                raise SnappiIxnException(400, msg)\n            self._event_info = EventInfo(event_type, event_state, event_names)\n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 473, in set_control_state\nE               self.traffic_item.transmit(request_payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1531, in transmit\nE               self._api._traffic.Apply()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/traffic/traffic.py\", line 1415, in Apply\nE               return self._execute(\"apply\", payload=payload, response_object=None)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\nE               response = self._connection._execute(url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\nE               return self._send_recv(\"POST\", url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\nE               return self._poll()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\nE               return self._process_response_status_code(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\nE               raise BadRequestError(message, response.status_code)\nE             Error in L2/L3 Traffic Apply\n\nsnappi_ixnetwork/snappi_api.py:483: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1518 Tx Port connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1518 Rx Port connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"test_compact"},{"name":"package","value":"test_compact"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":31,"broken":0,"skipped":0,"passed":177,"unknown":0,"total":208},"items":[{"uid":"a16e880149b4c766","status":"passed","time":{"start":1756153102547,"stop":1756153227624,"duration":125077}},{"uid":"f5a590b4f2499bad","status":"passed","time":{"start":1756145518681,"stop":1756145615044,"duration":96363}},{"uid":"e805a34bea0f1a57","status":"passed","time":{"start":1756135659955,"stop":1756135756705,"duration":96750}},{"uid":"519aef1a9cad07ab","status":"passed","time":{"start":1756112750540,"stop":1756112857624,"duration":107084}},{"uid":"7b3ed8a320de1927","status":"passed","time":{"start":1756097345515,"stop":1756097450027,"duration":104512}},{"uid":"edffa1032c7e9bea","status":"passed","time":{"start":1755853618770,"stop":1755853719220,"duration":100450}},{"uid":"d0bce58784c61ef3","status":"passed","time":{"start":1755770830114,"stop":1755770941387,"duration":111273}},{"uid":"65fae231716b7bd2","status":"passed","time":{"start":1755605594608,"stop":1755605709259,"duration":114651}},{"uid":"bd3ffe62298d65ec","status":"passed","time":{"start":1755598268759,"stop":1755598374163,"duration":105404}},{"uid":"698e715a2401d299","status":"passed","time":{"start":1755590656281,"stop":1755590773840,"duration":117559}},{"uid":"b355d4a31c365f97","status":"passed","time":{"start":1755582190551,"stop":1755582309454,"duration":118903}},{"uid":"5aafc293ff87b2ee","status":"passed","time":{"start":1755172446673,"stop":1755172562731,"duration":116058}},{"uid":"70aa6c3164a79aed","status":"passed","time":{"start":1755152544019,"stop":1755152645954,"duration":101935}},{"uid":"18e1babbf9768f6b","status":"passed","time":{"start":1754658965828,"stop":1754659074601,"duration":108773}},{"uid":"75650e9a6acf6419","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 467, in set_control_state\n    event_names = self.ngpf.set_route_state(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 325, in set_route_state\n    self.api._ixnetwork.Globals.Topology.ApplyOnTheFly()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/globals/topology/topology_678a8dc80c9b4b2b5c741072eab4305d.py\", line 1846, in ApplyOnTheFly\n    return self._execute(\"applyOnTheFly\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  Action ApplyChanges cannot be executed while other actions are in progress. Actions in progress: \nClear Stats Rx Bgp 1\n.","time":{"start":1754630978584,"stop":1754631081305,"duration":102721}},{"uid":"8589f3c9322d9d49","status":"passed","time":{"start":1754558943969,"stop":1754559050244,"duration":106275}},{"uid":"52d802bb8f123d98","status":"passed","time":{"start":1754546458930,"stop":1754546562347,"duration":103417}},{"uid":"4bf3474b679f677a","status":"passed","time":{"start":1754506043870,"stop":1754506147844,"duration":103974}},{"uid":"8fe64db420a121f2","status":"passed","time":{"start":1754497549774,"stop":1754497657835,"duration":108061}},{"uid":"819fbfcad6fb0df5","status":"passed","time":{"start":1754464142327,"stop":1754464266952,"duration":124625}}]},"tags":[]},"source":"f7a357bd791bce0b.json","parameterValues":[]}
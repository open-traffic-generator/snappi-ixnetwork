{"uid":"de42e72c3f5f4f52","name":"test_ipv4_fields","historyId":"pytest:ipv4.test_ipv4_fields#test_ipv4_fields","time":{"start":1753368506584,"stop":1753368506681,"duration":97},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b34e2520>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b3608580>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nb2b_raw_config_vports = <snappi.snappi.Config object at 0x7f21b34e2520>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\ntx_vport = <snappi.snappi.Port object at 0x7f21b34e2020>\nrx_vport = <snappi.snappi.Port object at 0x7f21b34e2de0>\n\n    def test_ipv4_fields(api, b2b_raw_config_vports, utils, tx_vport, rx_vport):\n        \"\"\"\n        Configure three raw raw IPv4 flows with ,\n        - fixed pattern for the fields\n          header len, total len, identification, reserved, don't fragment,\n          more fragment, fragment offset, time to live, protocol, header checksum\n        - list pattern for the fields\n          header len, total len, identification, reserved, don't fragment,\n          more fragment, fragment offset, time to live, protocol, header checksum\n        - counter pattern for the fields\n          header len, total len, identification, reserved, don't fragment,\n          more fragment, fragment offset, time to live, protocol, header checksum\n    \n        Validate,\n        - Fetch the IPv4 header config via restpy and validate\n          against expected\n        \"\"\"\n        # fixed\n        flow1 = b2b_raw_config_vports.flows[0]\n        src = \"00:0C:29:E3:53:EA\"\n        dst = \"00:0C:29:E3:53:F4\"\n    \n        src_ip = \"10.1.1.1\"\n        dst_ip = \"20.1.1.1\"\n    \n        flow1.packet.ethernet().ipv4()\n        eth = flow1.packet[0]\n        ipv4 = flow1.packet[1]\n        eth.src.value = src\n        eth.dst.value = dst\n        ipv4.src.value = src_ip\n        ipv4.dst.value = dst_ip\n        ipv4.header_length.value = 5\n        ipv4.total_length.value = 100\n        ipv4.identification.value = 1234\n        ipv4.reserved.value = 1\n        ipv4.dont_fragment.value = 1\n        ipv4.more_fragments.value = 1\n        ipv4.fragment_offset.value = 0\n        ipv4.time_to_live.value = 50\n        ipv4.protocol.value = 200\n    \n        # list\n        flow2 = b2b_raw_config_vports.flows.flow(name=\"f2\")[-1]\n        flow2.tx_rx.port.tx_name = tx_vport.name\n        flow2.tx_rx.port.rx_name = rx_vport.name\n        src = \"00:0C:29:E3:53:EA\"\n        dst = \"00:0C:29:E3:53:F4\"\n    \n        src_ip = \"10.1.1.1\"\n        dst_ip = \"20.1.1.1\"\n    \n        from random import Random\n    \n        r = Random()\n    \n        header_length = [r.randint(5, 15) for i in range(10)]\n        total_length = [r.randint(0, 65535) for i in range(10)]\n        identification = [r.randint(0, 65535) for i in range(10)]\n        reserved = [r.randint(0, 1) for i in range(10)]\n        dont_fragment = [r.randint(0, 1) for i in range(10)]\n        more_fragments = [r.randint(0, 1) for i in range(10)]\n        fragment_offset = [r.randint(0, 31) for i in range(10)]\n        time_to_live = [r.randint(0, 255) for i in range(10)]\n        protocol = [r.randint(0, 255) for i in range(10)]\n        flow2.packet.ethernet().ipv4()\n        eth = flow2.packet[0]\n        ipv4 = flow2.packet[1]\n        eth.src.value = src\n        eth.dst.value = dst\n        ipv4.src.value = src_ip\n        ipv4.dst.value = dst_ip\n        ipv4.header_length.values = header_length\n        ipv4.total_length.values = total_length\n        ipv4.identification.values = identification\n        ipv4.reserved.values = reserved\n        ipv4.dont_fragment.values = dont_fragment\n        ipv4.more_fragments.values = more_fragments\n        ipv4.fragment_offset.values = fragment_offset\n        ipv4.time_to_live.values = time_to_live\n        ipv4.protocol.values = protocol\n    \n        # counter\n        flow3 = b2b_raw_config_vports.flows.flow(name=\"f3\")[-1]\n        flow3.tx_rx.port.tx_name = tx_vport.name\n        flow3.tx_rx.port.rx_name = rx_vport.name\n        fields = [\n            \"header_length\",\n            \"total_length\",\n            \"identification\",\n            # \"reserved\",\n            # \"dont_fragment\",\n            # \"more_fragments\",\n            \"fragment_offset\",\n            \"time_to_live\",\n            \"protocol\",\n        ]\n        start = [5, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        step = [1, 2, 1000, 1, 1, 1, 10, 10, 1, 10]\n        count = [11, 10000, 65, 10, 10, 10, 1000, 10000, 1000, 1000]\n    \n        flow3.packet.ethernet().ipv4()\n        eth = flow3.packet[0]\n        ipv4 = flow3.packet[-1]\n        eth.src.value = \"ab:ab:ab:ab:bc:bc\"\n        eth.dst.value = \"bc:bc:bc:bc:ab:ab\"\n        ipv4.src.value = \"10.1.1.1\"\n        ipv4.dst.value = \"10.1.1.2\"\n        for i, field in enumerate(fields):\n            f_obj = getattr(ipv4, field)\n            f_obj.increment.start = start[i]\n            f_obj.increment.step = step[i]\n            f_obj.increment.count = count[i]\n    \n>       api.set_config(b2b_raw_config_vports)\n\ntests/ipv4/test_ipv4_fields.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b34e2520>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"ipv4.test_ipv4_fields"},{"name":"package","value":"ipv4.test_ipv4_fields"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":172,"unknown":0,"total":177},"items":[{"uid":"a771005f2d063a20","status":"passed","time":{"start":1752836398951,"stop":1752836408956,"duration":10005}},{"uid":"fce981c830efb139","status":"passed","time":{"start":1752760243902,"stop":1752760255023,"duration":11121}},{"uid":"bf61ff234a4f80e3","status":"passed","time":{"start":1752244885705,"stop":1752244895555,"duration":9850}},{"uid":"3e05c99884877e5e","status":"passed","time":{"start":1752145840252,"stop":1752145850249,"duration":9997}},{"uid":"2e93efd57eec627b","status":"passed","time":{"start":1751479010972,"stop":1751479023233,"duration":12261}},{"uid":"c585130752c23a39","status":"passed","time":{"start":1751472402834,"stop":1751472412511,"duration":9677}},{"uid":"d8ae95d0a4da962e","status":"passed","time":{"start":1751283215057,"stop":1751283224885,"duration":9828}},{"uid":"5c57625f8b65bc7a","status":"passed","time":{"start":1751276144532,"stop":1751276154128,"duration":9596}},{"uid":"689810ee8cec004d","status":"passed","time":{"start":1751231642336,"stop":1751231652135,"duration":9799}},{"uid":"23f6822db46a8ab1","status":"passed","time":{"start":1750985352305,"stop":1750985361653,"duration":9348}},{"uid":"729ec58e2f58726d","status":"passed","time":{"start":1750836697285,"stop":1750836710208,"duration":12923}},{"uid":"a5177d6d904cfc30","status":"passed","time":{"start":1750656827226,"stop":1750656836621,"duration":9395}},{"uid":"64f5d6b52018bfe9","status":"passed","time":{"start":1750246239210,"stop":1750246248693,"duration":9483}},{"uid":"59b4acc4475560cb","status":"passed","time":{"start":1750239203710,"stop":1750239213422,"duration":9712}},{"uid":"a718eb397f07e860","status":"passed","time":{"start":1749770085540,"stop":1749770095216,"duration":9676}},{"uid":"641b7215caaad99e","status":"passed","time":{"start":1749546564693,"stop":1749546574568,"duration":9875}},{"uid":"9ae54ed31c566621","status":"passed","time":{"start":1748968328989,"stop":1748968338737,"duration":9748}},{"uid":"c34b7fd225456ba","status":"passed","time":{"start":1748929822995,"stop":1748929836042,"duration":13047}},{"uid":"24d57918e57e4e03","status":"passed","time":{"start":1748864245704,"stop":1748864255781,"duration":10077}},{"uid":"3725a6ccb76e696e","status":"passed","time":{"start":1748857106711,"stop":1748857116331,"duration":9620}}]},"tags":[]},"source":"de42e72c3f5f4f52.json","parameterValues":[]}
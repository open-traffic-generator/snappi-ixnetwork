{"uid":"981cb13359466766","name":"test_vxlan_fields","historyId":"pytest:vxlan.test_vxlan_fields#test_vxlan_fields","time":{"start":1744642070405,"stop":1744642078629,"duration":8224},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\n    for snappi_eotr in config.egress_only_trackings:\n 'Config' object has no attribute 'egress_only_trackings'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nconfig = <snappi.snappi.Config object at 0x7fbfb12393a0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:364: in config_ixnetwork\n    self.traffic_item.config()\nsnappi_ixnetwork/trafficitem.py:867: in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\nsnappi_ixnetwork/trafficitem.py:534: in get_ixn_config\n    tr = self.create_traffic(config)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7fbfb5e2caf0>\nconfig = <snappi.snappi.Config object at 0x7fbfb12393a0>\n\n    def create_traffic(self, config):\n        self.logger.debug(\"Creating Traffic\")\n        flows = config.flows\n        tr = {\"xpath\": \"/traffic\", \"trafficItem\": []}\n        ports = self.get_ports_encap(config)\n        devices = self.get_device_info(config)\n        for index, flow in enumerate(flows):\n            flow_name = flow._properties.get(\"name\")\n            self.logger.debug(\"Creating Traffic Item %s\" % flow_name)\n            if flow_name is None:\n                raise Exception(\"name shall not be null for flows\")\n            if flow._properties.get(\"tx_rx\") is None:\n                msg = (\n                    \"Please configure the flow endpoint\"\n                    \"for flow indexed at %s\" % index\n                )\n                raise Exception(msg)\n            self._endpoint_validation(flow)\n            if flow.tx_rx.choice is None:\n                msg = \"Flow endpoint needs to be either port or device\"\n                raise Exception(msg)\n    \n            tr_xpath = \"/traffic/trafficItem[%d]\" % self.traffic_index\n            tr[\"trafficItem\"].append(\n                {\n                    \"xpath\": tr_xpath,\n                    \"name\": \"%s\" % flow.name,\n                    \"srcDestMesh\": self._get_mesh_type(flow),\n                }\n            )\n    \n            tr[\"trafficItem\"][-1][\"endpointSet\"] = [\n                {\n                    \"xpath\": tr[\"trafficItem\"][-1][\"xpath\"]\n                    + \"/endpointSet[1]\",\n                }\n            ]\n            if flow.tx_rx.choice == \"port\":\n                tr_type = \"raw\"\n                ep = getattr(flow.tx_rx, \"port\")\n                tx_objs = [\"%s/protocols\" % ports.get(ep.tx_name)]\n                rx_objs = [\"%s/protocols\" % ports.get(ep.rx_name)]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = [\n                    o for o in tx_objs\n                ]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"destinations\"] = [\n                    o for o in rx_objs\n                ]\n            else:\n                ep = getattr(flow.tx_rx, \"device\")\n                tr_type = devices[ep.tx_names[0]][\"type\"]\n                source = []\n                destinations = []\n                scalable_sources = []\n                scalable_destinations = []\n                self._gen_dev_endpoint(\n                    devices, ep.tx_names, source, scalable_sources\n                )\n                self._gen_dev_endpoint(\n                    devices, ep.rx_names, destinations, scalable_destinations\n                )\n                if len(source) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = source\n                if len(destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"destinations\"\n                    ] = destinations\n                if len(scalable_sources) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableSources\"\n                    ] = scalable_sources\n                if len(scalable_destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableDestinations\"\n                    ] = scalable_destinations\n    \n            tr[\"trafficItem\"][-1][\"trafficType\"] = tr_type\n            if tr_type == \"raw\":\n                tr[\"trafficItem\"][-1][\"configElement\"] = self.config_raw_stack(\n                    tr_xpath, self._flows_packet[index]\n                )\n            self.traffic_index += 1\n            self.logger.debug(\n                \"Flow %s converted to %s\" % (flow_name, tr[\"trafficItem\"][-1])\n            )\n    \n        # egress only tracking\n        tr[\"egressOnlyTracking\"] = []\n>       for snappi_eotr in config.egress_only_trackings:\nE       AttributeError: 'Config' object has no attribute 'egress_only_trackings'\n\nsnappi_ixnetwork/trafficitem.py:688: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nb2b_raw_config_vports = <snappi.snappi.Config object at 0x7fbfb12393a0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\ntx_vport = <snappi.snappi.Port object at 0x7fbfb123b510>\nrx_vport = <snappi.snappi.Port object at 0x7fbfb123b5b0>\n\n    def test_vxlan_fields(api, b2b_raw_config_vports, utils, tx_vport, rx_vport):\n        \"\"\"\n        Configure three raw vxlan flows with ,\n        - fixed pattern for all vxlan fields\n        - list pattern for all vxlan fields\n        - counter pattern for all vxlan fields\n        Validate,\n        - fetch the vxlan header via restpy framework and validate\n          against expected.\n        \"\"\"\n        # fixed\n        outer_src_mac = \"00:00:0a:00:00:01\"\n        outer_dst_mac = \"00:00:0b:00:00:02\"\n        ether_type = 2048\n        src_ip = \"200.1.1.1\"\n        dst_ip = \"100.1.1.1\"\n        src_port = 3000\n        dst_port = 4000\n        inner_src_mac = \"00:00:0c:00:00:03\"\n        inner_dst_mac = \"00:00:0d:00:00:04\"\n        flags = 255\n        vni = 2000\n        reserved0 = 16777215\n        reserved1 = 255\n    \n        flow1 = b2b_raw_config_vports.flows[0]\n    \n        outer_eth, ip, udp, vxlan, inner_eth = (\n            flow1.packet.ethernet().ipv4().udp().vxlan().ethernet()\n        )\n    \n        outer_eth.src.value = outer_src_mac\n        outer_eth.dst.value = outer_dst_mac\n        outer_eth.ether_type.value = ether_type\n    \n        ip.src.value = src_ip\n        ip.dst.value = dst_ip\n    \n        udp.src_port.value = src_port\n        udp.dst_port.value = dst_port\n    \n        vxlan.flags.value = flags\n        vxlan.vni.value = vni\n        vxlan.reserved0.value = reserved0\n        vxlan.reserved1.value = reserved1\n    \n        inner_eth.src.value = inner_src_mac\n        inner_eth.dst.value = inner_dst_mac\n    \n        # List\n        flow2 = b2b_raw_config_vports.flows.flow(name=\"f2\")[-1]\n        flow2.tx_rx.port.tx_name = tx_vport.name\n        flow2.tx_rx.port.rx_name = rx_vport.name\n    \n        flags_list = [0, 15, 255]\n        vni_list = [0, 15, 255, 4095, 65535, 1048575, 16777215]\n        reserved0_list = [0, 15, 255, 4095, 65535, 1048575, 16777215]\n        reserved1_list = [0, 15, 255]\n    \n        outer_eth, ip, udp, vxlan, inner_eth = (\n            flow2.packet.ethernet().ipv4().udp().vxlan().ethernet()\n        )\n    \n        outer_eth.src.value = outer_src_mac\n        outer_eth.dst.value = outer_dst_mac\n        outer_eth.ether_type.value = ether_type\n    \n        ip.src.value = src_ip\n        ip.dst.value = dst_ip\n    \n        udp.src_port.value = src_port\n        udp.dst_port.value = dst_port\n    \n        vxlan.flags.values = flags_list\n        vxlan.vni.values = vni_list\n        vxlan.reserved0.values = reserved0_list\n        vxlan.reserved1.values = reserved1_list\n    \n        inner_eth.src.value = inner_src_mac\n        inner_eth.dst.value = inner_dst_mac\n    \n        # Counter\n        flow3 = b2b_raw_config_vports.flows.flow(name=\"f3\")[-1]\n        flow3.tx_rx.port.tx_name = tx_vport.name\n        flow3.tx_rx.port.rx_name = rx_vport.name\n    \n        outer_eth, ip, udp, vxlan, inner_eth = (\n            flow3.packet.ethernet().ipv4().udp().vxlan().ethernet()\n        )\n    \n        outer_eth.src.value = outer_src_mac\n        outer_eth.dst.value = outer_dst_mac\n        outer_eth.ether_type.value = ether_type\n    \n        ip.src.value = src_ip\n        ip.dst.value = dst_ip\n    \n        udp.src_port.value = src_port\n        udp.dst_port.value = dst_port\n    \n        vxlan.flags.increment.start = 0\n        vxlan.flags.increment.step = 1\n        vxlan.flags.increment.count = 255\n    \n        vxlan.vni.increment.start = 0\n        vxlan.vni.increment.step = 1\n        vxlan.vni.increment.count = 16777215\n    \n        vxlan.reserved0.increment.start = 0\n        vxlan.reserved0.increment.step = 1\n        vxlan.reserved0.increment.count = 16777215\n    \n        vxlan.reserved1.increment.start = 0\n        vxlan.reserved1.increment.step = 1\n        vxlan.reserved1.increment.count = 255\n    \n        inner_eth.src.value = inner_src_mac\n        inner_eth.dst.value = inner_dst_mac\n    \n>       api.set_config(b2b_raw_config_vports)\n\ntests/vxlan/test_vxlan_fields.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nconfig = <snappi.snappi.Config object at 0x7fbfb12393a0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\nE               self.traffic_item.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\nE               ixn_traffic_item = self.get_ixn_config(self._config)[0]\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\nE               tr = self.create_traffic(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\nE               for snappi_eotr in config.egress_only_trackings:\nE            'Config' object has no attribute 'egress_only_trackings'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Config validation 0.006s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Ports configuration 0.302s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Captures configuration 0.194s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Location configuration 0.452s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Lag Configuration 0.082s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Convert device config : 0.267s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Push IxNetwork device config : 0.088s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Devices configuration 0.442s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Flows configuration 5.899s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":14,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"vxlan.test_vxlan_fields"},{"name":"package","value":"vxlan.test_vxlan_fields"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":87,"unknown":0,"total":88},"items":[{"uid":"f21fe9be552adbd8","status":"passed","time":{"start":1744628606357,"stop":1744628618373,"duration":12016}},{"uid":"dc1aeb7436a8affe","status":"passed","time":{"start":1744607503134,"stop":1744607515100,"duration":11966}},{"uid":"5603513d3ab18c12","status":"passed","time":{"start":1744319569642,"stop":1744319581641,"duration":11999}},{"uid":"874f81a15ebb2c67","status":"passed","time":{"start":1744308828836,"stop":1744308840909,"duration":12073}},{"uid":"57779ac4256f4bad","status":"passed","time":{"start":1744118178111,"stop":1744118191095,"duration":12984}},{"uid":"ca414dd7f389ca72","status":"passed","time":{"start":1744106575909,"stop":1744106588006,"duration":12097}},{"uid":"4fea165973508978","status":"passed","time":{"start":1743796899201,"stop":1743796911391,"duration":12190}},{"uid":"27c5a335c11d4588","status":"passed","time":{"start":1743756339018,"stop":1743756353073,"duration":14055}},{"uid":"5273ae43de9822c2","status":"passed","time":{"start":1743749241780,"stop":1743749253609,"duration":11829}},{"uid":"93df340633e8b97","status":"passed","time":{"start":1743703353732,"stop":1743703365729,"duration":11997}},{"uid":"d0f12ac74ec01165","status":"passed","time":{"start":1743696488928,"stop":1743696502130,"duration":13202}},{"uid":"f1f3ab7e511101e8","status":"passed","time":{"start":1743689614468,"stop":1743689627505,"duration":13037}},{"uid":"3e2fedec61f4201e","status":"passed","time":{"start":1743655642521,"stop":1743655656529,"duration":14008}},{"uid":"303c2c4ff5685090","status":"passed","time":{"start":1743167009876,"stop":1743167024664,"duration":14788}},{"uid":"9ed14bdcbb35d7","status":"passed","time":{"start":1743158796170,"stop":1743158808338,"duration":12168}},{"uid":"783dec6c88eaebfa","status":"passed","time":{"start":1743154377859,"stop":1743154391871,"duration":14012}},{"uid":"984f50ad0133ac26","status":"passed","time":{"start":1743142356248,"stop":1743142368385,"duration":12137}},{"uid":"d6cc3ca124ebb42d","status":"passed","time":{"start":1743134333235,"stop":1743134346459,"duration":13224}},{"uid":"8b7513ca9f6cdf01","status":"passed","time":{"start":1743107933073,"stop":1743107945112,"duration":12039}},{"uid":"93641ec2973e5112","status":"passed","time":{"start":1743101127011,"stop":1743101139090,"duration":12079}}]},"tags":[]},"source":"981cb13359466766.json","parameterValues":[]}
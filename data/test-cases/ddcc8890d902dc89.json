{"uid":"ddcc8890d902dc89","name":"test_bgp_on_different_dg","historyId":"pytest:bgp.test_validate_bgp#test_bgp_on_different_dg","time":{"start":1742993864845,"stop":1742993869809,"duration":4964},"status":"failed","statusMessage":"assert False is True","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe6416110>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:363: in config_ixnetwork\n    self.ngpf.config()\nsnappi_ixnetwork/device/ngpf.py:69: in config\n    self._configure_topology()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.device.ngpf.Ngpf object at 0x7fdbe3e23b50>\n\n    def _configure_topology(self):\n        self.stop_topology()\n        self.api._remove(self.api._topology, [])\n        ixn_topos = self.create_node(self._ixn_config, \"topology\")\n        # Configured all interfaces\n        self._configure_device_group(ixn_topos)\n    \n        # Configure all MACsec interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._macsec.config(device)\n    \n        # We need to configure all interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._bgp.config(device)\n    \n        #Configure all RoCEv2 interface before configure protocols\n        for device in self.api.snappi_config.devices:\n>           self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE           AttributeError: 'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/device/ngpf.py:125: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nb2b_raw_config = <snappi.snappi.Config object at 0x7fdbe6416110>\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\n\n    def test_bgp_on_different_dg(b2b_raw_config, api):\n        \"\"\"Validate BGP try to map with different dg\"\"\"\n        b2b_raw_config.flows.clear()\n    \n        p1, p2 = b2b_raw_config.ports\n        d1, d2 = b2b_raw_config.devices.device(name=\"tx_bgp\").device(name=\"rx_bgp\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:00:00:11\", \"00:00:00:00:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        bgp1, bgp2 = d1.bgp, d2.bgp\n    \n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n        bgp1.router_id, bgp2.router_id = \"192.0.0.1\", \"192.0.0.2\"\n        bgp1_int = bgp1.ipv4_interfaces.add()\n        bgp1_int.ipv4_name = ip2.name\n        bgp1_peer = bgp1_int.peers.add()\n        bgp1_peer.name = \"bgp1\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n        ip1.prefix = 24\n    \n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n        ip2.prefix = 24\n    \n        bgp1_peer.peer_address = \"10.1.1.2\"\n        bgp1_peer.as_type = \"ibgp\"\n        bgp1_peer.as_number = 10\n    \n        try:\n>           api.set_config(b2b_raw_config)\n\ntests/bgp/test_validate_bgp.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe6416110>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\nE               self.ngpf.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\nE               self._configure_topology()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\nE               self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE            'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException\n\nDuring handling of the above exception, another exception occurred:\n\nb2b_raw_config = <snappi.snappi.Config object at 0x7fdbe6416110>\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\n\n    def test_bgp_on_different_dg(b2b_raw_config, api):\n        \"\"\"Validate BGP try to map with different dg\"\"\"\n        b2b_raw_config.flows.clear()\n    \n        p1, p2 = b2b_raw_config.ports\n        d1, d2 = b2b_raw_config.devices.device(name=\"tx_bgp\").device(name=\"rx_bgp\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:00:00:11\", \"00:00:00:00:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        bgp1, bgp2 = d1.bgp, d2.bgp\n    \n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n        bgp1.router_id, bgp2.router_id = \"192.0.0.1\", \"192.0.0.2\"\n        bgp1_int = bgp1.ipv4_interfaces.add()\n        bgp1_int.ipv4_name = ip2.name\n        bgp1_peer = bgp1_int.peers.add()\n        bgp1_peer.name = \"bgp1\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n        ip1.prefix = 24\n    \n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n        ip2.prefix = 24\n    \n        bgp1_peer.peer_address = \"10.1.1.2\"\n        bgp1_peer.as_type = \"ibgp\"\n        bgp1_peer.as_number = 10\n    \n        try:\n            api.set_config(b2b_raw_config)\n        except Exception as e:\n            print(str(e))\n            result = \"BGP should not configured on top of different device\" in str(\n                e\n            )\n>           assert result is True\nE           assert False is True\n\ntests/bgp/test_validate_bgp.py:93: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 0.004s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 0.313s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 0.835s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.095s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Speed change not require due to redundant Layer1 config","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.002s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 0.671s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 1.807s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.086s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 0.297s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 0.393s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":13,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp.test_validate_bgp"},{"name":"package","value":"bgp.test_validate_bgp"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":60,"unknown":0,"total":61},"items":[{"uid":"de0d974247644523","status":"passed","time":{"start":1742381702821,"stop":1742381710661,"duration":7840}},{"uid":"2f737b47d8b6d6","status":"passed","time":{"start":1742374910714,"stop":1742374919501,"duration":8787}},{"uid":"2a8fc2e2a7a42d59","status":"passed","time":{"start":1742299164935,"stop":1742299181672,"duration":16737}},{"uid":"c9f7c7e8061fbb8e","status":"passed","time":{"start":1741799882568,"stop":1741799891230,"duration":8662}},{"uid":"b55af17ce276dd","status":"passed","time":{"start":1741788649556,"stop":1741788658357,"duration":8801}},{"uid":"f3397593f1131f9b","status":"passed","time":{"start":1741764418062,"stop":1741764431499,"duration":13437}},{"uid":"e8d9f592fcc9e2e4","status":"passed","time":{"start":1741757585447,"stop":1741757597598,"duration":12151}},{"uid":"252bba3ffa5d587e","status":"passed","time":{"start":1741690639312,"stop":1741690651535,"duration":12223}},{"uid":"62319735d4385d84","status":"passed","time":{"start":1741682454375,"stop":1741682464925,"duration":10550}},{"uid":"18dbbc56d6f3fc3e","status":"passed","time":{"start":1741584950599,"stop":1741584964712,"duration":14113}},{"uid":"28fd52c3a9355626","status":"passed","time":{"start":1741547140558,"stop":1741547154278,"duration":13720}},{"uid":"d82df7773c2aa8b2","status":"passed","time":{"start":1741459053851,"stop":1741459072382,"duration":18531}},{"uid":"340d86b94b870790","status":"passed","time":{"start":1741451329877,"stop":1741451344790,"duration":14913}},{"uid":"fe6effcf38986481","status":"passed","time":{"start":1741375664779,"stop":1741375681508,"duration":16729}},{"uid":"6d663ed659e7ea81","status":"passed","time":{"start":1741368681952,"stop":1741368699523,"duration":17571}},{"uid":"346363641bab39ef","status":"passed","time":{"start":1741353394880,"stop":1741353412766,"duration":17886}},{"uid":"d828d74fc2f303b7","status":"passed","time":{"start":1741346675485,"stop":1741346689228,"duration":13743}},{"uid":"c007370bf9328ca3","status":"passed","time":{"start":1741066144231,"stop":1741066160964,"duration":16733}},{"uid":"35d2db7a866f8a92","status":"passed","time":{"start":1741017342205,"stop":1741017360257,"duration":18052}},{"uid":"e9ef7d1afb274f93","status":"passed","time":{"start":1741010585345,"stop":1741010599619,"duration":14274}}]},"tags":[]},"source":"ddcc8890d902dc89.json","parameterValues":[]}
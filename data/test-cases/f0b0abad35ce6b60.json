{"uid":"f0b0abad35ce6b60","name":"test_stats_filter_e2e","historyId":"pytest:imix.test_standard_imix_predefined_e2e#test_stats_filter_e2e","time":{"start":1743020239133,"stop":1743020289287,"duration":50154},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 450, in set_control_state\n    self.traffic_item.transmit(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1341, in transmit\n    if (device.rocev2) and request.state == \"stop\":\n 'Device' object has no attribute 'rocev2'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fda9c75b4c0>\npayload = <snappi.snappi.ControlState object at 0x7fda98e34400>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    event_state = request_payload.state\n                    with Timer(self, \"Setting route state\"):\n                        event_names = self.ngpf.set_route_state(request_payload)\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n>               self.traffic_item.transmit(request_payload)\n\nsnappi_ixnetwork/snappi_api.py:450: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7fda9a128df0>\nrequest = <snappi.snappi.StateTrafficFlowTransmit object at 0x7fda98e355d0>\n\n    def transmit(self, request):\n        \"\"\"Set flow transmit\n        1) check set_protocol_state for device protocols\n        2) If start then generate and apply traffic\n        3) Execute requested transmit action (start|stop|pause|resume)\n        \"\"\"\n        regex = \"\"\n        flow_names = [flow.name for flow in self._api._config.flows]\n        if request and request.flow_names:\n            flow_names = request.flow_names\n        if len(flow_names) == 1:\n            regex = \"^%s$\" % self._api.special_char(flow_names)[0]\n        elif len(flow_names) > 1:\n            regex = \"^(%s)$\" % \"|\".join(self._api.special_char(flow_names))\n    \n        self.logger.debug(\n            \"These %s flows will go into %s state\"\n            % (flow_names, request.state)\n        )\n        if request.state == \"start\":\n            ##This portion of code is to handle different stateful_traffic flow, currently only rocev2\n            for device in self._api._config.devices:\n                #Check if rocev2 exists in topology\n                if hasattr(device, \"rocev2\") and device.rocev2:\n                    ####### Create and Apply RoCEv2 Flow Groups here, as we have identified that RoCEv2 is present in Topology\n                    self._api._traffic.AddRoCEv2FlowGroups()\n                    rocev2_traffic = self._api._traffic.RoceV2Traffic.find(Enabled=True)\n                    stateful_flow = None\n                    options = None\n                    if hasattr(self._api._config, \"stateful_flows\"):\n                        stateful_flow = self._api._config.stateful_flows\n                    if hasattr(self._api._config, \"options\"):\n                        options = self._api._config.options\n                    self._rocev2._configureTrafficParameters(rocev2_traffic, stateful_flow, options)\n                    with Timer(self._api, \"Flows generate/apply\"):\n                        self._api._traffic.Apply()\n                    print (\"Starting Traffic\")\n                    self._api._traffic.Start()\n                    break\n            if len(self._api._topology.find()) > 0:\n                glob_topo = self._api._globals.Topology.refresh()\n                if glob_topo.Status == \"notStarted\":\n                    raise Exception(\n                        \"Please start protocols using set_protocol_state \"\n                        \"before start traffic\"\n                    )\n            if len(self._api._traffic_item.find()) == 0:\n                return\n            self._api._traffic_item.find(State=\"^unapplied$\")\n            if len(self._api._traffic_item) > 0:\n                with Timer(self._api, \"Flows generate/apply\"):\n                    self._api._traffic_item.Generate()\n                    self._api._traffic.Apply()\n            self._api._traffic_item.find(State=\"^started$\")\n            if len(self._api._traffic_item) == 0:\n                with Timer(self._api, \"Flows clear statistics\"):\n                    self._api._ixnetwork.ClearStats(\n                        [\n                            \"waitForPortStatsRefresh\",\n                            \"waitForTrafficStatsRefresh\",\n                        ]\n                    )\n            self._api.capture._start_capture()\n        self._api._traffic_item.find(Name=regex)\n        for device in self._api._config.devices:\n>           if (device.rocev2) and request.state == \"stop\":\nE           AttributeError: 'Device' object has no attribute 'rocev2'\n\nsnappi_ixnetwork/trafficitem.py:1341: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fda9c75b4c0>\nb2b_raw_config = <snappi.snappi.Config object at 0x7fda9992d300>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_stats_filter_e2e(api, b2b_raw_config, utils):\n        \"\"\"\n        configure flows with ipv4 imix\n        - Send ipv4 imix predefined traffic\n    \n    \n        Validation:\n        1) Get port statistics based on port name & column names and assert\n        each port & column has returned the values and assert\n        2) Get flow statistics based on flow name & column names and assert\n        each flow & column has returned the values and assert\n        \"\"\"\n    \n        no_of_packets = 1000\n    \n        b2b_raw_config.flows.clear()\n        config = b2b_raw_config\n    \n        d1, d2 = config.devices.device(name=\"d1\").device(name=\"d2\")\n    \n        eth1 = d1.ethernets.add()\n        eth1.name = \"eth1\"\n        eth1.connection.port_name = config.ports[0].name\n        eth1.mac = \"00:ad:aa:13:11:01\"\n    \n        eth2 = d2.ethernets.add()\n        eth2.name = \"eth2\"\n        eth2.connection.port_name = config.ports[1].name\n        eth2.mac = \"00:ad:aa:13:11:02\"\n    \n        ip1 = eth1.ipv4_addresses.add()\n        ip1.name = \"ipv41\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n    \n        ip2 = eth2.ipv4_addresses.add()\n        ip2.name = \"ipv42\"\n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n    \n        f1 = config.flows.flow(name=\"f1\")[-1]\n        f1.tx_rx.device.tx_names = [ip1.name]\n        f1.tx_rx.device.rx_names = [ip2.name]\n        f1.size.weight_pairs.predefined = \"standard_imix\"\n        f1.rate.pps = 1000\n        f1.duration.fixed_packets.packets = no_of_packets\n        f1.metrics.enable = True\n        eth, ip = f1.packet.ethernet().ipv4()\n        api.set_config(config)\n    \n>       utils.start_traffic(api, b2b_raw_config)\n\ntests/imix/test_standard_imix_predefined_e2e.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/common.py:155: in start_traffic\n    res = api.set_control_state(cs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fda9c75b4c0>\npayload = <snappi.snappi.ControlState object at 0x7fda98e34400>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    event_state = request_payload.state\n                    with Timer(self, \"Setting route state\"):\n                        event_names = self.ngpf.set_route_state(request_payload)\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n                self.traffic_item.transmit(request_payload)\n            elif control_option is not None:\n                msg = \"{} is not a supported choice for metrics; \\\n                the supported choices are \\\n                ['port', 'protocol', traffic]\".format(\n                    control_option\n                )\n                raise SnappiIxnException(400, msg)\n            self._event_info = EventInfo(event_type, event_state, event_names)\n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 450, in set_control_state\nE               self.traffic_item.transmit(request_payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1341, in transmit\nE               if (device.rocev2) and request.state == \"stop\":\nE            'Device' object has no attribute 'rocev2'\n\nsnappi_ixnetwork/snappi_api.py:460: SnappiIxnException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 0.005s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 0.295s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 1.218s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.093s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Speed change not require due to redundant Layer1 config","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.005s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 0.771s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 3.983s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.087s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 0.567s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Push IxNetwork device config : 1.207s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 1.914s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows configuration 2.363s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Start interfaces 2.364s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 IxNet - One or more destination MACs or VPNs are invalid or unreachable and the packets configured to be sent to them were not created","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 0.008s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 0.300s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 1.291s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.105s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Speed change not require due to redundant Layer1 config","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.005s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 0.762s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 1.637s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.088s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 0.557s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Push IxNetwork device config : 0.225s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 0.877s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows configuration 2.374s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Start interfaces 5.922s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 IxNet - One or more destination MACs or VPNs are invalid or unreachable and the packets configured to be sent to them were not created","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures start 1.645s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows generate/apply 2.039s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows clear statistics 12.887s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures start 1.059s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":40,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"imix.test_standard_imix_predefined_e2e"},{"name":"package","value":"imix.test_standard_imix_predefined_e2e"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":62,"unknown":0,"total":64},"items":[{"uid":"ff965a5fb4f16d30","status":"passed","time":{"start":1743003871353,"stop":1743004099938,"duration":228585}},{"uid":"73c64a7106b00d77","status":"passed","time":{"start":1742996899832,"stop":1742997130660,"duration":230828}},{"uid":"e2de9dafd138f542","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\n    self.ngpf.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\n    self._configure_topology()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\n    self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\n 'Config' object has no attribute 'stateful_flows'","time":{"start":1742993864845,"stop":1742993869837,"duration":4992}},{"uid":"daad9468aef39b07","status":"passed","time":{"start":1742381702821,"stop":1742381929429,"duration":226608}},{"uid":"c6e1bcf66baac98f","status":"passed","time":{"start":1742374910714,"stop":1742375142822,"duration":232108}},{"uid":"a4e97571f7c1a62f","status":"passed","time":{"start":1742299164935,"stop":1742299390023,"duration":225088}},{"uid":"607543c112772ac5","status":"passed","time":{"start":1741799882568,"stop":1741800112144,"duration":229576}},{"uid":"1dbe0289af9cd530","status":"passed","time":{"start":1741788649556,"stop":1741788880122,"duration":230566}},{"uid":"4648c7739b6102bd","status":"passed","time":{"start":1741764418062,"stop":1741764651643,"duration":233581}},{"uid":"c87b26db6f52eaf3","status":"passed","time":{"start":1741757585447,"stop":1741757811523,"duration":226076}},{"uid":"89fe7abb6fcb1d19","status":"passed","time":{"start":1741690639312,"stop":1741690865879,"duration":226567}},{"uid":"4ed5b4a2ab53ddf2","status":"passed","time":{"start":1741682454375,"stop":1741682686460,"duration":232085}},{"uid":"f20272132456aae1","status":"passed","time":{"start":1741584950599,"stop":1741585200775,"duration":250176}},{"uid":"3d9d8438e0745935","status":"passed","time":{"start":1741547140558,"stop":1741547380648,"duration":240090}},{"uid":"78bb784f2d1b35c6","status":"passed","time":{"start":1741459053851,"stop":1741459297942,"duration":244091}},{"uid":"bc58d470877bdc27","status":"passed","time":{"start":1741451329877,"stop":1741451568383,"duration":238506}},{"uid":"9a6cec0421443ddf","status":"passed","time":{"start":1741375664779,"stop":1741375897874,"duration":233095}},{"uid":"4c09e1d0e381d88a","status":"passed","time":{"start":1741368681952,"stop":1741368921035,"duration":239083}},{"uid":"442658cd6a6b12b6","status":"passed","time":{"start":1741353394880,"stop":1741353631039,"duration":236159}},{"uid":"d6459fd019346890","status":"passed","time":{"start":1741346675485,"stop":1741346915566,"duration":240081}}]},"tags":[]},"source":"f0b0abad35ce6b60.json","parameterValues":[]}
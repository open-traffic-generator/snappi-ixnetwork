{"uid":"a97548e34eb77fa3","name":"test_only_metrics","historyId":"pytest:metrics.test_flow_metrics#test_only_metrics","time":{"start":1745841955218,"stop":1745841961646,"duration":6428},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 561, in get_metrics\n    response = self.traffic_item.results(request.flow)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1546, in results\n    raise Exception(\n To fetch flow metrics at least Flow should configured","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f621b8bb790>\nrequest = <snappi.snappi.MetricsRequest object at 0x7f6218a765c0>\n\n    def get_metrics(self, request):\n        \"\"\"\n        Gets port, flow and protocol metrics.\n    \n        Args\n        ----\n        - request (Union[MetricsRequest, str]): A request for Port, Flow and\n          protocol metrics.\n          The request content MUST be vase on the OpenAPI model,\n          #/components/schemas/Result.MetricsRequest\n          See the docs/openapi.yaml document for all model details\n        \"\"\"\n        try:\n            self._connect()\n            metric_req = self.metrics_request()\n            if isinstance(request, (type(metric_req), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[MetricsRequest, str]\"\n                )\n            if isinstance(request, str) is True:\n                request = metric_req.deserialize(request)\n            # Need to change the code style when the choice Enum grows big\n            if request.get(\"choice\") == \"port\":\n                response = self.vport.results(request.port)\n                metric_res = self.metrics_response()\n                metric_res.port_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"flow\":\n>               response = self.traffic_item.results(request.flow)\n\nsnappi_ixnetwork/snappi_api.py:561: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7f62190f1870>\nrequest = <snappi.snappi.FlowMetricsRequest object at 0x7f6217b8afc0>\n\n    def results(self, request):\n        \"\"\"Return flow results\"\"\"\n    \n        start_states = [\n            \"txStopWatchExpected\",\n            \"locked\",\n            \"started\",\n            \"startedWaitingForStats\",\n            \"startedWaitingForStreams\",\n            \"stoppedWaitingForStats\",\n        ]\n        # setup parameters\n        self._column_names = request.get(\"metric_names\")\n        if self._column_names is None:\n            self._column_names = []\n        elif not isinstance(self._column_names, list):\n            msg = \"Invalid format of column_names passed {},\\\n                    expected list\".format(\n                self._column_names\n            )\n            raise Exception(msg)\n    \n        has_request_flow = True\n        req_flow_names = request.get(\"flow_names\")\n        if req_flow_names is None or len(req_flow_names) == 0:\n            req_flow_names = []\n            has_request_flow = False\n        if not isinstance(req_flow_names, list):\n            msg = \"Invalid format of flow_names passed {},\\\n                    expected list\".format(\n                req_flow_names\n            )\n            raise Exception(msg)\n        req_flow_names = self._api.special_char(req_flow_names)\n        # initialize result values\n        self.logger.debug(\n            \"Fetching these column %s for flows %s\"\n            % (self._column_names, req_flow_names)\n        )\n        flow_names = []\n        flow_rows = {}\n        regfilter = {\"property\": \"name\", \"regex\": \".*\"}\n        if len(req_flow_names) > 0:\n            regfilter[\"regex\"] = \"^(%s)$\" % \"|\".join(req_flow_names)\n        traffic_items = self._api.select_traffic_items(\n            traffic_item_filters=[regfilter]\n        )\n        if len(traffic_items) == 0:\n>           raise Exception(\n                \"To fetch flow metrics at least Flow should configured\"\n            )\nE           Exception: To fetch flow metrics at least Flow should configured\n\nsnappi_ixnetwork/trafficitem.py:1546: Exception\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f621b8bb790>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_only_metrics(api, utils):\n>       _, flow_stats = utils.get_all_stats(api)\n\ntests/metrics/test_flow_metrics.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/common.py:245: in get_all_stats\n    flow_results = api.get_metrics(request).flow_metrics\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f621b8bb790>\nrequest = <snappi.snappi.MetricsRequest object at 0x7f6218a765c0>\n\n    def get_metrics(self, request):\n        \"\"\"\n        Gets port, flow and protocol metrics.\n    \n        Args\n        ----\n        - request (Union[MetricsRequest, str]): A request for Port, Flow and\n          protocol metrics.\n          The request content MUST be vase on the OpenAPI model,\n          #/components/schemas/Result.MetricsRequest\n          See the docs/openapi.yaml document for all model details\n        \"\"\"\n        try:\n            self._connect()\n            metric_req = self.metrics_request()\n            if isinstance(request, (type(metric_req), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[MetricsRequest, str]\"\n                )\n            if isinstance(request, str) is True:\n                request = metric_req.deserialize(request)\n            # Need to change the code style when the choice Enum grows big\n            if request.get(\"choice\") == \"port\":\n                response = self.vport.results(request.port)\n                metric_res = self.metrics_response()\n                metric_res.port_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"flow\":\n                response = self.traffic_item.results(request.flow)\n                metric_res = self.metrics_response()\n                metric_res.flow_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"egress_only_tracking\":\n                response = self.traffic_item.results_egress_only_tracking(request.egress_only_tracking)\n                metric_res = self.metrics_response()\n                metric_res.egress_only_tracking_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lag\":\n                response = self.traffic_item.results(request.lag)\n                metric_res = self.metrics_response()\n                metric_res.lag_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lacp\":\n                response = self.traffic_item.results(request.lacp)\n                metric_res = self.metrics_response()\n                metric_res.lacp_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"convergence\":\n                response = self._result(request.convergence)\n                metric_res = self.metrics_response()\n                metric_res.convergence_metrics.deserialize(response)\n                return metric_res\n            if (\n                request.get(\"choice\")\n                in self.protocol_metrics.get_supported_protocols()\n            ):\n                response = self.protocol_metrics.results(request)\n                metric_res = self.metrics_response()\n                getattr(metric_res, request.choice + \"_metrics\").deserialize(\n                    response\n                )\n                return metric_res\n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 561, in get_metrics\nE               response = self.traffic_item.results(request.flow)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1546, in results\nE               raise Exception(\nE            To fetch flow metrics at least Flow should configured\n\nsnappi_ixnetwork/snappi_api.py:596: SnappiIxnException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"metrics.test_flow_metrics"},{"name":"package","value":"metrics.test_flow_metrics"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":90,"unknown":0,"total":94},"items":[{"uid":"deb4da8d120a767a","status":"passed","time":{"start":1745837550536,"stop":1745837553377,"duration":2841}},{"uid":"d57dc865ac9d1251","status":"passed","time":{"start":1745833086105,"stop":1745833088906,"duration":2801}},{"uid":"db74ad71b401082e","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 561, in get_metrics\n    response = self.traffic_item.results(request.flow)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1547, in results\n    raise Exception(\n To fetch flow metrics at least Flow should configured","time":{"start":1745687367675,"stop":1745687369400,"duration":1725}},{"uid":"aadb1202d507b7c2","status":"passed","time":{"start":1745474974403,"stop":1745474977248,"duration":2845}},{"uid":"6c634cc9c820a49a","status":"passed","time":{"start":1745302321831,"stop":1745302326551,"duration":4720}},{"uid":"6b42630f0c46b1c3","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 561, in get_metrics\n    response = self.traffic_item.results(request.flow)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1533, in results\n    raise Exception(\n To fetch flow metrics at least Flow should configured","time":{"start":1744642070405,"stop":1744642072144,"duration":1739}},{"uid":"586625742d18579d","status":"passed","time":{"start":1744628606357,"stop":1744628609754,"duration":3397}},{"uid":"49fa6f879b19a1a4","status":"passed","time":{"start":1744607503134,"stop":1744607506959,"duration":3825}},{"uid":"81b360df1e28c762","status":"passed","time":{"start":1744319569642,"stop":1744319574101,"duration":4459}},{"uid":"9c3e764ff1c34ab0","status":"passed","time":{"start":1744308828836,"stop":1744308831655,"duration":2819}},{"uid":"a89099722b894e36","status":"passed","time":{"start":1744118178111,"stop":1744118180907,"duration":2796}},{"uid":"8b333cb51b3d3842","status":"passed","time":{"start":1744106575909,"stop":1744106579347,"duration":3438}},{"uid":"b4a52399d81a3212","status":"passed","time":{"start":1743796899201,"stop":1743796902007,"duration":2806}},{"uid":"e3b6f9d24bfb6ba5","status":"passed","time":{"start":1743756339018,"stop":1743756341790,"duration":2772}},{"uid":"a9fad1b50aef9676","status":"passed","time":{"start":1743749241780,"stop":1743749244578,"duration":2798}},{"uid":"3b0a0f2d5a2fd03e","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 561, in get_metrics\n    response = self.traffic_item.results(request.flow)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1500, in results\n    ).Page\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/statistics/view/view.py\", line 554, in Page\n    return Page(self)._select()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 548, in _select\n    end = len(self._parent.href)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 158, in href\n    return self._get_attribute(\"href\")\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 218, in _get_attribute\n    raise NotFoundError(msg)\n Failed to get the View.href property as the View object has no encapsulated resources. Either the View.find() method was not called or it failed to retrieve any resources from the server.","time":{"start":1743703353732,"stop":1743703355496,"duration":1764}},{"uid":"bf50384527c1d11d","status":"passed","time":{"start":1743696488928,"stop":1743696491736,"duration":2808}},{"uid":"88a08df0b4edfc01","status":"passed","time":{"start":1743689614468,"stop":1743689617311,"duration":2843}},{"uid":"48ed0f29cc8fa81b","status":"passed","time":{"start":1743655642521,"stop":1743655645356,"duration":2835}},{"uid":"d81a024009491d3a","status":"passed","time":{"start":1743167009876,"stop":1743167012706,"duration":2830}}]},"tags":[]},"source":"a97548e34eb77fa3.json","parameterValues":[]}
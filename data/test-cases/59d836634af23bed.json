{"uid":"59d836634af23bed","name":"test_counter_ip_dscp","historyId":"pytest:chassischain.test_chassis_chain_support#test_counter_ip_dscp","time":{"start":1744642070405,"stop":1744642084732,"duration":14327},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\n    for snappi_eotr in config.egress_only_trackings:\n 'Config' object has no attribute 'egress_only_trackings'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nconfig = <snappi.snappi.Config object at 0x7fbfb5d78fe0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:364: in config_ixnetwork\n    self.traffic_item.config()\nsnappi_ixnetwork/trafficitem.py:867: in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\nsnappi_ixnetwork/trafficitem.py:534: in get_ixn_config\n    tr = self.create_traffic(config)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7fbfb5e2caf0>\nconfig = <snappi.snappi.Config object at 0x7fbfb5d78fe0>\n\n    def create_traffic(self, config):\n        self.logger.debug(\"Creating Traffic\")\n        flows = config.flows\n        tr = {\"xpath\": \"/traffic\", \"trafficItem\": []}\n        ports = self.get_ports_encap(config)\n        devices = self.get_device_info(config)\n        for index, flow in enumerate(flows):\n            flow_name = flow._properties.get(\"name\")\n            self.logger.debug(\"Creating Traffic Item %s\" % flow_name)\n            if flow_name is None:\n                raise Exception(\"name shall not be null for flows\")\n            if flow._properties.get(\"tx_rx\") is None:\n                msg = (\n                    \"Please configure the flow endpoint\"\n                    \"for flow indexed at %s\" % index\n                )\n                raise Exception(msg)\n            self._endpoint_validation(flow)\n            if flow.tx_rx.choice is None:\n                msg = \"Flow endpoint needs to be either port or device\"\n                raise Exception(msg)\n    \n            tr_xpath = \"/traffic/trafficItem[%d]\" % self.traffic_index\n            tr[\"trafficItem\"].append(\n                {\n                    \"xpath\": tr_xpath,\n                    \"name\": \"%s\" % flow.name,\n                    \"srcDestMesh\": self._get_mesh_type(flow),\n                }\n            )\n    \n            tr[\"trafficItem\"][-1][\"endpointSet\"] = [\n                {\n                    \"xpath\": tr[\"trafficItem\"][-1][\"xpath\"]\n                    + \"/endpointSet[1]\",\n                }\n            ]\n            if flow.tx_rx.choice == \"port\":\n                tr_type = \"raw\"\n                ep = getattr(flow.tx_rx, \"port\")\n                tx_objs = [\"%s/protocols\" % ports.get(ep.tx_name)]\n                rx_objs = [\"%s/protocols\" % ports.get(ep.rx_name)]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = [\n                    o for o in tx_objs\n                ]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"destinations\"] = [\n                    o for o in rx_objs\n                ]\n            else:\n                ep = getattr(flow.tx_rx, \"device\")\n                tr_type = devices[ep.tx_names[0]][\"type\"]\n                source = []\n                destinations = []\n                scalable_sources = []\n                scalable_destinations = []\n                self._gen_dev_endpoint(\n                    devices, ep.tx_names, source, scalable_sources\n                )\n                self._gen_dev_endpoint(\n                    devices, ep.rx_names, destinations, scalable_destinations\n                )\n                if len(source) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = source\n                if len(destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"destinations\"\n                    ] = destinations\n                if len(scalable_sources) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableSources\"\n                    ] = scalable_sources\n                if len(scalable_destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableDestinations\"\n                    ] = scalable_destinations\n    \n            tr[\"trafficItem\"][-1][\"trafficType\"] = tr_type\n            if tr_type == \"raw\":\n                tr[\"trafficItem\"][-1][\"configElement\"] = self.config_raw_stack(\n                    tr_xpath, self._flows_packet[index]\n                )\n            self.traffic_index += 1\n            self.logger.debug(\n                \"Flow %s converted to %s\" % (flow_name, tr[\"trafficItem\"][-1])\n            )\n    \n        # egress only tracking\n        tr[\"egressOnlyTracking\"] = []\n>       for snappi_eotr in config.egress_only_trackings:\nE       AttributeError: 'Config' object has no attribute 'egress_only_trackings'\n\nsnappi_ixnetwork/trafficitem.py:688: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nb2b_raw_config = <snappi.snappi.Config object at 0x7fbfb5d78fe0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_counter_ip_dscp(api, b2b_raw_config, utils):\n        \"\"\"\n        Configure a Chassis Chain setup\n    \n        Validate,\n        - Fetch the chassis chain config set via restpy and validate\n          against expected\n        \"\"\"\n        ixnconfig = api.ixnet_specific_config\n        chassis_chain1 = ixnconfig.chassis_chains.add()\n        chassis_chain1.primary = \"10.36.78.236\"\n        chassis_chain1.topology = chassis_chain1.STAR\n        secondary1 = chassis_chain1.secondary.add()\n        secondary1.location = \"10.36.78.141\"\n        secondary1.sequence_id = \"2\"\n        secondary1.cable_length = \"6\"\n        # secondary2 = chassis_chain1.secondary.add()\n        # secondary2.location = \"10.39.32.161\"\n        # secondary2.sequence_id = \"3\"\n        # secondary2.cable_length = \"3\"\n        # chassis_chain2 = ixnconfig.chassis_chains.add()\n        # chassis_chain2.primary = \"10.39.32.151\"\n        # chassis_chain2.topology = chassis_chain2.DAISY\n        # secondary3 = chassis_chain2.secondary.add()\n        # secondary3.location = \"10.39.32.162\"\n        # secondary3.sequence_id = \"4\"\n        # secondary3.cable_length = \"3\"\n        # secondary4 = chassis_chain2.secondary.add()\n        # secondary4.location = \"10.39.32.163\"\n        # secondary4.sequence_id = \"5\"\n        # secondary4.cable_length = \"3\"\n    \n        f = b2b_raw_config.flows[0]\n        f.packet.ethernet().ipv4()\n        ipv4 = f.packet[1]\n        phb = (\n            [\"DEFAULT\"]\n            + [\"CS%d\" % i for i in range(1, 4)]\n            + [\"AF%d\" % i for j in range(11, 51, 10) for i in range(j, j + 3)]\n        )\n        phb = phb + [\"EF46\"]\n        af_ef = [\n            \"10\",\n            \"12\",\n        ]\n        for i, p in enumerate(phb):\n            # https://github.com/open-traffic-generator/snappi/issues/25\n            # currently assigning the choice as work around\n            ipv4.priority.choice = ipv4.priority.DSCP\n            ipv4.priority.dscp.phb.value = getattr(ipv4.priority.dscp.phb, p)\n            ipv4.priority.dscp.ecn.value = 3\n>           api.set_config(b2b_raw_config)\n\ntests/chassischain/test_chassis_chain_support.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nconfig = <snappi.snappi.Config object at 0x7fbfb5d78fe0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\nE               self.traffic_item.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\nE               ixn_traffic_item = self.get_ixn_config(self._config)[0]\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\nE               tr = self.create_traffic(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\nE               for snappi_eotr in config.egress_only_trackings:\nE            'Config' object has no attribute 'egress_only_trackings'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Config validation 0.004s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Ports configuration 5.709s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Captures configuration 1.303s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.096s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Speed change not require due to redundant Layer1 config","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Aggregation mode speed change 0.002s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Location preemption [novus1-715849.ccu.is.keysight.com;1;1, novus1-715849.ccu.is.keysight.com;1;2] 0.123s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Location connect [tx, rx] 1.287s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1425 tx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1425 rx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Location state check [tx, rx] 0.294s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Location configuration 2.806s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Layer1 configuration 1.897s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Lag Configuration 0.089s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Convert device config : 0.318s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Push IxNetwork device config : 0.088s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Devices configuration 0.492s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Flows configuration 1.176s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":21,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"chassischain.test_chassis_chain_support"},{"name":"package","value":"chassischain.test_chassis_chain_support"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":51,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":51},"items":[{"uid":"2f43b24056b79d97","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f3470f06b40>)","time":{"start":1744628606357,"stop":1744628631156,"duration":24799}},{"uid":"732e9cdf8f5ca609","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f4917224640>)","time":{"start":1744607503134,"stop":1744607525798,"duration":22664}},{"uid":"467eb52c77e5d170","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7fbb167e6f40>)","time":{"start":1744319569642,"stop":1744319592079,"duration":22437}},{"uid":"cd1c6f4f180bf112","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f5efdbd65c0>)","time":{"start":1744308828836,"stop":1744308850862,"duration":22026}},{"uid":"ddaab978a9ae15bd","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7fe87cf95640>)","time":{"start":1744118178111,"stop":1744118200989,"duration":22878}},{"uid":"f58464b644e5dc2","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f0d3aa767c0>)","time":{"start":1744106575909,"stop":1744106599068,"duration":23159}},{"uid":"d5d1cdc5b450c424","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f2407ea3ac0>)","time":{"start":1743796899201,"stop":1743796919903,"duration":20702}},{"uid":"6378d5a59aaaf5d6","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f6824d2ed40>)","time":{"start":1743756339018,"stop":1743756361816,"duration":22798}},{"uid":"cfb7ada2eeea87c3","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f45cb4f8e40>)","time":{"start":1743749241780,"stop":1743749266520,"duration":24740}},{"uid":"9da65f76426b628c","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f1eec64eac0>)","time":{"start":1743703353732,"stop":1743703375421,"duration":21689}},{"uid":"e00720cc28718f9c","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f591c3c32c0>)","time":{"start":1743696488928,"stop":1743696515355,"duration":26427}},{"uid":"1c3f274c8e1e25fa","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f1473562240>)","time":{"start":1743689614468,"stop":1743689638769,"duration":24301}},{"uid":"3490f986dcf587af","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7feb7e47acc0>)","time":{"start":1743655642521,"stop":1743655664105,"duration":21584}},{"uid":"68aecbecb229a3a9","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f96cc5879c0>)","time":{"start":1743167009876,"stop":1743167034881,"duration":25005}},{"uid":"aa7acc363683e829","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7fe464ef24c0>)","time":{"start":1743158796170,"stop":1743158817754,"duration":21584}},{"uid":"89b9eb702cb788f0","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f7a040f00c0>)","time":{"start":1743154377859,"stop":1743154405085,"duration":27226}},{"uid":"6ac6ec8ee2ac740f","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7fc60f697940>)","time":{"start":1743142356248,"stop":1743142377595,"duration":21347}},{"uid":"e8bd557a27310eb5","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f0dd1d66540>)","time":{"start":1743134333235,"stop":1743134355190,"duration":21955}},{"uid":"aef3412c9a113aa6","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7fee41e45fc0>)","time":{"start":1743107933073,"stop":1743107953540,"duration":20467}},{"uid":"a8aae0e72fbd913f","status":"failed","statusDetails":"assert 0 == 1\n +  where 0 = len(<ixnetwork_restpy.testplatform.sessions.ixnetwork.availablehardware.chassis.chassis.Chassis object at 0x7f54bccbfec0>)","time":{"start":1743101127011,"stop":1743101149742,"duration":22731}}]},"tags":[]},"source":"59d836634af23bed.json","parameterValues":[]}
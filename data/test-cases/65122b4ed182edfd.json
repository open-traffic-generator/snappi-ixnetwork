{"uid":"65122b4ed182edfd","name":"test_flow_tracking_stats","historyId":"pytest:traffic-properties.test_flow_tracking#test_flow_tracking_stats","time":{"start":1753965242171,"stop":1753965262111,"duration":19940},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 371, in config_ixnetwork\n    self.vport.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 163, in config\n    self._set_location()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 338, in _set_location\n    layer1_check = self._api.resource_group.set_group()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/resourcegroup.py\", line 67, in set_group\n    raise Exception(\np1p2p3p4","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f1eb98fa140>\nconfig = <snappi.snappi.Config object at 0x7f1eb8103150>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:371: in config_ixnetwork\n    self.vport.config()\nsnappi_ixnetwork/vport.py:163: in config\n    self._set_location()\nsnappi_ixnetwork/vport.py:338: in _set_location\n    layer1_check = self._api.resource_group.set_group()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.resourcegroup.ResourceGroup object at 0x7f1ebbf9d3c0>\n\n    def set_group(self):\n        self.layer1_check = []\n        self._store_properties = []\n        self._layer1_conf = self._api.snappi_config.get(\"layer1\")\n        if (\n            self._layer1_conf is None\n            or len(self._layer1_conf) == 0\n            or self._is_redundant is True\n        ):\n            return self.layer1_check\n    \n        self._cache_properties()\n        response = None\n        try:\n            payload = {\"arg1\": \"/availableHardware\", \"arg2\": []}\n            url = (\n                \"%s/availableHardware/operations/getChassisWithDetailedResouceGroupsInfo\"\n                % self._api._ixnetwork.href\n            )\n            response = self._api._request(\"POST\", url, payload)\n        except Exception:\n            raise Exception(\n                \"Not able to fetch chassis details. Unable to execute L1 setting\"\n            )\n        self._process_properties(response)\n    \n        final_arg2 = []\n        error_ports = []\n        convert_msgs = []\n        idle_msgs = []\n        ixn_href = self._api._ixnetwork.href\n        for property in self._store_properties:\n            # We will change those speed from L1 setting\n            if property.aggregate is False:\n                continue\n            if property.group_mode is None:\n                error_ports.append(property.port_name)\n                continue\n            args = [arg[\"arg1\"] for arg in final_arg2]\n            url = property.get_url(ixn_href)\n            if url is None:\n                idle_msgs.append((property.port_name, property.group_mode))\n                continue\n            if url not in args:\n                convert_msgs.append((property.port_name, property.group_mode))\n                arg2 = {\"arg1\": url, \"arg2\": property.group_mode}\n                final_arg2.append(arg2)\n    \n        if len(error_ports) > 0:\n>           raise Exception(\n                \"Please check the speed mode or the port numbers for the provided speed mode for these ports \",\n                error_ports,\n            )\nE           Exception: ('Please check the speed mode or the port numbers for the provided speed mode for these ports ', ['p1', 'p2', 'p3', 'p4'])\n\nsnappi_ixnetwork/resourcegroup.py:67: Exception\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f1eb98fa140>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_flow_tracking_stats(api, utils):\n        config = api.config()\n        api._enable_flow_tracking(True)\n        # ports\n        p1, p2, p3, p4 = (\n            config.ports.port(name=\"p1\", location=utils.settings.ports[0])\n            .port(name=\"p2\", location=utils.settings.ports[1])\n            .port(name=\"p3\", location=utils.settings.ports[2])\n            .port(name=\"p4\", location=utils.settings.ports[3])\n        )\n        layer1 = config.layer1.layer1()[-1]\n        layer1.port_names = [port.name for port in config.ports]\n        layer1.speed = \"speed_100_gbps\"\n        layer1.media = \"copper\"\n        layer1.name = \"test\"\n    \n        config.options.port_options.location_preemption = True\n    \n        d1, d2, d3, d4 = (\n            config.devices.device(name=\"Device1\")\n            .device(name=\"Device2\")\n            .device(name=\"Device3\")\n            .device(name=\"Device4\")\n        )\n        eth1, eth2 = (\n            d1.ethernets.add(),\n            d2.ethernets.add(),\n        )\n    \n        eth3, eth4 = (\n            d3.ethernets.add(),\n            d4.ethernets.add(),\n        )\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth3.connection.port_name, eth4.connection.port_name = p3.name, p4.name\n    \n        # device1\n        eth1.name = \"Eth1\"\n        eth1.mac = \"00:02:00:00:00:11\"\n        ip1 = eth1.ipv4_addresses.add()\n        ip1.name = \"ip1\"\n        ip1.address = \"10.10.10.1\"\n        ip1.prefix = 32\n        ip1.gateway = \"10.10.10.2\"\n    \n        # device2\n        eth2.name = \"Eth2\"\n        eth2.mac = \"00:02:00:00:00:12\"\n        ip2 = eth2.ipv4_addresses.add()\n        ip2.name = \"ip2\"\n        ip2.address = \"10.10.10.2\"\n        ip2.prefix = 32\n        ip2.gateway = \"10.10.10.1\"\n    \n        # device3\n        eth3.name = \"Eth3\"\n        eth3.mac = \"00:02:00:00:00:13\"\n        ip3 = eth3.ipv4_addresses.add()\n        ip3.name = \"ip3\"\n        ip3.address = \"20.20.20.1\"\n        ip3.prefix = 32\n        ip3.gateway = \"20.20.20.2\"\n    \n        # device4\n        eth4.name = \"Eth4\"\n        eth4.mac = \"00:02:00:00:00:14\"\n        ipv4 = eth4.ipv4_addresses.add()\n        ipv4.name = \"ip4\"\n        ipv4.address = \"20.20.20.2\"\n        ipv4.prefix = 32\n        ipv4.gateway = \"20.20.20.1\"\n    \n        # traffic\n        config.flows.flow(name=\"Full Mesh Traffic\")\n        flow = config.flows[-1]\n        flow.metrics.enable = True\n        flow.metrics.loss = True\n        endpoints = [device.name for device in config.devices]\n        flow.tx_rx.device.tx_names = endpoints\n        flow.tx_rx.device.rx_names = endpoints\n        flow.packet.ethernet().ipv4().udp()\n        flow.packet[1]\n        flow.size.fixed = 128\n        flow.duration.fixed_packets.packets = 10000\n        flow.rate.percentage = 1\n>       api.set_config(config)\n\ntests/traffic-properties/test_flow_tracking.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f1eb98fa140>\nconfig = <snappi.snappi.Config object at 0x7f1eb8103150>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 371, in config_ixnetwork\nE               self.vport.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 163, in config\nE               self._set_location()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 338, in _set_location\nE               layer1_check = self._api.resource_group.set_group()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/resourcegroup.py\", line 67, in set_group\nE               raise Exception(\nE           p1p2p3p4\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1513 Config validation 0.008s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1513 Ports configuration 4.627s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1513 Captures configuration 0.611s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1513 Location hosts ready [10.36.70.162] 0.328s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1513 Aggregation mode speed change 0.958s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1513 Location configuration 3.519s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":8,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"traffic-properties.test_flow_tracking"},{"name":"package","value":"traffic-properties.test_flow_tracking"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":38,"unknown":0,"total":41},"items":[{"uid":"709d42605259dcd","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 371, in config_ixnetwork\n    self.vport.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 163, in config\n    self._set_location()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 338, in _set_location\n    layer1_check = self._api.resource_group.set_group()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/resourcegroup.py\", line 67, in set_group\n    raise Exception(\np1p2p3p4","time":{"start":1753390964676,"stop":1753390989245,"duration":24569}},{"uid":"cc895080748933b4","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","time":{"start":1753368506584,"stop":1753368506626,"duration":42}},{"uid":"3e0e13a435f7e9ff","status":"passed","time":{"start":1752836398951,"stop":1752836506160,"duration":107209}},{"uid":"62a66c283e529a69","status":"passed","time":{"start":1752760243902,"stop":1752760340095,"duration":96193}},{"uid":"264a12d176a1b1d0","status":"passed","time":{"start":1752244885705,"stop":1752245007272,"duration":121567}},{"uid":"29263297ad5b6232","status":"passed","time":{"start":1752145840252,"stop":1752145982778,"duration":142526}},{"uid":"a1b83d077b8aefec","status":"passed","time":{"start":1751479010972,"stop":1751479113584,"duration":102612}},{"uid":"9d2040dd47c752e6","status":"passed","time":{"start":1751472402834,"stop":1751472534929,"duration":132095}},{"uid":"4c4c840696c194d7","status":"passed","time":{"start":1751283215057,"stop":1751283335306,"duration":120249}},{"uid":"6bc2dd513207ca1c","status":"passed","time":{"start":1751276144532,"stop":1751276238774,"duration":94242}},{"uid":"6cfa021664cbcd3","status":"passed","time":{"start":1751231642336,"stop":1751231761402,"duration":119066}},{"uid":"c12c6b6dc9736539","status":"passed","time":{"start":1750985352305,"stop":1750985440228,"duration":87923}},{"uid":"8c2eebf494d994cf","status":"passed","time":{"start":1750836697285,"stop":1750836829223,"duration":131938}},{"uid":"e96ac5382d66e17a","status":"passed","time":{"start":1750656827226,"stop":1750656927198,"duration":99972}},{"uid":"d5bcf3fceb96d26e","status":"passed","time":{"start":1750246239210,"stop":1750246368481,"duration":129271}},{"uid":"c88584b4b3eed168","status":"passed","time":{"start":1750239203710,"stop":1750239290246,"duration":86536}},{"uid":"6803a2fdf51f088f","status":"passed","time":{"start":1749770085540,"stop":1749770183800,"duration":98260}},{"uid":"8ed1986cba8af55b","status":"passed","time":{"start":1749546564693,"stop":1749546658828,"duration":94135}},{"uid":"100f0064a7e37056","status":"passed","time":{"start":1748968328989,"stop":1748968431220,"duration":102231}},{"uid":"3d50798adaffc875","status":"passed","time":{"start":1748929822995,"stop":1748929923028,"duration":100033}}]},"tags":[]},"source":"65122b4ed182edfd.json","parameterValues":[]}
{"uid":"a29c226a038efe04","name":"test_bgp_attributes","historyId":"pytest:bgp.test_bgp_attributes#test_bgp_attributes","time":{"start":1753368506584,"stop":1753368506669,"duration":85},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b3767f10>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b39bd7b0>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_bgp_attributes(api, utils):\n        \"\"\"\n        Configure bgp attributes and validate against restpy\n        \"\"\"\n        config = api.config()\n        community = \"1:2\"\n        aspaths = [1, 2]\n        med = 50\n        origin = \"egp\"\n    \n        v4_rr_attr = {\n            \"address\": \"200.1.0.1\",\n            \"prefix\": \"32\",\n            \"count\": \"1000\",\n            \"step\": \"2\",\n        }\n    \n        v6_rr_attr = {\n            \"address\": \"4000::1\",\n            \"prefix\": \"64\",\n            \"count\": \"500\",\n            \"step\": \"3\",\n        }\n    \n        (port,) = config.ports.port(name=\"tx\", location=utils.settings.ports[0])\n    \n        config.options.port_options.location_preemption = True\n        ly = config.layer1.layer1()[-1]\n        ly.name = \"ly\"\n        ly.port_names = [port.name]\n        ly.ieee_media_defaults = False\n        ly.auto_negotiate = False\n        ly.speed = utils.settings.speed\n        ly.media = utils.settings.media\n    \n        (device,) = config.devices.device(name=\"device\")\n    \n        # device config\n        eth = device.ethernets.add()\n        eth.name = \"eth\"\n        eth.connection.port_name = port.name\n        eth.mac = \"00:00:00:00:00:11\"\n        ipv4 = eth.ipv4_addresses.add()\n        ipv4.name = \"ipv4\"\n        ipv4.address = \"21.1.1.1\"\n        ipv4.prefix = 24\n        ipv4.gateway = \"21.1.1.2\"\n        bgpv4 = device.bgp\n        bgpv4.router_id = \"192.0.0.1\"\n        bgpv4_int = bgpv4.ipv4_interfaces.add()\n        bgpv4_int.ipv4_name = ipv4.name\n        bgpv4_peer = bgpv4_int.peers.add()\n        bgpv4_peer.name = \"rx_bgpv4\"\n        bgpv4_peer.as_type = \"ebgp\"\n        bgpv4_peer.peer_address = \"22.1.1.1\"\n        bgpv4_peer.as_number = 65200\n    \n        rr = bgpv4_peer.v4_routes.add(name=\"rr\")\n        rr.addresses.add(\n            address=v4_rr_attr[\"address\"],\n            prefix=int(v4_rr_attr[\"prefix\"]),\n            count=int(v4_rr_attr[\"count\"]),\n            step=int(v4_rr_attr[\"step\"]),\n        )\n    \n        # Community\n        manual_as_community = rr.communities.add()\n        manual_as_community.type = manual_as_community.MANUAL_AS_NUMBER\n        manual_as_community.as_number = int(community.split(\":\")[0])\n        manual_as_community.as_custom = int(community.split(\":\")[1])\n    \n        # AS Path\n        as_path = rr.as_path\n        as_path_segment = as_path.segments.add()\n        as_path_segment.type = as_path_segment.AS_SEQ\n        as_path_segment.as_numbers = aspaths\n    \n        # MED\n        rr.advanced.multi_exit_discriminator = med\n    \n        # Origin\n        rr.advanced.origin = rr.advanced.EGP\n    \n        # v6\n        ipv6 = eth.ipv6_addresses.add()\n        ipv6.name = \"ipv6\"\n        ipv6.address = \"2000::1\"\n        ipv6.prefix = 64\n        ipv6.gateway = \"2000::2\"\n        bgpv6 = device.bgp\n        bgpv6.router_id = \"192.0.0.1\"\n        bgpv6_int = bgpv6.ipv6_interfaces.add()\n        bgpv6_int.ipv6_name = ipv6.name\n        bgp6_peer = bgpv6_int.peers.add()\n        bgp6_peer.name = \"rx_bgpv6\"\n        bgp6_peer.as_type = \"ebgp\"\n        bgp6_peer.peer_address = \"2000::2\"\n        bgp6_peer.as_number = 65200\n    \n        rrv6 = bgp6_peer.v6_routes.add(name=\"rrv6\")\n        rrv6.addresses.add(\n            address=v6_rr_attr[\"address\"],\n            prefix=int(v6_rr_attr[\"prefix\"]),\n            count=int(v6_rr_attr[\"count\"]),\n            step=int(v6_rr_attr[\"step\"]),\n        )\n    \n        # Community\n        manual_as_community = rrv6.communities.add()\n        manual_as_community.type = manual_as_community.MANUAL_AS_NUMBER\n        manual_as_community.as_number = int(community.split(\":\")[0])\n        manual_as_community.as_custom = int(community.split(\":\")[1])\n    \n        # As Path\n        as_path = rrv6.as_path\n        as_path_segment = as_path.segments.add()\n        as_path_segment.type = as_path_segment.AS_SEQ\n        as_path_segment.as_numbers = aspaths\n    \n        # MED\n        rrv6.advanced.multi_exit_discriminator = med\n    \n        # Origin\n        rrv6.advanced.origin = rr.advanced.EGP\n    \n>       api.set_config(config)\n\ntests/bgp/test_bgp_attributes.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b3767f10>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp.test_bgp_attributes"},{"name":"package","value":"bgp.test_bgp_attributes"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":179,"unknown":0,"total":181},"items":[{"uid":"544a2f4bda1b789","status":"passed","time":{"start":1752836398951,"stop":1752836423692,"duration":24741}},{"uid":"83ba59969ae90f68","status":"passed","time":{"start":1752760243902,"stop":1752760271348,"duration":27446}},{"uid":"8470de3ae54b54ba","status":"passed","time":{"start":1752244885705,"stop":1752244915595,"duration":29890}},{"uid":"846de38367c4179b","status":"passed","time":{"start":1752145840252,"stop":1752145870045,"duration":29793}},{"uid":"81026b58572e1de","status":"passed","time":{"start":1751479010972,"stop":1751479035915,"duration":24943}},{"uid":"c506d0a353f1946a","status":"passed","time":{"start":1751472402834,"stop":1751472433685,"duration":30851}},{"uid":"91b58514942b7485","status":"passed","time":{"start":1751283215057,"stop":1751283249577,"duration":34520}},{"uid":"bb77ed0a1fc9d4af","status":"passed","time":{"start":1751276144532,"stop":1751276169041,"duration":24509}},{"uid":"b078d214299ac688","status":"passed","time":{"start":1751231642336,"stop":1751231669870,"duration":27534}},{"uid":"c4e3834ef998e27d","status":"passed","time":{"start":1750985352305,"stop":1750985380660,"duration":28355}},{"uid":"ff255d63841ecec0","status":"passed","time":{"start":1750836697285,"stop":1750836721938,"duration":24653}},{"uid":"7b93efa75021d14d","status":"passed","time":{"start":1750656827226,"stop":1750656851487,"duration":24261}},{"uid":"a091b4d986464349","status":"passed","time":{"start":1750246239210,"stop":1750246263733,"duration":24523}},{"uid":"254d26e2a5e6551b","status":"passed","time":{"start":1750239203710,"stop":1750239235468,"duration":31758}},{"uid":"f17b5f9e948b0610","status":"passed","time":{"start":1749770085540,"stop":1749770117907,"duration":32367}},{"uid":"4bc71c20f75dc397","status":"passed","time":{"start":1749546564693,"stop":1749546594246,"duration":29553}},{"uid":"142a4a0ea34ddc97","status":"passed","time":{"start":1748968328989,"stop":1748968353711,"duration":24722}},{"uid":"d140b4aa767538c8","status":"passed","time":{"start":1748929822995,"stop":1748929853361,"duration":30366}},{"uid":"e1a34793fa8ff7d0","status":"passed","time":{"start":1748864245704,"stop":1748864270284,"duration":24580}},{"uid":"13dc4e92c0707599","status":"passed","time":{"start":1748857106711,"stop":1748857132678,"duration":25967}}]},"tags":[]},"source":"a29c226a038efe04.json","parameterValues":[]}
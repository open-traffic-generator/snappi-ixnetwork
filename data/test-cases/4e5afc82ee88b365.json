{"uid":"4e5afc82ee88b365","name":"test_udp_header","historyId":"pytest:udp.test_udp_header#test_udp_header","time":{"start":1753368506584,"stop":1753368506624,"duration":40},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b26c21b0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b3627e50>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nb2b_raw_config_vports = <snappi.snappi.Config object at 0x7f21b26c21b0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\ntx_vport = <snappi.snappi.Port object at 0x7f21b26c1940>\nrx_vport = <snappi.snappi.Port object at 0x7f21b26c3ec0>\n\n    def test_udp_header(api, b2b_raw_config_vports, utils, tx_vport, rx_vport):\n        \"\"\"\n        Configure three raw udp flows with ,\n        - fixed src and dst Port address, length, checksum\n        - list pattern src and dst Port address, length, checksum\n        - counter pattern src and dst Port address, length, checksum\n        Validate,\n        - Fetch the header config via restpy and validate\n        against expected\n        \"\"\"\n        # fixed\n        src_port = 3000\n        dst_port = 4000\n        length = 38\n        packets = 1000\n        size = 74\n        flow = b2b_raw_config_vports.flows[0]\n    \n        flow.size.fixed = size\n        flow.duration.fixed_packets.packets = packets\n        flow.rate.percentage = 10\n    \n        eth, ip, udp = flow.packet.ethernet().ipv4().udp()\n    \n        eth.src.value = \"00:0c:29:1d:10:67\"\n        eth.dst.value = \"00:0c:29:1d:10:71\"\n    \n        ip.src.value = \"10.10.10.1\"\n        ip.dst.value = \"10.10.10.2\"\n    \n        udp.src_port.value = src_port\n        udp.dst_port.value = dst_port\n        udp.length.value = length\n    \n        # list\n        flow2 = b2b_raw_config_vports.flows.flow(name=\"f2\")[-1]\n        flow2.tx_rx.port.tx_name = tx_vport.name\n        flow2.tx_rx.port.rx_name = rx_vport.name\n    \n        src_port_lst = [3000, 3001]\n        dst_port_lst = [4000, 4001]\n        length_lst = [35, 36]\n        size = 74\n        packets = 100\n    \n        flow2.size.fixed = size\n        flow2.duration.fixed_packets.packets = packets\n        flow2.rate.percentage = 10\n    \n        eth, ip, udp = flow2.packet.ethernet().ipv4().udp()\n    \n        eth.src.value = \"00:0c:29:1d:10:67\"\n        eth.dst.value = \"00:0c:29:1d:10:71\"\n    \n        ip.src.value = \"10.10.10.1\"\n        ip.dst.value = \"10.10.10.2\"\n    \n        udp.src_port.values = src_port_lst\n        udp.dst_port.values = dst_port_lst\n        udp.length.values = length_lst\n    \n        # counter\n        flow3 = b2b_raw_config_vports.flows.flow(name=\"f3\")[-1]\n        flow3.tx_rx.port.tx_name = tx_vport.name\n        flow3.tx_rx.port.rx_name = rx_vport.name\n    \n        src_port_cnt = (5000, 2, 10)\n        dst_port_cnt = (6000, 2, 10)\n        length_cnt = (35, 1, 2)\n        packets = 100\n        size = 74\n    \n        flow3.size.fixed = size\n        flow3.duration.fixed_packets.packets = packets\n        flow3.rate.percentage = 10\n    \n        eth, ip, udp = flow3.packet.ethernet().ipv4().udp()\n    \n        eth.src.value = \"00:0c:29:1d:10:67\"\n        eth.dst.value = \"00:0c:29:1d:10:71\"\n    \n        ip.src.value = \"10.10.10.1\"\n        ip.dst.value = \"10.10.10.2\"\n    \n        udp.src_port.increment.start = src_port_cnt[0]\n        udp.src_port.increment.step = src_port_cnt[1]\n        udp.src_port.increment.count = src_port_cnt[2]\n    \n        udp.dst_port.decrement.start = dst_port_cnt[0]\n        udp.dst_port.decrement.step = dst_port_cnt[1]\n        udp.dst_port.decrement.count = dst_port_cnt[2]\n    \n        udp.length.increment.start = length_cnt[0]\n        udp.length.increment.step = length_cnt[1]\n        udp.length.increment.count = length_cnt[2]\n    \n>       api.set_config(b2b_raw_config_vports)\n\ntests/udp/test_udp_header.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b26c21b0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"udp.test_udp_header"},{"name":"package","value":"udp.test_udp_header"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":172,"unknown":0,"total":177},"items":[{"uid":"5f8ecbd7a7c1d95e","status":"passed","time":{"start":1752836398951,"stop":1752836409128,"duration":10177}},{"uid":"1fc56f46121ce612","status":"passed","time":{"start":1752760243902,"stop":1752760253966,"duration":10064}},{"uid":"16dbcba93ff2ff5","status":"passed","time":{"start":1752244885705,"stop":1752244895758,"duration":10053}},{"uid":"7debf02c71fc2329","status":"passed","time":{"start":1752145840252,"stop":1752145850372,"duration":10120}},{"uid":"186f285f9442b50f","status":"passed","time":{"start":1751479010972,"stop":1751479021150,"duration":10178}},{"uid":"ac393b1d9c4b868c","status":"passed","time":{"start":1751472402834,"stop":1751472413776,"duration":10942}},{"uid":"205595f678c3b921","status":"passed","time":{"start":1751283215057,"stop":1751283225155,"duration":10098}},{"uid":"25767476cc9658ad","status":"passed","time":{"start":1751276144532,"stop":1751276154512,"duration":9980}},{"uid":"1179d14c783728c5","status":"passed","time":{"start":1751231642336,"stop":1751231652949,"duration":10613}},{"uid":"a565aae0ac51b549","status":"passed","time":{"start":1750985352305,"stop":1750985362427,"duration":10122}},{"uid":"9eb9e3e14538e71a","status":"passed","time":{"start":1750836697285,"stop":1750836707431,"duration":10146}},{"uid":"613d36381614041a","status":"passed","time":{"start":1750656827226,"stop":1750656837673,"duration":10447}},{"uid":"c3f87e87ec431e77","status":"passed","time":{"start":1750246239210,"stop":1750246249386,"duration":10176}},{"uid":"dfa86dc7b82ac234","status":"passed","time":{"start":1750239203710,"stop":1750239216060,"duration":12350}},{"uid":"5ae4765669394dd7","status":"passed","time":{"start":1749770085540,"stop":1749770095541,"duration":10001}},{"uid":"342aa8ac50188495","status":"passed","time":{"start":1749546564693,"stop":1749546574772,"duration":10079}},{"uid":"8253330792fccbe7","status":"passed","time":{"start":1748968328989,"stop":1748968339474,"duration":10485}},{"uid":"a955db38481a01eb","status":"passed","time":{"start":1748929822995,"stop":1748929833125,"duration":10130}},{"uid":"6bd412632f1cc05f","status":"passed","time":{"start":1748864245704,"stop":1748864255905,"duration":10201}},{"uid":"8c69e8e4fd62e2fb","status":"passed","time":{"start":1748857106711,"stop":1748857116900,"duration":10189}}]},"tags":[]},"source":"4e5afc82ee88b365.json","parameterValues":[]}
{"uid":"cf1b911ad13df2bc","name":"test_ipv4_fields","historyId":"pytest:ipv4.test_ipv4_fields#test_ipv4_fields","time":{"start":1745687367675,"stop":1745687372998,"duration":5323},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 880, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 535, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 689, in create_traffic\n    for snappi_eotr in config.egress_only_tracking:\n 'Config' object has no attribute 'egress_only_tracking'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f18aa6907f0>\nconfig = <snappi.snappi.Config object at 0x7f18acc43dd0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:364: in config_ixnetwork\n    self.traffic_item.config()\nsnappi_ixnetwork/trafficitem.py:880: in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\nsnappi_ixnetwork/trafficitem.py:535: in get_ixn_config\n    tr = self.create_traffic(config)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7f18aa47f1f0>\nconfig = <snappi.snappi.Config object at 0x7f18acc43dd0>\n\n    def create_traffic(self, config):\n        self.logger.debug(\"Creating Traffic\")\n        flows = config.flows\n        tr = {\"xpath\": \"/traffic\", \"trafficItem\": []}\n        ports = self.get_ports_encap(config)\n        devices = self.get_device_info(config)\n        for index, flow in enumerate(flows):\n            flow_name = flow._properties.get(\"name\")\n            self.logger.debug(\"Creating Traffic Item %s\" % flow_name)\n            if flow_name is None:\n                raise Exception(\"name shall not be null for flows\")\n            if flow._properties.get(\"tx_rx\") is None:\n                msg = (\n                    \"Please configure the flow endpoint\"\n                    \"for flow indexed at %s\" % index\n                )\n                raise Exception(msg)\n            self._endpoint_validation(flow)\n            if flow.tx_rx.choice is None:\n                msg = \"Flow endpoint needs to be either port or device\"\n                raise Exception(msg)\n    \n            tr_xpath = \"/traffic/trafficItem[%d]\" % self.traffic_index\n            tr[\"trafficItem\"].append(\n                {\n                    \"xpath\": tr_xpath,\n                    \"name\": \"%s\" % flow.name,\n                    \"srcDestMesh\": self._get_mesh_type(flow),\n                }\n            )\n    \n            tr[\"trafficItem\"][-1][\"endpointSet\"] = [\n                {\n                    \"xpath\": tr[\"trafficItem\"][-1][\"xpath\"]\n                    + \"/endpointSet[1]\",\n                }\n            ]\n            if flow.tx_rx.choice == \"port\":\n                tr_type = \"raw\"\n                ep = getattr(flow.tx_rx, \"port\")\n                tx_objs = [\"%s/protocols\" % ports.get(ep.tx_name)]\n                rx_objs = [\"%s/protocols\" % ports.get(ep.rx_name)]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = [\n                    o for o in tx_objs\n                ]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"destinations\"] = [\n                    o for o in rx_objs\n                ]\n            else:\n                ep = getattr(flow.tx_rx, \"device\")\n                tr_type = devices[ep.tx_names[0]][\"type\"]\n                source = []\n                destinations = []\n                scalable_sources = []\n                scalable_destinations = []\n                self._gen_dev_endpoint(\n                    devices, ep.tx_names, source, scalable_sources\n                )\n                self._gen_dev_endpoint(\n                    devices, ep.rx_names, destinations, scalable_destinations\n                )\n                if len(source) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = source\n                if len(destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"destinations\"\n                    ] = destinations\n                if len(scalable_sources) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableSources\"\n                    ] = scalable_sources\n                if len(scalable_destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableDestinations\"\n                    ] = scalable_destinations\n    \n            tr[\"trafficItem\"][-1][\"trafficType\"] = tr_type\n            if tr_type == \"raw\":\n                tr[\"trafficItem\"][-1][\"configElement\"] = self.config_raw_stack(\n                    tr_xpath, self._flows_packet[index]\n                )\n            self.traffic_index += 1\n            self.logger.debug(\n                \"Flow %s converted to %s\" % (flow_name, tr[\"trafficItem\"][-1])\n            )\n    \n        # egress only tracking\n        tr[\"egressOnlyTracking\"] = []\n>       for snappi_eotr in config.egress_only_tracking:\nE       AttributeError: 'Config' object has no attribute 'egress_only_tracking'\n\nsnappi_ixnetwork/trafficitem.py:689: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f18aa6907f0>\nb2b_raw_config_vports = <snappi.snappi.Config object at 0x7f18acc43dd0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\ntx_vport = <snappi.snappi.Port object at 0x7f18acc428e0>\nrx_vport = <snappi.snappi.Port object at 0x7f18aa2b8950>\n\n    def test_ipv4_fields(api, b2b_raw_config_vports, utils, tx_vport, rx_vport):\n        \"\"\"\n        Configure three raw raw IPv4 flows with ,\n        - fixed pattern for the fields\n          header len, total len, identification, reserved, don't fragment,\n          more fragment, fragment offset, time to live, protocol, header checksum\n        - list pattern for the fields\n          header len, total len, identification, reserved, don't fragment,\n          more fragment, fragment offset, time to live, protocol, header checksum\n        - counter pattern for the fields\n          header len, total len, identification, reserved, don't fragment,\n          more fragment, fragment offset, time to live, protocol, header checksum\n    \n        Validate,\n        - Fetch the IPv4 header config via restpy and validate\n          against expected\n        \"\"\"\n        # fixed\n        flow1 = b2b_raw_config_vports.flows[0]\n        src = \"00:0C:29:E3:53:EA\"\n        dst = \"00:0C:29:E3:53:F4\"\n    \n        src_ip = \"10.1.1.1\"\n        dst_ip = \"20.1.1.1\"\n    \n        flow1.packet.ethernet().ipv4()\n        eth = flow1.packet[0]\n        ipv4 = flow1.packet[1]\n        eth.src.value = src\n        eth.dst.value = dst\n        ipv4.src.value = src_ip\n        ipv4.dst.value = dst_ip\n        ipv4.header_length.value = 5\n        ipv4.total_length.value = 100\n        ipv4.identification.value = 1234\n        ipv4.reserved.value = 1\n        ipv4.dont_fragment.value = 1\n        ipv4.more_fragments.value = 1\n        ipv4.fragment_offset.value = 0\n        ipv4.time_to_live.value = 50\n        ipv4.protocol.value = 200\n    \n        # list\n        flow2 = b2b_raw_config_vports.flows.flow(name=\"f2\")[-1]\n        flow2.tx_rx.port.tx_name = tx_vport.name\n        flow2.tx_rx.port.rx_name = rx_vport.name\n        src = \"00:0C:29:E3:53:EA\"\n        dst = \"00:0C:29:E3:53:F4\"\n    \n        src_ip = \"10.1.1.1\"\n        dst_ip = \"20.1.1.1\"\n    \n        from random import Random\n    \n        r = Random()\n    \n        header_length = [r.randint(5, 15) for i in range(10)]\n        total_length = [r.randint(0, 65535) for i in range(10)]\n        identification = [r.randint(0, 65535) for i in range(10)]\n        reserved = [r.randint(0, 1) for i in range(10)]\n        dont_fragment = [r.randint(0, 1) for i in range(10)]\n        more_fragments = [r.randint(0, 1) for i in range(10)]\n        fragment_offset = [r.randint(0, 31) for i in range(10)]\n        time_to_live = [r.randint(0, 255) for i in range(10)]\n        protocol = [r.randint(0, 255) for i in range(10)]\n        flow2.packet.ethernet().ipv4()\n        eth = flow2.packet[0]\n        ipv4 = flow2.packet[1]\n        eth.src.value = src\n        eth.dst.value = dst\n        ipv4.src.value = src_ip\n        ipv4.dst.value = dst_ip\n        ipv4.header_length.values = header_length\n        ipv4.total_length.values = total_length\n        ipv4.identification.values = identification\n        ipv4.reserved.values = reserved\n        ipv4.dont_fragment.values = dont_fragment\n        ipv4.more_fragments.values = more_fragments\n        ipv4.fragment_offset.values = fragment_offset\n        ipv4.time_to_live.values = time_to_live\n        ipv4.protocol.values = protocol\n    \n        # counter\n        flow3 = b2b_raw_config_vports.flows.flow(name=\"f3\")[-1]\n        flow3.tx_rx.port.tx_name = tx_vport.name\n        flow3.tx_rx.port.rx_name = rx_vport.name\n        fields = [\n            \"header_length\",\n            \"total_length\",\n            \"identification\",\n            # \"reserved\",\n            # \"dont_fragment\",\n            # \"more_fragments\",\n            \"fragment_offset\",\n            \"time_to_live\",\n            \"protocol\",\n        ]\n        start = [5, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        step = [1, 2, 1000, 1, 1, 1, 10, 10, 1, 10]\n        count = [11, 10000, 65, 10, 10, 10, 1000, 10000, 1000, 1000]\n    \n        flow3.packet.ethernet().ipv4()\n        eth = flow3.packet[0]\n        ipv4 = flow3.packet[-1]\n        eth.src.value = \"ab:ab:ab:ab:bc:bc\"\n        eth.dst.value = \"bc:bc:bc:bc:ab:ab\"\n        ipv4.src.value = \"10.1.1.1\"\n        ipv4.dst.value = \"10.1.1.2\"\n        for i, field in enumerate(fields):\n            f_obj = getattr(ipv4, field)\n            f_obj.increment.start = start[i]\n            f_obj.increment.step = step[i]\n            f_obj.increment.count = count[i]\n    \n>       api.set_config(b2b_raw_config_vports)\n\ntests/ipv4/test_ipv4_fields.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f18aa6907f0>\nconfig = <snappi.snappi.Config object at 0x7f18acc43dd0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\nE               self.traffic_item.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 880, in config\nE               ixn_traffic_item = self.get_ixn_config(self._config)[0]\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 535, in get_ixn_config\nE               tr = self.create_traffic(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 689, in create_traffic\nE               for snappi_eotr in config.egress_only_tracking:\nE            'Config' object has no attribute 'egress_only_tracking'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Config validation 0.009s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Ports configuration 0.295s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Captures configuration 0.366s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Location configuration 0.507s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Lag Configuration 0.088s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Convert device config : 0.272s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Push IxNetwork device config : 0.087s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Devices configuration 0.451s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Flows configuration 2.694s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":14,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"ipv4.test_ipv4_fields"},{"name":"package","value":"ipv4.test_ipv4_fields"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":89,"unknown":0,"total":91},"items":[{"uid":"bd010e0df00d54bd","status":"passed","time":{"start":1745474974403,"stop":1745474986731,"duration":12328}},{"uid":"6eca7065dcee50b0","status":"passed","time":{"start":1745302321831,"stop":1745302332408,"duration":10577}},{"uid":"885ce14a0e3e0b80","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\n    for snappi_eotr in config.egress_only_trackings:\n 'Config' object has no attribute 'egress_only_trackings'","time":{"start":1744642070405,"stop":1744642076606,"duration":6201}},{"uid":"5fd7b03b01cf3356","status":"passed","time":{"start":1744628606357,"stop":1744628615064,"duration":8707}},{"uid":"25d9cef81423628f","status":"passed","time":{"start":1744607503134,"stop":1744607512812,"duration":9678}},{"uid":"a5463c97c8a1843e","status":"passed","time":{"start":1744319569642,"stop":1744319579901,"duration":10259}},{"uid":"9c76cfca5aa181c","status":"passed","time":{"start":1744308828836,"stop":1744308838361,"duration":9525}},{"uid":"3f60a90de4cf8b39","status":"passed","time":{"start":1744118178111,"stop":1744118188027,"duration":9916}},{"uid":"396a5631ead841cd","status":"passed","time":{"start":1744106575909,"stop":1744106585717,"duration":9808}},{"uid":"89985791157d76f6","status":"passed","time":{"start":1743796899201,"stop":1743796910432,"duration":11231}},{"uid":"3bf167c04205b2d6","status":"passed","time":{"start":1743756339018,"stop":1743756348287,"duration":9269}},{"uid":"a3307fd66bd9df8","status":"passed","time":{"start":1743749241780,"stop":1743749251287,"duration":9507}},{"uid":"1d2fa5bfce94f6c1","status":"passed","time":{"start":1743703353732,"stop":1743703365442,"duration":11710}},{"uid":"e6adcf507428f811","status":"passed","time":{"start":1743696488928,"stop":1743696498515,"duration":9587}},{"uid":"4c8e7646a624fd3c","status":"passed","time":{"start":1743689614468,"stop":1743689624064,"duration":9596}},{"uid":"5fd09b518ea68474","status":"passed","time":{"start":1743655642521,"stop":1743655653726,"duration":11205}},{"uid":"ce8f7d7a86fbafc5","status":"passed","time":{"start":1743167009876,"stop":1743167022608,"duration":12732}},{"uid":"c36c3bf03fca859","status":"passed","time":{"start":1743158796170,"stop":1743158805947,"duration":9777}},{"uid":"2575f68612da3570","status":"passed","time":{"start":1743154377859,"stop":1743154387454,"duration":9595}},{"uid":"a7447c4d6cc77d03","status":"passed","time":{"start":1743142356248,"stop":1743142365963,"duration":9715}}]},"tags":[]},"source":"cf1b911ad13df2bc.json","parameterValues":[]}
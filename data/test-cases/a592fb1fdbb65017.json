{"uid":"a592fb1fdbb65017","name":"test_global_pause_header","historyId":"pytest:uhd.test_uhd_mock#test_global_pause_header","time":{"start":1744642070405,"stop":1744642070410,"duration":5},"status":"failed","statusMessage":"AttributeError: 'Config' object has no attribute 'egress_only_trackings'","statusTrace":"def test_global_pause_header():\n        config = snappi.Api().config()\n        api = ixn_api()\n        api._ixnetwork = lambda x: None\n        api._ixnetwork.Globals = lambda y: None\n        api._ixnetwork.Globals.ProductVersion = \"UHD\"\n        tr_obj = TrafficItem(api)\n        ports = {\"p1\": \"/vport[1]\", \"p2\": \"/vport[2]\"}\n        tr_obj.get_ports_encap = MagicMock(return_value=ports)\n        tr_obj.get_device_encap = MagicMock(return_value={})\n        f1 = config.flows.flow(name=\"f1\")[-1]\n        f1.tx_rx.port.tx_name = \"p1\"\n        f1.tx_rx.port.rx_name = \"p2\"\n        f1.packet.ethernetpause()\n        tr_obj.copy_flow_packet(config)\n>       tr_raw = tr_obj.create_traffic(config)\n\ntests/uhd/test_uhd_mock.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7fbfb0e5a560>\nconfig = <snappi.snappi.Config object at 0x7fbfb215dfd0>\n\n    def create_traffic(self, config):\n        self.logger.debug(\"Creating Traffic\")\n        flows = config.flows\n        tr = {\"xpath\": \"/traffic\", \"trafficItem\": []}\n        ports = self.get_ports_encap(config)\n        devices = self.get_device_info(config)\n        for index, flow in enumerate(flows):\n            flow_name = flow._properties.get(\"name\")\n            self.logger.debug(\"Creating Traffic Item %s\" % flow_name)\n            if flow_name is None:\n                raise Exception(\"name shall not be null for flows\")\n            if flow._properties.get(\"tx_rx\") is None:\n                msg = (\n                    \"Please configure the flow endpoint\"\n                    \"for flow indexed at %s\" % index\n                )\n                raise Exception(msg)\n            self._endpoint_validation(flow)\n            if flow.tx_rx.choice is None:\n                msg = \"Flow endpoint needs to be either port or device\"\n                raise Exception(msg)\n    \n            tr_xpath = \"/traffic/trafficItem[%d]\" % self.traffic_index\n            tr[\"trafficItem\"].append(\n                {\n                    \"xpath\": tr_xpath,\n                    \"name\": \"%s\" % flow.name,\n                    \"srcDestMesh\": self._get_mesh_type(flow),\n                }\n            )\n    \n            tr[\"trafficItem\"][-1][\"endpointSet\"] = [\n                {\n                    \"xpath\": tr[\"trafficItem\"][-1][\"xpath\"]\n                    + \"/endpointSet[1]\",\n                }\n            ]\n            if flow.tx_rx.choice == \"port\":\n                tr_type = \"raw\"\n                ep = getattr(flow.tx_rx, \"port\")\n                tx_objs = [\"%s/protocols\" % ports.get(ep.tx_name)]\n                rx_objs = [\"%s/protocols\" % ports.get(ep.rx_name)]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = [\n                    o for o in tx_objs\n                ]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"destinations\"] = [\n                    o for o in rx_objs\n                ]\n            else:\n                ep = getattr(flow.tx_rx, \"device\")\n                tr_type = devices[ep.tx_names[0]][\"type\"]\n                source = []\n                destinations = []\n                scalable_sources = []\n                scalable_destinations = []\n                self._gen_dev_endpoint(\n                    devices, ep.tx_names, source, scalable_sources\n                )\n                self._gen_dev_endpoint(\n                    devices, ep.rx_names, destinations, scalable_destinations\n                )\n                if len(source) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = source\n                if len(destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"destinations\"\n                    ] = destinations\n                if len(scalable_sources) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableSources\"\n                    ] = scalable_sources\n                if len(scalable_destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableDestinations\"\n                    ] = scalable_destinations\n    \n            tr[\"trafficItem\"][-1][\"trafficType\"] = tr_type\n            if tr_type == \"raw\":\n                tr[\"trafficItem\"][-1][\"configElement\"] = self.config_raw_stack(\n                    tr_xpath, self._flows_packet[index]\n                )\n            self.traffic_index += 1\n            self.logger.debug(\n                \"Flow %s converted to %s\" % (flow_name, tr[\"trafficItem\"][-1])\n            )\n    \n        # egress only tracking\n        tr[\"egressOnlyTracking\"] = []\n>       for snappi_eotr in config.egress_only_trackings:\nE       AttributeError: 'Config' object has no attribute 'egress_only_trackings'\n\nsnappi_ixnetwork/trafficitem.py:688: AttributeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"uhd.test_uhd_mock"},{"name":"package","value":"uhd.test_uhd_mock"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":87,"unknown":0,"total":88},"items":[{"uid":"fa72ce64b0f9e2f9","status":"passed","time":{"start":1744628606357,"stop":1744628606362,"duration":5}},{"uid":"d9f20429137b1457","status":"passed","time":{"start":1744607503134,"stop":1744607503139,"duration":5}},{"uid":"b7f64b8075c94bd3","status":"passed","time":{"start":1744319569642,"stop":1744319569647,"duration":5}},{"uid":"771e71d40f4448e","status":"passed","time":{"start":1744308828836,"stop":1744308828841,"duration":5}},{"uid":"240ca07c8acdb84f","status":"passed","time":{"start":1744118178111,"stop":1744118178116,"duration":5}},{"uid":"eda6a63896dc4864","status":"passed","time":{"start":1744106575909,"stop":1744106575914,"duration":5}},{"uid":"259e9bab57e4ac9a","status":"passed","time":{"start":1743796899201,"stop":1743796899206,"duration":5}},{"uid":"69240b0687047a82","status":"passed","time":{"start":1743756339018,"stop":1743756339023,"duration":5}},{"uid":"2d9dcb5e4f1f4a7e","status":"passed","time":{"start":1743749241780,"stop":1743749241785,"duration":5}},{"uid":"b2774bea6ebb611b","status":"passed","time":{"start":1743703353732,"stop":1743703353736,"duration":4}},{"uid":"e1c9330e7312e239","status":"passed","time":{"start":1743696488928,"stop":1743696488933,"duration":5}},{"uid":"3be66146add3d5f4","status":"passed","time":{"start":1743689614468,"stop":1743689614473,"duration":5}},{"uid":"e4b5a4e854ff277f","status":"passed","time":{"start":1743655642521,"stop":1743655642527,"duration":6}},{"uid":"b894f39be50359a3","status":"passed","time":{"start":1743167009876,"stop":1743167009881,"duration":5}},{"uid":"b4ffbd69d92a0c1","status":"passed","time":{"start":1743158796170,"stop":1743158796176,"duration":6}},{"uid":"5c10d6c4bca02a7a","status":"passed","time":{"start":1743154377859,"stop":1743154377865,"duration":6}},{"uid":"27d314aaeb3f852f","status":"passed","time":{"start":1743142356248,"stop":1743142356254,"duration":6}},{"uid":"117964955cb739a4","status":"passed","time":{"start":1743134333235,"stop":1743134333241,"duration":6}},{"uid":"ed3229f1cf76bc67","status":"passed","time":{"start":1743107933073,"stop":1743107933078,"duration":5}},{"uid":"1755ca820f5f7890","status":"passed","time":{"start":1743101127011,"stop":1743101127016,"duration":5}}]},"tags":[]},"source":"a592fb1fdbb65017.json","parameterValues":[]}
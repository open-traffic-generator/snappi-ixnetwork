{"uid":"38748ac483c20267","name":"test_vxlan_compact","historyId":"pytest:vxlan.test_vxlan_compact#test_vxlan_compact","time":{"start":1753368506584,"stop":1753368506684,"duration":100},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b2687f10>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b366b130>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_vxlan_compact(api, utils):\n        count = 4\n        config = api.config()\n    \n        edge1_macs = get_macs(\"001801000011\", count)\n        edge2_macs = get_macs(\"001601000011\", count)\n    \n        p1, p2 = config.ports.port(\n            name=\"tx\", location=utils.settings.ports[0]\n        ).port(name=\"rx\", location=utils.settings.ports[1])\n    \n        d1, d2 = config.devices.device(name=\"d1\").device(name=\"d2\")\n    \n        api.enable_scaling(True)\n    \n        e1, e2 = d1.ethernets.add(), d2.ethernets.add()\n        e1.connection.port_name, e2.connection.port_name = p1.name, p2.name\n        e1.name, e2.name = \"e1\", \"e2\"\n        e1.mac, e2.mac = \"00:01:00:00:00:01\", \"00:01:00:00:00:02\"\n    \n        ip1, ip2 = e1.ipv4_addresses.add(), e2.ipv4_addresses.add()\n        ip1.name, ip2.name = \"ip_d1\", \"ip_d2\"\n    \n        ip1.address, ip2.address = \"10.10.10.1\", \"10.10.10.2\"\n        ip1.gateway, ip2.gateway = \"10.10.10.2\", \"10.10.10.1\"\n    \n        bgp1, bgp2 = d1.bgp, d2.bgp\n        bgp1.router_id, bgp2.router_id = \"10.10.10.1\", \"10.10.10.2\"\n        bgp1_ipv4 = bgp1.ipv4_interfaces.add()\n        bgp2_ipv4 = bgp2.ipv4_interfaces.add()\n    \n        bgp1_ipv4.ipv4_name, bgp2_ipv4.ipv4_name = ip1.name, ip2.name\n        bgp1_peer, bgp2_peer = bgp1_ipv4.peers.add(), bgp2_ipv4.peers.add()\n        bgp1_peer.name, bgp2_peer.name = \"bgp_router1\", \"bgp_router2\"\n    \n        bgp1_peer.peer_address, bgp2_peer.peer_address = \"10.10.10.2\", \"10.10.10.1\"\n        bgp1_peer.as_type, bgp2_peer.as_type = \"ebgp\", \"ebgp\"\n        bgp1_peer.as_number, bgp2_peer.as_number = 100, 200\n    \n        # Create & advertise loopback under bgp in d1 & d2\n        d1_l1 = d1.ipv4_loopbacks.add()\n        d1_l1.name = \"d1_loopback1\"\n        d1_l1.eth_name = \"e1\"\n        d1_l1.address = \"1.1.1.1\"\n    \n        bgp1_l1 = bgp1_peer.v4_routes.add(name=\"bgp_l1\")\n        bgp1_l1.addresses.add(address=\"1.1.1.1\", prefix=32)\n    \n        d2_l1 = d2.ipv4_loopbacks.add()\n        d2_l1.name = \"d2_loopback1\"\n        d2_l1.eth_name = \"e2\"\n        d2_l1.address = \"2.2.2.2\"\n    \n        bgp2_l1 = bgp2_peer.v4_routes.add(name=\"bgp2_l1\")\n        bgp2_l1.addresses.add(address=\"2.2.2.2\", prefix=32)\n    \n        # Create vxlan on d1\n        d1_vxlan = d1.vxlan.v4_tunnels.add()\n    \n        d1_vxlan.vni = 1000\n        d1_vxlan.source_interface = d1_l1.name\n        d1_vxlan.name = \"d1_vxlan\"\n    \n        # unicast communication\n        vtep = d1_vxlan.destination_ip_mode.unicast.vteps.add()\n        vtep.remote_vtep_address = \"2.2.2.2\"\n        for i in range(1, count + 1):\n            vtep.arp_suppression_cache.add(edge2_macs[i], \"100.1.{}.2\".format(i))\n    \n        # Create vxlan on d2\n        d2_vxlan = d2.vxlan.v4_tunnels.add()\n    \n        d2_vxlan.vni = 1000\n        d2_vxlan.source_interface = d2_l1.name\n        d2_vxlan.name = \"d2_vxlan\"\n    \n        # unicast communication\n        vtep = d2_vxlan.destination_ip_mode.unicast.vteps.add()\n        vtep.remote_vtep_address = \"1.1.1.1\"\n        for i in range(1, count + 1):\n            vtep.arp_suppression_cache.add(edge1_macs[i], \"100.1.{}.1\".format(i))\n    \n        for i in range(1, count + 1):\n            edge1_d = config.devices.device(name=\"edge1_d{}\".format(i))[-1]\n            edge2_d = config.devices.device(name=\"edge2_d{}\".format(i))[-1]\n    \n            edge1_e = edge1_d.ethernets.ethernet()[-1]\n            edge2_e = edge2_d.ethernets.ethernet()[-1]\n    \n            edge1_e.connection.vxlan_name = \"d1_vxlan\"\n            edge2_e.connection.vxlan_name = \"d2_vxlan\"\n    \n            edge1_e.name = \"edge1_e{}\".format(i)\n            edge2_e.name = \"edge2_e{}\".format(i)\n    \n            edge1_e.mac = edge1_macs[i]\n            edge2_e.mac = edge2_macs[i]\n    \n            edge1_ip = edge1_e.ipv4_addresses.add()\n            edge2_ip = edge2_e.ipv4_addresses.add()\n    \n            edge1_ip.name = \"edge1_ip_d{}\".format(i)\n            edge2_ip.name = \"edge2_ip_d{}\".format(i)\n    \n            edge1_ip.address = \"100.1.{}.1\".format(i)\n            edge2_ip.address = \"100.1.{}.2\".format(i)\n    \n            edge1_ip.gateway = \"100.1.{}.2\".format(i)\n            edge2_ip.gateway = \"100.1.{}.1\".format(i)\n    \n            edge1_bgp, edge2_bgp = edge1_d.bgp, edge2_d.bgp\n            edge1_bgp.router_id = \"100.1.{}.1\".format(i)\n            edge2_bgp.router_id = \"100.1.{}.2\".format(i)\n    \n            edge1_bgp_ipv4 = edge1_bgp.ipv4_interfaces.add()\n            edge2_bgp_ipv4 = edge2_bgp.ipv4_interfaces.add()\n    \n            edge1_bgp_ipv4.ipv4_name = \"edge1_ip_d{}\".format(i)\n            edge2_bgp_ipv4.ipv4_name = \"edge2_ip_d{}\".format(i)\n    \n            edge1_bgp_peer = edge1_bgp_ipv4.peers.add()\n            edge2_bgp_peer = edge2_bgp_ipv4.peers.add()\n    \n            edge1_bgp_peer.name = \"edge1_bgp{}\".format(i)\n            edge2_bgp_peer.name = \"edge2_bgp{}\".format(i)\n    \n            edge1_bgp_peer.peer_address = \"100.1.{}.2\".format(i)\n            edge2_bgp_peer.peer_address = \"100.1.{}.1\".format(i)\n    \n            edge1_bgp_peer.as_type, edge2_bgp_peer.as_type = \"ibgp\", \"ibgp\"\n            edge1_bgp_peer.as_number, edge2_bgp_peer.as_number = 1000, 1000\n    \n            edge1_bgp_rr = edge1_bgp_peer.v4_routes.add(name=\"A1{}\".format(i))\n            edge1_bgp_rr.addresses.add(\n                address=\"1.1.0.{}\".format(i), count=180, prefix=32\n            )\n    \n            edge1_bgp_rr2 = edge1_bgp_peer.v4_routes.add(name=\"D1{}\".format(i))\n            edge1_bgp_rr2.addresses.add(\n                address=\"2.1.0.{}\".format(i), count=1, prefix=32\n            )\n    \n            edge2_bgp_rr = edge2_bgp_peer.v4_routes.add(name=\"A2{}\".format(i))\n            edge2_bgp_rr.addresses.add(\n                address=\"3.1.0.{}\".format(i), count=180, prefix=32\n            )\n    \n            edge2_bgp_rr2 = edge2_bgp_peer.v4_routes.add(name=\"D2{}\".format(i))\n            edge2_bgp_rr2.addresses.add(\n                address=\"4.1.0.{}\".format(i), count=1, prefix=32\n            )\n    \n        a1_routes = [\"A1{}\".format(i) for i in range(1, count + 1)]\n        d1_routes = [\"D1{}\".format(i) for i in range(1, count + 1)]\n    \n        a2_routes = [\"A2{}\".format(i) for i in range(1, count + 1)]\n        d2_routes = [\"D2{}\".format(i) for i in range(1, count + 1)]\n    \n        flow = config.flows.flow(name=\"f1\")[-1]\n        flow.tx_rx.device.tx_names = a1_routes + d1_routes\n        flow.tx_rx.device.rx_names = a2_routes + d2_routes\n    \n        flow.duration.fixed_packets.packets = count * 10\n    \n        flow.metrics.enable = True\n        flow.metrics.loss = True\n    \n>       api.set_config(config)\n\ntests/vxlan/test_vxlan_compact.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b2687f10>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"vxlan.test_vxlan_compact"},{"name":"package","value":"vxlan.test_vxlan_compact"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":1,"passed":167,"unknown":0,"total":177},"items":[{"uid":"dff0b1c35178c914","status":"passed","time":{"start":1752836398951,"stop":1752836411641,"duration":12690}},{"uid":"155ca7d70796518c","status":"passed","time":{"start":1752760243902,"stop":1752760258191,"duration":14289}},{"uid":"cdf626e7afecabf5","status":"passed","time":{"start":1752244885705,"stop":1752244901047,"duration":15342}},{"uid":"d924179b03570b3d","status":"passed","time":{"start":1752145840252,"stop":1752145855123,"duration":14871}},{"uid":"ca01efb6b6a19ba4","status":"passed","time":{"start":1751479010972,"stop":1751479025234,"duration":14262}},{"uid":"1f4d852180c3a274","status":"passed","time":{"start":1751472402834,"stop":1751472418662,"duration":15828}},{"uid":"e1f591e8705de0d4","status":"passed","time":{"start":1751283215057,"stop":1751283230216,"duration":15159}},{"uid":"3d651ce795d2c66c","status":"passed","time":{"start":1751276144532,"stop":1751276157442,"duration":12910}},{"uid":"6751c20646fdd67c","status":"passed","time":{"start":1751231642336,"stop":1751231657341,"duration":15005}},{"uid":"d40748a44fa670bd","status":"passed","time":{"start":1750985352305,"stop":1750985366134,"duration":13829}},{"uid":"8dcd9303e08e92bb","status":"passed","time":{"start":1750836697285,"stop":1750836712127,"duration":14842}},{"uid":"478aea8abb9739ab","status":"passed","time":{"start":1750656827226,"stop":1750656843033,"duration":15807}},{"uid":"75e0be3fb0c7d1a6","status":"passed","time":{"start":1750246239210,"stop":1750246253788,"duration":14578}},{"uid":"91740d42faea056e","status":"passed","time":{"start":1750239203710,"stop":1750239218524,"duration":14814}},{"uid":"59eca8bd1782eb8a","status":"passed","time":{"start":1749770085540,"stop":1749770097929,"duration":12389}},{"uid":"6a04f4c978f04921","status":"passed","time":{"start":1749546564693,"stop":1749546579092,"duration":14399}},{"uid":"acd5980889edbe5c","status":"passed","time":{"start":1748968328989,"stop":1748968342632,"duration":13643}},{"uid":"8632c1a72259f5ad","status":"passed","time":{"start":1748929822995,"stop":1748929836917,"duration":13922}},{"uid":"9847289bb8ddfc4d","status":"passed","time":{"start":1748864245704,"stop":1748864258467,"duration":12763}},{"uid":"420a813115bf0a3e","status":"passed","time":{"start":1748857106711,"stop":1748857117321,"duration":10610}}]},"tags":[]},"source":"38748ac483c20267.json","parameterValues":[]}
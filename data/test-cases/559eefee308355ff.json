{"uid":"559eefee308355ff","name":"test_encrypt_with_mka","historyId":"pytest:macsec.test_macsec_mka_traffic#test_encrypt_with_mka","time":{"start":1747569528196,"stop":1747569633389,"duration":105193},"status":"failed","statusMessage":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MacsecMetricIter object at 0x7fbb71d10e40>)\n +    where <snappi.snappi.MacsecMetricIter object at 0x7fbb71d10e40> = <snappi.snappi.MetricsResponse object at 0x7fbb71cef600>.macsec_metrics","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7fbb7321d990>\nb2b_raw_config = <snappi.snappi.Config object at 0x7fbb71e2b1a0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_encrypt_with_mka(api, b2b_raw_config, utils):\n        \"\"\"\n        Test for the macsec configuration\n        \"\"\"\n        config = b2b_raw_config\n        api.set_config(api.config())\n        config.flows.clear()\n        #ixnetwork = api._ixnetwork\n    \n        p1, p2 = config.ports\n        d1, d2 = config.devices.device(name=\"enc_only_macsec1\").device(name=\"enc_only_macsec2\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:01:00:11\", \"00:00:00:02:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n    \n    \n        ####################\n        # MACsec\n        ####################\n        macsec1, macsec2 = d1.macsec, d2.macsec\n        macsec1_int, macsec2_int = macsec1.ethernet_interfaces.add(), macsec2.ethernet_interfaces.add()\n        macsec1_int.eth_name, macsec2_int.eth_name = eth1.name, eth2.name\n        secy1, secy2 = macsec1_int.secure_entity, macsec2_int.secure_entity\n        secy1.name, secy2.name = \"macsec1\", \"macsec2\"\n    \n        # Data plane and crypto engine\n        secy1.data_plane.choice = secy2.data_plane.choice = \"encapsulation\"\n        secy1.data_plane.encapsulation.crypto_engine.choice = secy2.data_plane.encapsulation.crypto_engine.choice = \"encrypt_only\"\n    \n        # Data plane and crypto engine\n        secy1.data_plane.choice = secy2.data_plane.choice = \"encapsulation\"\n        secy1.data_plane.encapsulation.crypto_engine.choice = secy2.data_plane.encapsulation.crypto_engine.choice = \"encrypt_only\"\n        secy1_crypto_engine_enc_only, secy2_crypto_engine_enc_only = secy1.data_plane.encapsulation.crypto_engine.encrypt_only, secy2.data_plane.encapsulation.crypto_engine.encrypt_only\n    \n        # Data plane Tx SC\n        secy1_dataplane_txsc1, secy2_dataplane_txsc1 = secy1_crypto_engine_enc_only.secure_channels.add(), secy2_crypto_engine_enc_only.secure_channels.add()\n    \n        # Fixed PN\n        secy1_dataplane_txsc1.tx_pn.choice = secy2_dataplane_txsc1.tx_pn.choice = \"fixed_pn\"\n    \n        # OR incrementing PN\n        #secy1_dataplane_txsc1.tx_pn.choice = secy2_dataplane_txsc1.tx_pn.choice = \"incrementing_pn\"\n        #secy1_dataplane_txsc1.tx_pn.incrementing.starting_pn = secy2_dataplane_txsc1.tx_pn.incrementing.starting_pn = 1\n        #secy1_dataplane_txsc1.tx_pn.incrementing.count = secy2_dataplane_txsc1.tx_pn.incrementing.count = 10000\n    \n        ####################\n        # MKA\n        ####################\n        secy1_key_gen_proto, secy2_key_gen_proto = secy1.key_generation_protocol, secy2.key_generation_protocol\n        secy1_key_gen_proto.choice = secy2_key_gen_proto.choice = \"mka\"\n        kay1, kay2 = secy1_key_gen_proto.mka, secy2_key_gen_proto.mka\n        kay1.name, kay2.name = \"mka1\", \"mka2\"\n    \n        # Basic properties\n        kay1.basic.key_derivation_function = kay2.basic.key_derivation_function = \"aes_cmac_128\"\n    \n        # Key source: PSK\n        kay1_key_src, kay2_key_src = kay1.basic.key_source, kay2.basic.key_source\n        kay1_key_src.choice = kay2_key_src.choice = \"psk\"\n        kay1_psk_chain, kay2_psk_chain = kay1_key_src.psks, kay2_key_src.psks\n    \n        # PSK 1\n        kay1_psk1, kay2_psk1 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk1.cak_name = kay2_psk1.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD01\"\n        kay1_psk1.cak_value = kay2_psk1.cak_value = \"0xF123456789ABCDEF0123456789ABCD01\"\n    \n        kay1_psk1.start_offset_time.hh = kay2_psk1.start_offset_time.hh = 0\n        kay1_psk1.start_offset_time.mm = kay2_psk1.start_offset_time.mm = 0\n    \n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 0\n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 22\n    \n        # PSK 2\n        kay1_psk2, kay2_psk2 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk2.cak_name = kay2_psk2.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD02\"\n        kay1_psk2.cak_value = kay2_psk2.cak_value = \"0xF123456789ABCDEF0123456789ABCD02\"\n    \n        kay1_psk2.start_offset_time.hh = kay2_psk2.start_offset_time.hh = 0\n        kay1_psk2.start_offset_time.mm = kay2_psk2.start_offset_time.mm = 22\n    \n        kay1_psk2.end_offset_time.hh = kay2_psk2.end_offset_time.hh = 0\n        kay1_psk2.end_offset_time.hh = kay2_psk2.end_offset_time.hh = 0\n    \n        # Rekey mode\n        kay1_rekey_mode, kay2_rekey_mode = kay1.basic.rekey_mode, kay2.basic.rekey_mode\n        #kay1_rekey_mode.choice = kay2_rekey_mode.choice = \"dont_rekey\"\n        kay1_rekey_mode.choice = kay2_rekey_mode.choice = \"timer_based\"\n        kay1_rekey_timer_based, kay2_rekey_timer_based = kay1_rekey_mode.timer_based, kay2_rekey_mode.timer_based\n        kay1_rekey_timer_based.choice = kay2_rekey_timer_based.choice = \"fixed_count\"\n        kay1_rekey_timer_based.fixed_count = kay2_rekey_timer_based.fixed_count = 20\n        kay1_rekey_timer_based.interval = kay2_rekey_timer_based.interval = 200\n    \n        # Remaining basic properties autofilled\n    \n        # Key server\n        kay1_key_server, kay2_key_server = kay1.key_server, kay2.key_server\n        kay1_key_server.cipher_suite = kay2_key_server.cipher_suite = \"gcm_aes_128\"\n    \n        # Tx SC\n        kay1_tx, kay2_tx = kay1.tx, kay2.tx\n        kay1_txsc1, kay2_txsc1 = kay1_tx.secure_channels.add(), kay2_tx.secure_channels.add()\n        kay1_txsc1.name, kay2_txsc1.name = \"txsc1\", \"txsc2\"\n        kay1_txsc1.system_id, kay2_txsc1.system_id = eth1.mac, eth2.mac\n        # Remaining Tx SC settings autofilled\n    \n        ####################\n        # Traffic\n        ####################\n        # Gratuitous ARP is sent so that DUT can learn our IP. Grat ARP source/destination are local address\n        # DUT MAC needs to be configured manually stateless encyption only engine cannot decrypt any packet including DUT ARP\n        ip1.address = \"10.1.1.1\"\n        ip2.address = \"10.1.1.2\"\n    \n        ip1.prefix = 24\n        ip2.prefix = 24\n    \n        ip1.gateway = ip2.address\n        ip2.gateway = ip1.address\n    \n        ip1.gateway_mac.choice = \"value\"\n        ip1.gateway_mac.value = eth2.mac\n    \n        ip2.gateway_mac.choice = \"value\"\n        ip2.gateway_mac.value = eth1.mac\n    \n        # Flow\n        f1 = config.flows.flow(name=\"f1\")[-1]\n    \n        # IP\n        f1.packet.ethernet().macsec().ipv4()\n    \n        # DSCP\n        ip = f1.packet[-1]\n        ip.priority.choice = ip.priority.DSCP\n        ip.priority.dscp.phb.values = [\n        ip.priority.dscp.phb.CS2,\n        ip.priority.dscp.phb.CS1,\n        ip.priority.dscp.phb.CS5,\n        ]\n        ip.priority.dscp.ecn.value = 3\n    \n    \n        # Ethernet/VLAN traffic from secY to secY endpoints\n        #f1.tx_rx.device.tx_names = [secy1.name]\n        #f1.tx_rx.device.rx_names = [secy2.name]\n    \n        # Ethernet/VLAN traffic from ethernet to ethernet endpoints\n        #f1.tx_rx.device.tx_names = [eth1.name]\n        #f1.tx_rx.device.rx_names = [eth2.name]\n    \n        # IPv4 traffic from IP to IP endpoints\n        f1.tx_rx.device.tx_names = [ip1.name]\n        f1.tx_rx.device.rx_names = [ip2.name]\n    \n        # Rate\n        f1.rate.pps = 10\n    \n        # egress only tracking(eotr)\n        eotr = config.egress_only_tracking\n        eotr1 = eotr.add()\n        eotr1.port_name = p2.name\n    \n        # eotr filter\n        eotr1_filter1 = eotr1.filters.add()\n        eotr1_filter1 = \"auto_macsec\"\n    \n        # eotr metric tag for destination MAC 3rd byte from MSB: LS 4 bits\n        eotr1_mt1 = eotr1.metric_tags.add()\n        eotr1_mt1.name = \"dest_mac_addr\"\n        eotr1_mt1.offset = 29\n        eotr1_mt1.length = 3\n    \n        #eotr1_mt2 = eotr1.metric_tags.add()\n        #eotr1_mt2.name = \"macsec_sci\"\n        #eotr1_mt2.offset = 189\n        #eotr1_mt2.length = 3\n    \n        utils.start_traffic(api, config)\n    \n        ####################\n        # MKA stats\n        ####################\n        utils.wait_for(\n            lambda: results_mka_ok(api), \"stats to be as expected\", timeout_seconds=20\n        )\n        enums = [\n            \"mkpdu_tx\",\n            \"mkpdu_rx\",\n            \"live_peer_count\",\n            \"potential_peer_count\",\n            \"latest_key_tx_peer_count\",\n            \"latest_key_rx_peer_count\",\n            \"malformed_mkpdu\",\n            \"icv_mismatch\",\n        ]\n        expected_results = {\n            \"enc_only_macsec1\": [0, 0, 0, 0, 0, 0, 0, 0],\n            \"enc_only_macsec2\": [0, 0, 0, 0, 0, 0, 0, 0],\n        }\n        req = api.metrics_request()\n        req.mka.peer_names = [\"enc_only_macsec1\"]\n        results = api.get_metrics(req)\n        assert len(results.mka_metrics) == 1\n        assert results.mka_metrics[0].name == \"enc_only_macsec1\"\n        print(f\"\\n\\nMKA Result : enc_only_macsec1\\n\")\n        for mka_res in results.mka_metrics:\n            for i, enum in enumerate(enums):\n                val = expected_results[mka_res.name][i]\n                if \"session_state\" in enum:\n                    assert getattr(mka_res, enum) == val\n                else:\n                    assert getattr(mka_res, enum) >= val\n                print(f\"{enum} : {getattr(mka_res, enum)}\")\n    \n        req = api.metrics_request()\n        req.mka.peer_names = [\"enc_only_macsec2\"]\n        results = api.get_metrics(req)\n        assert len(results.mka_metrics) == 1\n        assert results.mka_metrics[0].name == \"enc_only_macsec2\"\n        print(f\"\\n\\nMKA Result : enc_only_macsec2\")\n        for mka_res in results.mka_metrics:\n            for i, enum in enumerate(enums):\n                val = expected_results[mka_res.name][i]\n                if \"session_state\" in enum:\n                    assert getattr(mka_res, enum) == val\n                else:\n                    assert getattr(mka_res, enum) >= val\n                print(f\"{enum} : {getattr(mka_res, enum)}\")\n    \n    \n        ####################\n        # MACsec stats\n        ####################\n        utils.wait_for(\n            lambda: results_macsec_ok(api), \"stats to be as expected\", timeout_seconds=30\n        )\n    \n        enums = [\n            \"session_state\",\n            \"out_pkts_protected\",\n            \"out_pkts_encrypted\",\n            \"in_pkts_ok\",\n            \"in_pkts_bad\",\n            \"in_pkts_bad_tag\",\n            \"in_pkts_late\",\n            \"in_pkts_no_sci\",\n            \"in_pkts_not_using_sa\",\n            \"in_pkts_not_valid\",\n            \"in_pkts_unknown_sci\",\n            \"in_pkts_unused_sa\",\n            \"in_pkts_invalid\",\n            \"in_pkts_untagged\",\n            \"out_octets_protected\",\n            \"out_octets_encrypted\",\n            \"in_octets_validated\",\n            \"in_octets_decrypted\",\n        ]\n        expected_results = {\n            \"enc_only_macsec1\": [\"up\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            \"enc_only_macsec2\": [\"up\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        }\n        req = api.metrics_request()\n        req.macsec.secure_entity_names = [\"enc_only_macsec1\"]\n        results = api.get_metrics(req)\n>       assert len(results.macsec_metrics) == 1\nE       assert 2 == 1\nE        +  where 2 = len(<snappi.snappi.MacsecMetricIter object at 0x7fbb71d10e40>)\nE        +    where <snappi.snappi.MacsecMetricIter object at 0x7fbb71d10e40> = <snappi.snappi.MetricsResponse object at 0x7fbb71cef600>.macsec_metrics\n\ntests/macsec/test_macsec_mka_traffic.py:274: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Config validation 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Ports configuration 6.605s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Captures configuration 0.188s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location configuration 0.371s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Lag Configuration 0.089s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Convert device config : 0.585s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Push IxNetwork device config : 0.092s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Devices configuration 0.767s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Flows configuration 0.418s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Start interfaces 0.277s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 IxNet - The Traffic Item configuration has changed and it needs to be regenerated before applying it to the Ixia hardware","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Config validation 0.008s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Ports configuration 1.213s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Captures configuration 0.710s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.091s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Speed change not require due to redundant Layer1 config","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Aggregation mode speed change 0.002s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location preemption [novus1-715849.ccu.is.keysight.com;1;1, novus1-715849.ccu.is.keysight.com;1;2] 0.623s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location connect [tx, rx] 15.608s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1480 tx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1480 rx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location state check [tx, rx] 0.290s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Location configuration 17.550s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Layer1 configuration 1.779s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Lag Configuration 0.088s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.device.macsec:macsec.py:104 MKA is configured in test","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.device.macsec:macsec.py:104 MKA is configured in test","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Convert device config : 0.278s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Create IxNetwork device config : 0.001s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Push IxNetwork device config : 0.558s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Devices configuration 0.928s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Flows configuration 2.513s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Start interfaces 5.030s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 IxNet - This protocol stack does not support dynamic update traffic. Please disable dynamic update on this Traffic Item.","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Captures start 2.261s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Flows generate/apply 7.236s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Flows clear statistics 12.186s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Captures start 1.092s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 Flows start 4.746s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 IxNet - Selected options are not compatible with egress-only tracking and have been disabled for this apply only.","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 IxNet - Please verify settings, available below.","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1474 IxNet - Minimum recommended offset is 5 for ports in End Of Frame Timestamp mode and 6 for ports in Floating Timestamp mode.","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":49,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"macsec.test_macsec_mka_traffic"},{"name":"package","value":"macsec.test_macsec_mka_traffic"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":62,"broken":0,"skipped":1,"passed":27,"unknown":0,"total":90},"items":[{"uid":"b2029e101809596d","status":"passed","time":{"start":1747562220875,"stop":1747562346332,"duration":125457}},{"uid":"963df97fa03428d2","status":"passed","time":{"start":1747375343037,"stop":1747375478540,"duration":135503}},{"uid":"a6ed0ea4570d72a7","status":"passed","time":{"start":1747353950744,"stop":1747354088778,"duration":138034}},{"uid":"51ce8f2ef8599cf8","status":"passed","time":{"start":1747341697732,"stop":1747341834354,"duration":136622}},{"uid":"23e2bd6f0998edf9","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MacsecMetricIter object at 0x7f15e893c240>)\n +    where <snappi.snappi.MacsecMetricIter object at 0x7f15e893c240> = <snappi.snappi.MetricsResponse object at 0x7f15e885ae30>.macsec_metrics","time":{"start":1747280280743,"stop":1747280391474,"duration":110731}},{"uid":"45bcf91dbab7ca08","status":"passed","time":{"start":1747215978584,"stop":1747216105634,"duration":127050}},{"uid":"8111084b0279aba1","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MacsecMetricIter object at 0x7f5aa339d280>)\n +    where <snappi.snappi.MacsecMetricIter object at 0x7f5aa339d280> = <snappi.snappi.MetricsResponse object at 0x7f5aa31f7150>.macsec_metrics","time":{"start":1747208911545,"stop":1747209023453,"duration":111908}},{"uid":"235f779f8baaa42","status":"passed","time":{"start":1747130463794,"stop":1747130594791,"duration":130997}},{"uid":"167fe1d7d7c976f1","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7fb1596bcac0>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7fb1596bcac0> = <snappi.snappi.MetricsResponse object at 0x7fb1594804f0>.mka_metrics","time":{"start":1747123483901,"stop":1747123594132,"duration":110231}},{"uid":"a6683df5dde87094","status":"passed","time":{"start":1747017408213,"stop":1747017539323,"duration":131110}},{"uid":"9bb42ad29b12a0ab","status":"passed","time":{"start":1747008149336,"stop":1747008290687,"duration":141351}},{"uid":"e97b2658168aba12","status":"passed","time":{"start":1747000959729,"stop":1747001084935,"duration":125206}},{"uid":"717df9e7efea7468","status":"passed","time":{"start":1746646967556,"stop":1746647108194,"duration":140638}},{"uid":"b7aa23d8845ca13c","status":"passed","time":{"start":1746534161940,"stop":1746534289358,"duration":127418}},{"uid":"cf833875f8a9b6cb","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 566, in get_metrics\n    response = self.traffic_item.results_egress_only_tracking(request.egress_only_tracking)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1829, in results_egress_only_tracking\n    ).Page\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/statistics/view/view.py\", line 554, in Page\n    return Page(self)._select()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 548, in _select\n    end = len(self._parent.href)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 158, in href\n    return self._get_attribute(\"href\")\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 218, in _get_attribute\n    raise NotFoundError(msg)\n Failed to get the View.href property as the View object has no encapsulated resources. Either the View.find() method was not called or it failed to retrieve any resources from the server.","time":{"start":1746512584420,"stop":1746512706097,"duration":121677}},{"uid":"a4ff474eede438e7","status":"passed","time":{"start":1746463364453,"stop":1746463498259,"duration":133806}},{"uid":"a5e65cb030760a49","status":"passed","time":{"start":1746454829753,"stop":1746454959346,"duration":129593}},{"uid":"f3a27c01fe62e6d5","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MacsecMetricIter object at 0x7fc47bba2e40>)\n +    where <snappi.snappi.MacsecMetricIter object at 0x7fc47bba2e40> = <snappi.snappi.MetricsResponse object at 0x7fc47aaa7a60>.macsec_metrics","time":{"start":1746433188387,"stop":1746433305543,"duration":117156}},{"uid":"398a96966b6c6795","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7f4d91712680>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7f4d91712680> = <snappi.snappi.MetricsResponse object at 0x7f4d8d8cbc40>.mka_metrics","time":{"start":1746421868637,"stop":1746421966245,"duration":97608}},{"uid":"ff60426a0596b77b","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException: IxNet - Failure message received from Interface Manager on port novus1-715849.ccu.is.keysight.com;1;2: unknown-error - Could not load plugin cpf: static ixePlugin* ixePlugin::LoadPlugin(const string&, const string&): dlopen: /usr/lib/ixe/plugins/libcpf.so: undefined symbol: _ZNK7DataSeq8IMPlugin33localTimestampMilliImplementationEv.","time":{"start":1746414762134,"stop":1746414875329,"duration":113195}}]},"tags":[]},"source":"559eefee308355ff.json","parameterValues":[]}
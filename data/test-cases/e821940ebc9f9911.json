{"uid":"e821940ebc9f9911","name":"test_bgp_attributes","historyId":"pytest:bgp.test_bgp_attributes#test_bgp_attributes","time":{"start":1742993864845,"stop":1742993878892,"duration":14047},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\n    self.ngpf.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\n    self._configure_topology()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\n    self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\n 'Config' object has no attribute 'stateful_flows'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe391f380>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:363: in config_ixnetwork\n    self.ngpf.config()\nsnappi_ixnetwork/device/ngpf.py:69: in config\n    self._configure_topology()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.device.ngpf.Ngpf object at 0x7fdbe3e23b50>\n\n    def _configure_topology(self):\n        self.stop_topology()\n        self.api._remove(self.api._topology, [])\n        ixn_topos = self.create_node(self._ixn_config, \"topology\")\n        # Configured all interfaces\n        self._configure_device_group(ixn_topos)\n    \n        # Configure all MACsec interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._macsec.config(device)\n    \n        # We need to configure all interface before configure protocols\n        for device in self.api.snappi_config.devices:\n            self._bgp.config(device)\n    \n        #Configure all RoCEv2 interface before configure protocols\n        for device in self.api.snappi_config.devices:\n>           self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE           AttributeError: 'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/device/ngpf.py:125: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_bgp_attributes(api, utils):\n        \"\"\"\n        Configure bgp attributes and validate against restpy\n        \"\"\"\n        config = api.config()\n        community = \"1:2\"\n        aspaths = [1, 2]\n        med = 50\n        origin = \"egp\"\n    \n        v4_rr_attr = {\n            \"address\": \"200.1.0.1\",\n            \"prefix\": \"32\",\n            \"count\": \"1000\",\n            \"step\": \"2\",\n        }\n    \n        v6_rr_attr = {\n            \"address\": \"4000::1\",\n            \"prefix\": \"64\",\n            \"count\": \"500\",\n            \"step\": \"3\",\n        }\n    \n        (port,) = config.ports.port(name=\"tx\", location=utils.settings.ports[0])\n    \n        config.options.port_options.location_preemption = True\n        ly = config.layer1.layer1()[-1]\n        ly.name = \"ly\"\n        ly.port_names = [port.name]\n        ly.ieee_media_defaults = False\n        ly.auto_negotiate = False\n        ly.speed = utils.settings.speed\n        ly.media = utils.settings.media\n    \n        (device,) = config.devices.device(name=\"device\")\n    \n        # device config\n        eth = device.ethernets.add()\n        eth.name = \"eth\"\n        eth.connection.port_name = port.name\n        eth.mac = \"00:00:00:00:00:11\"\n        ipv4 = eth.ipv4_addresses.add()\n        ipv4.name = \"ipv4\"\n        ipv4.address = \"21.1.1.1\"\n        ipv4.prefix = 24\n        ipv4.gateway = \"21.1.1.2\"\n        bgpv4 = device.bgp\n        bgpv4.router_id = \"192.0.0.1\"\n        bgpv4_int = bgpv4.ipv4_interfaces.add()\n        bgpv4_int.ipv4_name = ipv4.name\n        bgpv4_peer = bgpv4_int.peers.add()\n        bgpv4_peer.name = \"rx_bgpv4\"\n        bgpv4_peer.as_type = \"ebgp\"\n        bgpv4_peer.peer_address = \"22.1.1.1\"\n        bgpv4_peer.as_number = 65200\n    \n        rr = bgpv4_peer.v4_routes.add(name=\"rr\")\n        rr.addresses.add(\n            address=v4_rr_attr[\"address\"],\n            prefix=int(v4_rr_attr[\"prefix\"]),\n            count=int(v4_rr_attr[\"count\"]),\n            step=int(v4_rr_attr[\"step\"]),\n        )\n    \n        # Community\n        manual_as_community = rr.communities.add()\n        manual_as_community.type = manual_as_community.MANUAL_AS_NUMBER\n        manual_as_community.as_number = int(community.split(\":\")[0])\n        manual_as_community.as_custom = int(community.split(\":\")[1])\n    \n        # AS Path\n        as_path = rr.as_path\n        as_path_segment = as_path.segments.add()\n        as_path_segment.type = as_path_segment.AS_SEQ\n        as_path_segment.as_numbers = aspaths\n    \n        # MED\n        rr.advanced.multi_exit_discriminator = med\n    \n        # Origin\n        rr.advanced.origin = rr.advanced.EGP\n    \n        # v6\n        ipv6 = eth.ipv6_addresses.add()\n        ipv6.name = \"ipv6\"\n        ipv6.address = \"2000::1\"\n        ipv6.prefix = 64\n        ipv6.gateway = \"2000::2\"\n        bgpv6 = device.bgp\n        bgpv6.router_id = \"192.0.0.1\"\n        bgpv6_int = bgpv6.ipv6_interfaces.add()\n        bgpv6_int.ipv6_name = ipv6.name\n        bgp6_peer = bgpv6_int.peers.add()\n        bgp6_peer.name = \"rx_bgpv6\"\n        bgp6_peer.as_type = \"ebgp\"\n        bgp6_peer.peer_address = \"2000::2\"\n        bgp6_peer.as_number = 65200\n    \n        rrv6 = bgp6_peer.v6_routes.add(name=\"rrv6\")\n        rrv6.addresses.add(\n            address=v6_rr_attr[\"address\"],\n            prefix=int(v6_rr_attr[\"prefix\"]),\n            count=int(v6_rr_attr[\"count\"]),\n            step=int(v6_rr_attr[\"step\"]),\n        )\n    \n        # Community\n        manual_as_community = rrv6.communities.add()\n        manual_as_community.type = manual_as_community.MANUAL_AS_NUMBER\n        manual_as_community.as_number = int(community.split(\":\")[0])\n        manual_as_community.as_custom = int(community.split(\":\")[1])\n    \n        # As Path\n        as_path = rrv6.as_path\n        as_path_segment = as_path.segments.add()\n        as_path_segment.type = as_path_segment.AS_SEQ\n        as_path_segment.as_numbers = aspaths\n    \n        # MED\n        rrv6.advanced.multi_exit_discriminator = med\n    \n        # Origin\n        rrv6.advanced.origin = rr.advanced.EGP\n    \n>       api.set_config(config)\n\ntests/bgp/test_bgp_attributes.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fdbe65eca00>\nconfig = <snappi.snappi.Config object at 0x7fdbe391f380>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\nE               self.ngpf.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\nE               self._configure_topology()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\nE               self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\nE            'Config' object has no attribute 'stateful_flows'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 0.008s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 8.674s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 0.190s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.099s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Speed conversion is not require for (port.name, speed) : [('tx', 'normal')]","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.246s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location preemption [novus1-715849.ccu.is.keysight.com;1;1] 0.112s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location connect [tx] 2.214s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1443 tx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location state check [tx] 0.286s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 3.593s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1443  kError invalidCommit The only speed allowed in copper mode while AutoNegotiation is turned off is 100M","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 0.313s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.090s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 0.276s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 0.370s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":18,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp.test_bgp_attributes"},{"name":"package","value":"bgp.test_bgp_attributes"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":60,"unknown":0,"total":61},"items":[{"uid":"adb74f81dd13e0b4","status":"passed","time":{"start":1742381702821,"stop":1742381731196,"duration":28375}},{"uid":"72e4e69fb12e3e4e","status":"passed","time":{"start":1742374910714,"stop":1742374939029,"duration":28315}},{"uid":"bcd9f66d95064f5d","status":"passed","time":{"start":1742299164935,"stop":1742299189100,"duration":24165}},{"uid":"6682e6459f600f11","status":"passed","time":{"start":1741799882568,"stop":1741799909892,"duration":27324}},{"uid":"1ca32b9d49ed35e6","status":"passed","time":{"start":1741788649556,"stop":1741788677073,"duration":27517}},{"uid":"5b22c98975e8b2fa","status":"passed","time":{"start":1741764418062,"stop":1741764447522,"duration":29460}},{"uid":"fee6ce50e1da5726","status":"passed","time":{"start":1741757585447,"stop":1741757616369,"duration":30922}},{"uid":"9da19f10c6474e78","status":"passed","time":{"start":1741690639312,"stop":1741690663386,"duration":24074}},{"uid":"1e9139567adb664c","status":"passed","time":{"start":1741682454375,"stop":1741682484161,"duration":29786}},{"uid":"4fca2f9905e75632","status":"passed","time":{"start":1741584950599,"stop":1741584987698,"duration":37099}},{"uid":"a115f82a108f9b81","status":"passed","time":{"start":1741547140558,"stop":1741547169870,"duration":29312}},{"uid":"c184d2ab70caefe0","status":"passed","time":{"start":1741459053851,"stop":1741459083429,"duration":29578}},{"uid":"9b4b2bc4ced06250","status":"passed","time":{"start":1741451329877,"stop":1741451364134,"duration":34257}},{"uid":"868fab1fa0d7b0be","status":"passed","time":{"start":1741375664779,"stop":1741375705923,"duration":41144}},{"uid":"1f6afeef10a33886","status":"passed","time":{"start":1741368681952,"stop":1741368711185,"duration":29233}},{"uid":"319e74762b758222","status":"passed","time":{"start":1741353394880,"stop":1741353429794,"duration":34914}},{"uid":"4bdf3401840c8f26","status":"passed","time":{"start":1741346675485,"stop":1741346713343,"duration":37858}},{"uid":"be0095f369514787","status":"passed","time":{"start":1741066144231,"stop":1741066186362,"duration":42131}},{"uid":"d4115146c32a061c","status":"passed","time":{"start":1741017342205,"stop":1741017376087,"duration":33882}},{"uid":"8206ab0016dc9cf9","status":"passed","time":{"start":1741010585345,"stop":1741010615785,"duration":30440}}]},"tags":[]},"source":"e821940ebc9f9911.json","parameterValues":[]}
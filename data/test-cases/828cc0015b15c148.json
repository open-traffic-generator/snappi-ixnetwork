{"uid":"828cc0015b15c148","name":"test_static_lag","historyId":"pytest:test_lag#test_static_lag","time":{"start":1754037821403,"stop":1754038068525,"duration":247122},"status":"failed","statusMessage":"Exception: Time out occurred while waiting for stats to be accumulated","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7f93eeb92350>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_static_lag(api, utils):\n        \"\"\"Demonstrates the following:\n        1) Creating a lag comprised of multiple ports\n        2) Creating emulated devices over the lag\n        3) Creating traffic over the emulated devices that will transmit\n        traffic to a single rx port.\n    \n            TX LAG              DUT             RX\n            ------+         +---------+\n            port 1|         |\n            ..    | ------> |\n            port n|         |\n            ------+\n        \"\"\"\n        config = api.config()\n        p1, p2, p3, p4 = (\n            config.ports.port(name=\"txp1\", location=utils.settings.ports[0])\n            .port(name=\"txp2\", location=utils.settings.ports[1])\n            .port(name=\"rxp1\", location=utils.settings.ports[2])\n            .port(name=\"rxp2\", location=utils.settings.ports[3])\n        )\n    \n        config.layer1.layer1(\n            name=\"layer1\",\n            port_names=[p.name for p in config.ports],\n            speed=utils.settings.speed,\n            media=utils.settings.media,\n        )\n    \n        lag1, lag2 = config.lags.lag(name=\"lag1\").lag(name=\"lag2\")\n        lp1, lp2 = lag1.ports.port(port_name=p1.name).port(port_name=p2.name)\n        lp3, lp4 = lag2.ports.port(port_name=p3.name).port(port_name=p4.name)\n    \n        lag1.protocol.static.lag_id = 1\n        lag2.protocol.static.lag_id = 2\n    \n        lp1.ethernet.name, lp2.ethernet.name = \"eth1\", \"eth2\"\n        lp3.ethernet.name, lp4.ethernet.name = \"eth3\", \"eth4\"\n    \n        lp1.ethernet.mac = \"00:11:02:00:00:01\"\n        lp2.ethernet.mac = \"00:22:02:00:00:01\"\n        lp3.ethernet.mac = \"00:33:02:00:00:01\"\n        lp4.ethernet.mac = \"00:44:02:00:00:01\"\n    \n        lp1.ethernet.vlans.vlan(priority=1, name=\"vlan1\", id=1)[-1]\n        lp2.ethernet.vlans.vlan(priority=1, name=\"vlan2\", id=1)[-1]\n        lp3.ethernet.vlans.vlan(priority=1, name=\"vlan3\", id=1)[-1]\n        lp4.ethernet.vlans.vlan(priority=1, name=\"vlan4\", id=1)[-1]\n    \n        packets = 2000\n        f1_size = 74\n        f2_size = 1500\n        d1, d2 = config.devices.device(name=\"device1\").device(name=\"device2\")\n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = lag1.name, lag2.name\n        eth1.name, eth2.name = \"d_eth1\", \"d_eth2\"\n        eth1.mac, eth2.mac = \"00:00:00:00:00:11\", \"00:00:00:00:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n        f1, f2 = config.flows.flow(name=\"f1\").flow(name=\"f2\")\n        f1.tx_rx.port.tx_name, f1.tx_rx.port.rx_name = p1.name, p2.name\n        f2.tx_rx.port.tx_name, f2.tx_rx.port.rx_name = p3.name, p4.name\n        config.options.port_options.location_preemption = True\n        f1.duration.fixed_packets.packets = packets\n        f2.duration.fixed_packets.packets = packets\n        f1.size.fixed = f1_size\n        f2.size.fixed = f2_size\n        f1.rate.percentage = 10\n        f2.rate.percentage = 10\n    \n        f1.metrics.enable = True\n        f1.metrics.loss = True\n    \n        f2.metrics.enable = True\n        f2.metrics.loss = True\n    \n        utils.start_traffic(api, config, start_capture=False)\n        utils.wait_for(lambda: utils.is_traffic_stopped(api), \"traffic to stop\")\n    \n>       utils.wait_for(\n            lambda: utils.is_stats_accumulated(api, packets * 2),\n            \"stats to be accumulated\",\n        )\n\ntests/test_lag.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc = <function test_static_lag.<locals>.<lambda> at 0x7f93ecc68430>\ncondition_str = 'stats to be accumulated', interval_seconds = 0.5\ntimeout_seconds = 30\n\n    def wait_for(func, condition_str, interval_seconds=None, timeout_seconds=None):\n        \"\"\"\n        Keeps calling the `func` until it returns true or `timeout_seconds` occurs\n        every `interval_seconds`. `condition_str` should be a constant string\n        implying the actual condition being tested.\n        Usage\n        -----\n        If we wanted to poll for current seconds to be divisible by `n`, we would\n        implement something similar to following:\n        ```\n        import time\n        def wait_for_seconds(n, **kwargs):\n            condition_str = 'seconds to be divisible by %d' % n\n            def condition_satisfied():\n                return int(time.time()) % n == 0\n            poll_until(condition_satisfied, condition_str, **kwargs)\n        ```\n        \"\"\"\n        if interval_seconds is None:\n            interval_seconds = settings.interval_seconds\n        if timeout_seconds is None:\n            timeout_seconds = settings.timeout_seconds\n        start_seconds = int(time.time())\n    \n        print(\"\\n\\nWaiting for %s ...\" % condition_str)\n        while True:\n            res = func()\n            if res:\n                print(\"Done waiting for %s\" % condition_str)\n                break\n            if res is None:\n                raise Exception(\"Wait aborted for %s\" % condition_str)\n            if timed_out(start_seconds, timeout_seconds):\n                msg = \"Time out occurred while waiting for %s\" % condition_str\n>               raise Exception(msg)\nE               Exception: Time out occurred while waiting for stats to be accumulated\n\ntests/utils/common.py:224: Exception","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"test_lag"},{"name":"package","value":"test_lag"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":26,"broken":0,"skipped":1,"passed":155,"unknown":0,"total":182},"items":[{"uid":"fa9d93058403f67f","status":"failed","statusDetails":"Exception: Time out occurred while waiting for stats to be accumulated","time":{"start":1754025412828,"stop":1754025662852,"duration":250024}},{"uid":"f14f21d34d26bdfb","status":"failed","statusDetails":"Exception: Time out occurred while waiting for stats to be accumulated","time":{"start":1754000569227,"stop":1754000824854,"duration":255627}},{"uid":"240b3eaae0f552e6","status":"failed","statusDetails":"Exception: Time out occurred while waiting for stats to be accumulated","time":{"start":1753965242171,"stop":1753965491035,"duration":248864}},{"uid":"9cb140f43adc8a6","status":"failed","statusDetails":"Exception: Time out occurred while waiting for stats to be accumulated","time":{"start":1753390964676,"stop":1753391210970,"duration":246294}},{"uid":"d0974b5d5a05852","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","time":{"start":1753368506584,"stop":1753368506627,"duration":43}},{"uid":"f74789a7de602392","status":"passed","time":{"start":1752836398951,"stop":1752836592729,"duration":193778}},{"uid":"c07857fbf96e0cd4","status":"passed","time":{"start":1752760243902,"stop":1752760442318,"duration":198416}},{"uid":"d377d25144082b52","status":"passed","time":{"start":1752244885705,"stop":1752245086504,"duration":200799}},{"uid":"a5c8ed2858465b1c","status":"passed","time":{"start":1752145840252,"stop":1752146030713,"duration":190461}},{"uid":"37d0c89c851e1e22","status":"passed","time":{"start":1751479010972,"stop":1751479205514,"duration":194542}},{"uid":"aaa0f6da4483534d","status":"passed","time":{"start":1751472402834,"stop":1751472599450,"duration":196616}},{"uid":"aa6e894a504ab2c9","status":"passed","time":{"start":1751283215057,"stop":1751283414223,"duration":199166}},{"uid":"448bd672bb43ae5d","status":"passed","time":{"start":1751276144532,"stop":1751276335315,"duration":190783}},{"uid":"8dcceabba9b1f7e","status":"passed","time":{"start":1751231642336,"stop":1751231838980,"duration":196644}},{"uid":"cacd4a33f03908bb","status":"passed","time":{"start":1750985352305,"stop":1750985542266,"duration":189961}},{"uid":"599ecead1caf514c","status":"passed","time":{"start":1750836697285,"stop":1750836895563,"duration":198278}},{"uid":"d769fea62a56230","status":"passed","time":{"start":1750656827226,"stop":1750657023523,"duration":196297}},{"uid":"f96fb91b56febcda","status":"passed","time":{"start":1750246239210,"stop":1750246436635,"duration":197425}},{"uid":"4fb505018114c3f","status":"passed","time":{"start":1750239203710,"stop":1750239397269,"duration":193559}},{"uid":"7a8770f7f23d4c6b","status":"passed","time":{"start":1749770085540,"stop":1749770281124,"duration":195584}}]},"tags":[]},"source":"828cc0015b15c148.json","parameterValues":[]}
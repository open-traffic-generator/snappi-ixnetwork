{"uid":"f2d46fb145b81479","name":"test_compact","historyId":"pytest:test_compact#test_compact","time":{"start":1743024925670,"stop":1743024997902,"duration":72232},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 450, in set_control_state\n    self.traffic_item.transmit(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1341, in transmit\n    if (device.rocev2) and request.state == \"stop\":\n 'Device' object has no attribute 'rocev2'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f92a1bf4eb0>\npayload = <snappi.snappi.ControlState object at 0x7f92a06b76a0>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    event_state = request_payload.state\n                    with Timer(self, \"Setting route state\"):\n                        event_names = self.ngpf.set_route_state(request_payload)\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n>               self.traffic_item.transmit(request_payload)\n\nsnappi_ixnetwork/snappi_api.py:450: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7f92a1b9da80>\nrequest = <snappi.snappi.StateTrafficFlowTransmit object at 0x7f929f9deb10>\n\n    def transmit(self, request):\n        \"\"\"Set flow transmit\n        1) check set_protocol_state for device protocols\n        2) If start then generate and apply traffic\n        3) Execute requested transmit action (start|stop|pause|resume)\n        \"\"\"\n        regex = \"\"\n        flow_names = [flow.name for flow in self._api._config.flows]\n        if request and request.flow_names:\n            flow_names = request.flow_names\n        if len(flow_names) == 1:\n            regex = \"^%s$\" % self._api.special_char(flow_names)[0]\n        elif len(flow_names) > 1:\n            regex = \"^(%s)$\" % \"|\".join(self._api.special_char(flow_names))\n    \n        self.logger.debug(\n            \"These %s flows will go into %s state\"\n            % (flow_names, request.state)\n        )\n        if request.state == \"start\":\n            ##This portion of code is to handle different stateful_traffic flow, currently only rocev2\n            for device in self._api._config.devices:\n                #Check if rocev2 exists in topology\n                if hasattr(device, \"rocev2\") and device.rocev2:\n                    ####### Create and Apply RoCEv2 Flow Groups here, as we have identified that RoCEv2 is present in Topology\n                    self._api._traffic.AddRoCEv2FlowGroups()\n                    rocev2_traffic = self._api._traffic.RoceV2Traffic.find(Enabled=True)\n                    stateful_flow = None\n                    options = None\n                    if hasattr(self._api._config, \"stateful_flows\"):\n                        stateful_flow = self._api._config.stateful_flows\n                    if hasattr(self._api._config, \"options\"):\n                        options = self._api._config.options\n                    self._rocev2._configureTrafficParameters(rocev2_traffic, stateful_flow, options)\n                    with Timer(self._api, \"Flows generate/apply\"):\n                        self._api._traffic.Apply()\n                    print (\"Starting Traffic\")\n                    self._api._traffic.Start()\n                    break\n            if len(self._api._topology.find()) > 0:\n                glob_topo = self._api._globals.Topology.refresh()\n                if glob_topo.Status == \"notStarted\":\n                    raise Exception(\n                        \"Please start protocols using set_protocol_state \"\n                        \"before start traffic\"\n                    )\n            if len(self._api._traffic_item.find()) == 0:\n                return\n            self._api._traffic_item.find(State=\"^unapplied$\")\n            if len(self._api._traffic_item) > 0:\n                with Timer(self._api, \"Flows generate/apply\"):\n                    self._api._traffic_item.Generate()\n                    self._api._traffic.Apply()\n            self._api._traffic_item.find(State=\"^started$\")\n            if len(self._api._traffic_item) == 0:\n                with Timer(self._api, \"Flows clear statistics\"):\n                    self._api._ixnetwork.ClearStats(\n                        [\n                            \"waitForPortStatsRefresh\",\n                            \"waitForTrafficStatsRefresh\",\n                        ]\n                    )\n            self._api.capture._start_capture()\n        self._api._traffic_item.find(Name=regex)\n        for device in self._api._config.devices:\n>           if (device.rocev2) and request.state == \"stop\":\nE           AttributeError: 'Device' object has no attribute 'rocev2'\n\nsnappi_ixnetwork/trafficitem.py:1341: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f92a1bf4eb0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_compact(api, utils):\n        \"\"\"\n        1. Configure 1000 similar devices contain Ether>IPv4>BGPv4\n           route in two ports\n        2. Create three traffic each traffic with diff set of endpoints\n        3. Concrete class should compact the devices to IxNet DeviceGroup.\n        4. Validate all through RestPy\n        \"\"\"\n        SIZE = 1024\n        PACKETS = 1000\n    \n        config_values = dict()\n        num_of_devices = 1000\n        num_of_routes = 1000\n        config_values[\"d1_name\"] = \"Tx Device 1\"\n        config_values[\"d2_name\"] = \"Rx Device 1\"\n        config_values[\"d3_name\"] = \"Rx Device 3\"\n        config_values[\"Multiplier\"] = num_of_devices\n        rx_device_with_rr = 3\n    \n        config = api.config()\n        api.enable_scaling(True)\n    \n        tx_port, rx_port = config.ports.port(\n            name=\"Tx Port\", location=utils.settings.ports[0]\n        ).port(name=\"Rx Port\", location=utils.settings.ports[1])\n    \n        l1 = config.layer1.layer1()[0]\n        l1.name = \"l1\"\n        l1.port_names = [rx_port.name, tx_port.name]\n        l1.media = utils.settings.media\n        l1.speed = utils.settings.speed\n    \n        macs = get_macs(\"000000000011\", 2 * num_of_devices)\n    \n        config_values[\"tx_macs\"], config_values[\"rx_macs\"] = macs[::2], macs[1::2]\n        config_values[\"vlan_ids\"] = [str(i) for i in range(1, num_of_devices + 1)]\n    \n        ip_adds = get_ip_addresses(\"10.10.2.1\", 2 * num_of_devices)\n        ipv6_adds = get_ipv6_addrs(\"2001::1/64\", 2 * num_of_devices)\n    \n        config_values[\"tx_adds\"], config_values[\"rx_adds\"] = (\n            ip_adds[::2],\n            ip_adds[1::2],\n        )\n    \n        config_values[\"tx_ipv6_adds\"], config_values[\"rx_ipv6_adds\"] = (\n            ipv6_adds[::2],\n            ipv6_adds[1::2],\n        )\n        config_values[\"tx_rr_add1\"] = get_ip_addresses(\"200.1.0.0\", num_of_routes)\n        config_values[\"tx_rr_add2\"] = get_ip_addresses(\"201.1.0.0\", num_of_routes)\n        next_hop_addr = get_ip_addresses(\"4.4.4.1\", num_of_routes)\n    \n        config_values[\"rx_rr_add1\"] = \"210.1.0.0\"\n    \n        for i in range(1, num_of_devices + 1):\n            tx_device = config.devices.add()\n            tx_device.name = \"Tx Device {0}\".format(i)\n            tx_eth = tx_device.ethernets.add()\n            tx_eth.connection.port_name = tx_port.name\n            tx_eth.name = \"Tx eth {0}\".format(i)\n            tx_eth.mac = config_values[\"tx_macs\"][i - 1]\n            tx_vlan = tx_eth.vlans.vlan()[-1]\n            tx_vlan.name = \"Tx vlan {0}\".format(i)\n            tx_vlan.id = int(config_values[\"vlan_ids\"][i - 1])\n            tx_ip = tx_eth.ipv4_addresses.add()\n            tx_ip.name = \"Tx IP {0}\".format(i)\n            tx_ip.address = config_values[\"tx_adds\"][i - 1]\n            tx_ip.gateway = config_values[\"rx_adds\"][i - 1]\n            tx_ip.prefix = 24\n    \n            tx_ipv6 = tx_eth.ipv6_addresses.add()\n            tx_ipv6.name = \"Tx IP v6{0}\".format(i)\n            tx_ipv6.address = config_values[\"tx_ipv6_adds\"][i - 1]\n            tx_ipv6.gateway = config_values[\"rx_ipv6_adds\"][i - 1]\n            tx_ipv6.prefix = 64\n    \n            tx_bgp = tx_device.bgp\n            tx_bgp.router_id = config_values[\"tx_adds\"][i - 1]\n            tx_bgp_int = tx_bgp.ipv4_interfaces.add()\n            tx_bgp_int.ipv4_name = tx_ip.name\n            tx_peer = tx_bgp_int.peers.add()\n            tx_peer.name = \"BGP Peer {0}\".format(i)\n            tx_peer.as_type = \"ibgp\"\n            tx_peer.peer_address = config_values[\"rx_adds\"][i - 1]\n            tx_peer.as_number = 65200\n    \n            tx_rr = tx_peer.v4_routes.add(name=\"Tx RR {0}\".format(i))\n            tx_rr.addresses.add(\n                count=20, address=config_values[\"tx_rr_add1\"][i - 1], prefix=32\n            )\n            tx_rr.addresses.add(\n                count=10, address=config_values[\"tx_rr_add2\"][i - 1], prefix=24\n            )\n            tx_rr.next_hop_ipv4_address = next_hop_addr[i - 1]\n    \n        for i in range(1, num_of_devices + 1):\n            rx_device = config.devices.add()\n            rx_device.name = \"Rx Device {0}\".format(i)\n            rx_eth = rx_device.ethernets.add()\n            rx_eth.connection.port_name = rx_port.name\n            rx_eth.name = \"Rx eth {0}\".format(i)\n            rx_eth.mac = config_values[\"rx_macs\"][i - 1]\n            rx_vlan = rx_eth.vlans.vlan()[-1]\n            rx_vlan.name = \"Rx vlan {0}\".format(i)\n            rx_vlan.id = int(config_values[\"vlan_ids\"][i - 1])\n            rx_ip = rx_eth.ipv4_addresses.add()\n            rx_ip.name = \"Rx IP {0}\".format(i)\n            rx_ip.address = config_values[\"rx_adds\"][i - 1]\n            rx_ip.gateway = config_values[\"tx_adds\"][i - 1]\n            rx_ip.prefix = 24\n    \n            rx_ipv6 = rx_eth.ipv6_addresses.add()\n            rx_ipv6.name = \"Rx IP v6{0}\".format(i)\n            rx_ipv6.address = config_values[\"rx_ipv6_adds\"][i - 1]\n            rx_ipv6.gateway = config_values[\"tx_ipv6_adds\"][i - 1]\n            rx_ipv6.prefix = 64\n    \n            rx_bgp = rx_device.bgp\n            rx_bgp.router_id = config_values[\"rx_adds\"][i - 1]\n            rx_bgp_int = rx_bgp.ipv4_interfaces.add()\n            rx_bgp_int.ipv4_name = rx_ip.name\n            rx_peer = rx_bgp_int.peers.add()\n            rx_peer.name = \"Rx Bgp {0}\".format(i)\n            rx_peer.as_type = \"ibgp\"\n            rx_peer.peer_address = config_values[\"tx_adds\"][i - 1]\n            rx_peer.as_number = 65200\n    \n    \n            if i == rx_device_with_rr:\n                rx_rr = rx_peer.v4_routes.add(name=\"Rx RR {0}\".format(i))\n                rx_rr.addresses.add(\n                    count=1000,\n                    address=config_values[\"rx_rr_add1\"],\n                    prefix=32,\n                )\n    \n        config_values[\"f1_name\"] = \"f1\"\n        config_values[\"f2_name\"] = \"f2\"\n        config_values[\"f3_name\"] = \"f3\"\n        flow1, flow2, flow3 = (\n            config.flows.flow(name=config_values[\"f1_name\"])\n            .flow(name=config_values[\"f2_name\"])\n            .flow(name=config_values[\"f3_name\"])\n        )\n    \n        # Route Range as endpoints\n        flow1.tx_rx.device.tx_names = [\"Tx RR 2\", \"Tx RR 4\"]\n        flow1.tx_rx.device.rx_names = [\"Rx RR 3\"]\n        _, _, tcp = flow1.packet.ethernet().ipv4().tcp()\n        tcp.src_port.value = 555\n        tcp.dst_port.value = 666\n    \n        flow1.size.fixed = SIZE\n        flow1.duration.fixed_packets.packets = PACKETS\n    \n        flow1.metrics.enable = True\n        flow1.metrics.loss = True\n    \n        # Ethernet as endpoints\n        flow2.tx_rx.device.tx_names = [\"Tx eth 2\"]\n        flow2.tx_rx.device.rx_names = [\"Rx eth 2\"]\n    \n        flow2.size.fixed = SIZE\n        flow2.duration.fixed_packets.packets = PACKETS\n    \n        flow2.metrics.enable = True\n        flow2.metrics.loss = True\n    \n        # All Ipv4 as endpoints\n        flow3.tx_rx.device.tx_names = [\n            \"Tx IP {0}\".format(i) for i in range(1, num_of_devices + 1)\n        ]\n        flow3.tx_rx.device.rx_names = [\n            \"Rx IP {0}\".format(i) for i in range(1, num_of_devices + 1)\n        ]\n    \n        flow3.size.fixed = SIZE\n        flow3.duration.fixed_packets.packets = PACKETS\n    \n        flow3.metrics.enable = True\n        flow3.metrics.loss = True\n    \n        api.set_config(config)\n    \n        validate_compact_config(api, config_values, rx_device_with_rr)\n        print(\"Starting all protocols ...\")\n        # ps = api.protocol_state()\n        # ps.state = ps.START\n        # api.set_protocol_state(ps)\n    \n        cs = api.control_state()\n        cs.protocol.all.state = cs.protocol.all.START\n        api.set_control_state(cs)\n    \n        print(\"Starting transmit on all flows ...\")\n    \n        cs = api.control_state()\n        cs.traffic.flow_transmit.state = cs.traffic.flow_transmit.START\n>       api.set_control_state(cs)\n\ntests/test_compact.py:269: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f92a1bf4eb0>\npayload = <snappi.snappi.ControlState object at 0x7f92a06b76a0>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            event_names = []\n            event_state = None\n            event_type = control_choice\n            EventInfo = namedtuple(\n                \"EventInfo\", [\"event_type\", \"event_state\", \"event_names\"]\n            )\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self._TRIGGERED_EVENT = \"link\"\n                    if request_payload.port_names is not None:\n                        event_names = request_payload.port_names\n                        event_state = request_payload.state\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    event_state = request_payload.state\n                    with Timer(self, \"Setting route state\"):\n                        event_names = self.ngpf.set_route_state(request_payload)\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n                self.traffic_item.transmit(request_payload)\n            elif control_option is not None:\n                msg = \"{} is not a supported choice for metrics; \\\n                the supported choices are \\\n                ['port', 'protocol', traffic]\".format(\n                    control_option\n                )\n                raise SnappiIxnException(400, msg)\n            self._event_info = EventInfo(event_type, event_state, event_names)\n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 450, in set_control_state\nE               self.traffic_item.transmit(request_payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1341, in transmit\nE               if (device.rocev2) and request.state == \"stop\":\nE            'Device' object has no attribute 'rocev2'\n\nsnappi_ixnetwork/snappi_api.py:460: SnappiIxnException","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Config validation 1.806s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Ports configuration 1.214s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures configuration 0.193s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.093s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Speed conversion is not require for (port.name, speed) : [('Tx Port', 'normal'), ('Rx Port', 'normal')]","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Aggregation mode speed change 0.133s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location connect [Tx Port, Rx Port] 1.301s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1443 Tx Port connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location state check [Tx Port, Rx Port] 0.393s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Location configuration 2.571s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Layer1 configuration 1.777s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Lag Configuration 0.088s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Convert device config : 2.747s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Create IxNetwork device config : 0.002s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Push IxNetwork device config : 1.185s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Devices configuration 4.028s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows configuration 2.816s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Start interfaces 2.296s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 IxNet - Protocols Version Mismatch.","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"IxNetwork Protocols Version: 10.80.2412.12","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Chassis Protocols Version: 10.50.2410.2","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 IxNet - One or more destination MACs or VPNs are invalid or unreachable and the packets configured to be sent to them were not created","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows generate/apply 2.218s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Flows clear statistics 17.058s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1437 Captures start 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":28,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"test_compact"},{"name":"package","value":"test_compact"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":58,"unknown":0,"total":65},"items":[{"uid":"13d50fcc7ea17376","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 450, in set_control_state\n    self.traffic_item.transmit(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 1341, in transmit\n    if (device.rocev2) and request.state == \"stop\":\n 'Device' object has no attribute 'rocev2'","time":{"start":1743020239133,"stop":1743020314779,"duration":75646}},{"uid":"f62b9ede1601a961","status":"passed","time":{"start":1743003871353,"stop":1743003965762,"duration":94409}},{"uid":"e2dd3ebe314a99c1","status":"passed","time":{"start":1742996899832,"stop":1742997008030,"duration":108198}},{"uid":"1666f5987eca6f4e","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 363, in config_ixnetwork\n    self.ngpf.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 69, in config\n    self._configure_topology()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 125, in _configure_topology\n    self._rocev2.config(device, self.api.snappi_config.stateful_flows, self.api.snappi_config.options)\n 'Config' object has no attribute 'stateful_flows'","time":{"start":1742993864845,"stop":1742993878865,"duration":14020}},{"uid":"1c143def2296614f","status":"passed","time":{"start":1742381702821,"stop":1742381792672,"duration":89851}},{"uid":"8e72f2bbe3d8e303","status":"passed","time":{"start":1742374910714,"stop":1742375015363,"duration":104649}},{"uid":"78c8ca081a42e9a7","status":"passed","time":{"start":1742299164935,"stop":1742299259099,"duration":94164}},{"uid":"527adf0899771c27","status":"passed","time":{"start":1741799882568,"stop":1741799972169,"duration":89601}},{"uid":"43daa48b13060f0e","status":"passed","time":{"start":1741788649556,"stop":1741788761488,"duration":111932}},{"uid":"4b176abdc1a72381","status":"passed","time":{"start":1741764418062,"stop":1741764520190,"duration":102128}},{"uid":"b0a9eb7edd38f876","status":"passed","time":{"start":1741757585447,"stop":1741757669663,"duration":84216}},{"uid":"c76016d2a07e0f7b","status":"passed","time":{"start":1741690639312,"stop":1741690727378,"duration":88066}},{"uid":"d90fc6c5db3b6fbb","status":"passed","time":{"start":1741682454375,"stop":1741682545580,"duration":91205}},{"uid":"8f5de35993cdb4","status":"passed","time":{"start":1741584950599,"stop":1741585056496,"duration":105897}},{"uid":"dd56c1dcd382a1","status":"passed","time":{"start":1741547140558,"stop":1741547232987,"duration":92429}},{"uid":"2d1237a177df759f","status":"passed","time":{"start":1741459053851,"stop":1741459158891,"duration":105040}},{"uid":"907ea80b9a8cc9f7","status":"passed","time":{"start":1741451329877,"stop":1741451423109,"duration":93232}},{"uid":"bdfc8cab851439dc","status":"passed","time":{"start":1741375664779,"stop":1741375778042,"duration":113263}},{"uid":"23b7f5ca84edbdad","status":"passed","time":{"start":1741368681952,"stop":1741368779091,"duration":97139}},{"uid":"b496e16ab72a4c34","status":"passed","time":{"start":1741353394880,"stop":1741353507404,"duration":112524}}]},"tags":[]},"source":"f2d46fb145b81479.json","parameterValues":[]}
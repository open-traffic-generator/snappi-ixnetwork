{"uid":"5323ef3e750c3cd1","name":"test_combined_filters","historyId":"pytest:capture.test_combined_capture_filters#test_combined_filters","time":{"start":1753368506584,"stop":1753368506745,"duration":161},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b36d2f70>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b37d14b0>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nsettings = <utils.common.Settings object at 0x7f21b3db0130>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_combined_filters(api, settings, utils):\n        \"\"\"\n        This test applies ethernet and vlan capture filters and verifies correct capture results\n        \"\"\"\n        packets = 4\n        config = api.config()\n        p1, p2 = config.ports.port(\n            name=\"p1\", location=utils.settings.ports[0]\n        ).port(name=\"p2\", location=utils.settings.ports[1])\n        cap = config.captures.capture(name=\"capture1\")[-1]\n        cap.port_names = [p2.name]\n        cap.format = cap.PCAPNG\n        cap.overwrite = False\n        eth_filter, vlan_filter = cap.filters.ethernet().vlan()\n    \n        eth_filter.src.value = \"0000ff000000\"\n        eth_filter.src.mask = \"000000000000\"\n        eth_filter.src.negate = False\n        eth_filter.dst.value = \"000806020000\"\n        eth_filter.dst.mask = \"000000000000\"\n        eth_filter.dst.negate = False\n    \n        vlan_filter.id.value = \"0006\"\n        vlan_filter.id.mask = \"F000\"\n        vlan_filter.id.negate = False\n        vlan_filter.priority.value = \"07\"\n        vlan_filter.priority.mask = \"07\"\n        vlan_filter.priority.negate = True\n    \n        (f1,) = config.flows.flow(name=\"f1\")\n        f1.tx_rx.port.tx_name = p1.name\n        f1.tx_rx.port.rx_name = p2.name\n        f1.metrics.enable = True\n        f1.size.fixed = 128\n        f1.rate.pps = 1000\n        f1.duration.fixed_packets.packets = 4\n        eth, vlan = f1.packet.ethernet().vlan()\n        eth.src.values = [\n            \"00:00:ff:00:00:00\",\n            \"00:00:ff:00:00:00\",\n            \"00:00:11:00:00:00\",\n            \"00:00:ff:00:00:00\",\n        ]\n        eth.dst.values = [\n            \"00:00:07:08:00:00\",\n            \"00:00:44:00:00:00\",\n            \"00:00:09:00:00:00\",\n            \"00:08:06:02:00:00\",\n        ]\n        vlan.priority.values = [1, 2, 3, 7]\n        vlan.cfi.values = [0, 1, 0, 1]\n        vlan.id.values = [5, 3, 1, 6]\n    \n>       utils.start_traffic(api, config, start_capture=True)\n\ntests/capture/test_combined_capture_filters.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/common.py:126: in start_traffic\n    api.set_config(cfg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b36d2f70>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"capture.test_combined_capture_filters"},{"name":"package","value":"capture.test_combined_capture_filters"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":1,"passed":168,"unknown":0,"total":177},"items":[{"uid":"b95d28e56ed79f94","status":"passed","time":{"start":1752836398951,"stop":1752836629838,"duration":230887}},{"uid":"db8fe9ab3bec532c","status":"passed","time":{"start":1752760243902,"stop":1752760469909,"duration":226007}},{"uid":"ac90d39226901583","status":"passed","time":{"start":1752244885705,"stop":1752245116322,"duration":230617}},{"uid":"905381f5a48801df","status":"passed","time":{"start":1752145840252,"stop":1752146058730,"duration":218478}},{"uid":"898eea6dd0b47f79","status":"passed","time":{"start":1751479010972,"stop":1751479242755,"duration":231783}},{"uid":"6aee4542becd4f89","status":"passed","time":{"start":1751472402834,"stop":1751472630990,"duration":228156}},{"uid":"197a9b166121efe1","status":"passed","time":{"start":1751283215057,"stop":1751283439269,"duration":224212}},{"uid":"33154e1768526d26","status":"passed","time":{"start":1751276144532,"stop":1751276364263,"duration":219731}},{"uid":"bf1d736458c1020a","status":"passed","time":{"start":1751231642336,"stop":1751231870925,"duration":228589}},{"uid":"6dd75c0bdece04f0","status":"passed","time":{"start":1750985352305,"stop":1750985575688,"duration":223383}},{"uid":"a1fdc81ee265fb9f","status":"passed","time":{"start":1750836697285,"stop":1750836920364,"duration":223079}},{"uid":"a2250b27b0ea7bda","status":"passed","time":{"start":1750656827226,"stop":1750657055110,"duration":227884}},{"uid":"678d1afb8cd66bca","status":"passed","time":{"start":1750246239210,"stop":1750246463431,"duration":224221}},{"uid":"bb19e81f9609f825","status":"passed","time":{"start":1750239203710,"stop":1750239430268,"duration":226558}},{"uid":"d083e72c48a2e7f6","status":"passed","time":{"start":1749770085540,"stop":1749770305928,"duration":220388}},{"uid":"f459cf92dddaf7d3","status":"passed","time":{"start":1749546564693,"stop":1749546794795,"duration":230102}},{"uid":"9e0b216ce08facea","status":"passed","time":{"start":1748968328989,"stop":1748968550422,"duration":221433}},{"uid":"18ae0c35c980d6fa","status":"passed","time":{"start":1748929822995,"stop":1748930046066,"duration":223071}},{"uid":"12bd6264ef6388d5","status":"passed","time":{"start":1748864245704,"stop":1748864477650,"duration":231946}},{"uid":"af3e2bdd880e8b1d","status":"passed","time":{"start":1748857106711,"stop":1748857331321,"duration":224610}}]},"tags":[]},"source":"5323ef3e750c3cd1.json","parameterValues":[]}
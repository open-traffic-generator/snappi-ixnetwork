{"uid":"e47fa1042b42da98","name":"test_vlan_fields","historyId":"pytest:vlan.test_vlan_fields#test_vlan_fields","time":{"start":1744642070405,"stop":1744642081235,"duration":10830},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\n    for snappi_eotr in config.egress_only_trackings:\n 'Config' object has no attribute 'egress_only_trackings'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nconfig = <snappi.snappi.Config object at 0x7fbfb22bbbf0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:364: in config_ixnetwork\n    self.traffic_item.config()\nsnappi_ixnetwork/trafficitem.py:867: in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\nsnappi_ixnetwork/trafficitem.py:534: in get_ixn_config\n    tr = self.create_traffic(config)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7fbfb5e2caf0>\nconfig = <snappi.snappi.Config object at 0x7fbfb22bbbf0>\n\n    def create_traffic(self, config):\n        self.logger.debug(\"Creating Traffic\")\n        flows = config.flows\n        tr = {\"xpath\": \"/traffic\", \"trafficItem\": []}\n        ports = self.get_ports_encap(config)\n        devices = self.get_device_info(config)\n        for index, flow in enumerate(flows):\n            flow_name = flow._properties.get(\"name\")\n            self.logger.debug(\"Creating Traffic Item %s\" % flow_name)\n            if flow_name is None:\n                raise Exception(\"name shall not be null for flows\")\n            if flow._properties.get(\"tx_rx\") is None:\n                msg = (\n                    \"Please configure the flow endpoint\"\n                    \"for flow indexed at %s\" % index\n                )\n                raise Exception(msg)\n            self._endpoint_validation(flow)\n            if flow.tx_rx.choice is None:\n                msg = \"Flow endpoint needs to be either port or device\"\n                raise Exception(msg)\n    \n            tr_xpath = \"/traffic/trafficItem[%d]\" % self.traffic_index\n            tr[\"trafficItem\"].append(\n                {\n                    \"xpath\": tr_xpath,\n                    \"name\": \"%s\" % flow.name,\n                    \"srcDestMesh\": self._get_mesh_type(flow),\n                }\n            )\n    \n            tr[\"trafficItem\"][-1][\"endpointSet\"] = [\n                {\n                    \"xpath\": tr[\"trafficItem\"][-1][\"xpath\"]\n                    + \"/endpointSet[1]\",\n                }\n            ]\n            if flow.tx_rx.choice == \"port\":\n                tr_type = \"raw\"\n                ep = getattr(flow.tx_rx, \"port\")\n                tx_objs = [\"%s/protocols\" % ports.get(ep.tx_name)]\n                rx_objs = [\"%s/protocols\" % ports.get(ep.rx_name)]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = [\n                    o for o in tx_objs\n                ]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"destinations\"] = [\n                    o for o in rx_objs\n                ]\n            else:\n                ep = getattr(flow.tx_rx, \"device\")\n                tr_type = devices[ep.tx_names[0]][\"type\"]\n                source = []\n                destinations = []\n                scalable_sources = []\n                scalable_destinations = []\n                self._gen_dev_endpoint(\n                    devices, ep.tx_names, source, scalable_sources\n                )\n                self._gen_dev_endpoint(\n                    devices, ep.rx_names, destinations, scalable_destinations\n                )\n                if len(source) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = source\n                if len(destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"destinations\"\n                    ] = destinations\n                if len(scalable_sources) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableSources\"\n                    ] = scalable_sources\n                if len(scalable_destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableDestinations\"\n                    ] = scalable_destinations\n    \n            tr[\"trafficItem\"][-1][\"trafficType\"] = tr_type\n            if tr_type == \"raw\":\n                tr[\"trafficItem\"][-1][\"configElement\"] = self.config_raw_stack(\n                    tr_xpath, self._flows_packet[index]\n                )\n            self.traffic_index += 1\n            self.logger.debug(\n                \"Flow %s converted to %s\" % (flow_name, tr[\"trafficItem\"][-1])\n            )\n    \n        # egress only tracking\n        tr[\"egressOnlyTracking\"] = []\n>       for snappi_eotr in config.egress_only_trackings:\nE       AttributeError: 'Config' object has no attribute 'egress_only_trackings'\n\nsnappi_ixnetwork/trafficitem.py:688: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nb2b_raw_config_vports = <snappi.snappi.Config object at 0x7fbfb22bbbf0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\ntx_vport = <snappi.snappi.Port object at 0x7fbfb02ac1d0>\nrx_vport = <snappi.snappi.Port object at 0x7fbfb02ad300>\n\n    def test_vlan_fields(api, b2b_raw_config_vports, utils, tx_vport, rx_vport):\n        \"\"\"\n        Configure three raw vlan flows with ,\n        - fixed pattern for all vlan fields\n        - list pattern for all vlan fields\n        - counter pattern for all vlan fields\n        Validate,\n        - fetch the vlan header via restpy framework and validate\n          against expected.\n        \"\"\"\n        # fixed\n        flow1 = b2b_raw_config_vports.flows[0]\n        source = \"00:0C:29:E3:53:EA\"\n        destination = \"00:0C:29:E3:53:F4\"\n        ether_type = 33024\n    \n        # Vlan fields config\n        priority = 7\n        cfi = 1\n        vlan_id = 1\n    \n        flow1.packet.ethernet().vlan()\n        eth, vlan = flow1.packet[0], flow1.packet[1]\n        eth.src.value = source\n        eth.dst.value = destination\n        eth.ether_type.value = ether_type\n    \n        vlan.priority.value = priority\n    \n        vlan.cfi.value = cfi\n    \n        vlan.id.value = vlan_id\n    \n        vlan.tpid.value = vlan.tpid.X8100\n    \n        # List\n        flow2 = b2b_raw_config_vports.flows.flow(name=\"f2\")[-1]\n        flow2.tx_rx.port.tx_name = tx_vport.name\n        flow2.tx_rx.port.rx_name = rx_vport.name\n        source = \"00:0C:29:E3:53:EA\"\n        destination = \"00:0C:29:E3:53:F4\"\n        ether_type = 33024\n    \n        # Vlan fields config\n        priority_lst = [i for i in range(7)]\n        cfi_lst = [0, 1]\n        vlan_id_lst = [i for i in range(4094)]\n        tpid_lst = [i for i in range(65536)]\n    \n        flow2.packet.ethernet().vlan()\n        eth, vlan = flow2.packet[0], flow2.packet[1]\n        eth.src.value = source\n        eth.dst.value = destination\n        eth.ether_type.value = ether_type\n    \n        vlan.priority.values = priority_lst\n    \n        vlan.cfi.values = cfi_lst\n    \n        vlan.id.values = vlan_id_lst\n    \n        vlan.tpid.values = tpid_lst\n    \n        # Counter\n        flow3 = b2b_raw_config_vports.flows.flow(name=\"f3\")[-1]\n        flow3.tx_rx.port.tx_name = tx_vport.name\n        flow3.tx_rx.port.rx_name = rx_vport.name\n        source = \"00:0C:29:E3:53:EA\"\n        destination = \"00:0C:29:E3:53:F4\"\n        ether_type = 33024\n    \n        flow3.packet.ethernet().vlan()\n        eth, vlan = flow3.packet[0], flow3.packet[1]\n        eth.src.value = source\n        eth.dst.value = destination\n        eth.ether_type.value = ether_type\n    \n        vlan.priority.increment.start = 0\n        vlan.priority.increment.step = 1\n        vlan.priority.increment.count = 7\n    \n        vlan.cfi.increment.start = 0\n        vlan.cfi.increment.step = 1\n        vlan.cfi.increment.count = 1\n    \n        vlan.id.increment.start = 1\n        vlan.id.increment.step = 1\n        vlan.id.increment.count = 4094\n    \n        vlan.tpid.increment.start = 0\n        vlan.tpid.increment.step = 1\n        vlan.tpid.increment.count = 65535\n    \n>       api.set_config(b2b_raw_config_vports)\n\ntests/vlan/test_vlan_fields.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fbfb37abb80>\nconfig = <snappi.snappi.Config object at 0x7fbfb22bbbf0>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\nE               self.traffic_item.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\nE               ixn_traffic_item = self.get_ixn_config(self._config)[0]\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\nE               tr = self.create_traffic(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\nE               for snappi_eotr in config.egress_only_trackings:\nE            'Config' object has no attribute 'egress_only_trackings'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Config validation 0.057s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Ports configuration 0.293s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Captures configuration 0.192s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Location configuration 0.472s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Lag Configuration 0.090s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Convert device config : 0.271s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Push IxNetwork device config : 0.088s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Devices configuration 0.447s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1419 Flows configuration 8.284s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":14,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"vlan.test_vlan_fields"},{"name":"package","value":"vlan.test_vlan_fields"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":87,"unknown":0,"total":88},"items":[{"uid":"95d60ca099f75c38","status":"passed","time":{"start":1744628606357,"stop":1744628623107,"duration":16750}},{"uid":"4a8ea4a2d953cfef","status":"passed","time":{"start":1744607503134,"stop":1744607518872,"duration":15738}},{"uid":"30940538185c3752","status":"passed","time":{"start":1744319569642,"stop":1744319585077,"duration":15435}},{"uid":"14134573cc235ec","status":"passed","time":{"start":1744308828836,"stop":1744308845667,"duration":16831}},{"uid":"454eff3bcef7aae2","status":"passed","time":{"start":1744118178111,"stop":1744118193106,"duration":14995}},{"uid":"ccbc363601a7d6b0","status":"passed","time":{"start":1744106575909,"stop":1744106591590,"duration":15681}},{"uid":"fe5755bb19e8a9cc","status":"passed","time":{"start":1743796899201,"stop":1743796915428,"duration":16227}},{"uid":"51b3e16752d6d120","status":"passed","time":{"start":1743756339018,"stop":1743756354909,"duration":15891}},{"uid":"23bcac4c53df5c15","status":"passed","time":{"start":1743749241780,"stop":1743749258443,"duration":16663}},{"uid":"8b1788ed81a40290","status":"passed","time":{"start":1743703353732,"stop":1743703370174,"duration":16442}},{"uid":"4ddebd4f81f4af2e","status":"passed","time":{"start":1743696488928,"stop":1743696505352,"duration":16424}},{"uid":"657993e3530acdd2","status":"passed","time":{"start":1743689614468,"stop":1743689632538,"duration":18070}},{"uid":"4dd671b50b0b3bbd","status":"passed","time":{"start":1743655642521,"stop":1743655659262,"duration":16741}},{"uid":"f665572949500727","status":"passed","time":{"start":1743167009876,"stop":1743167026930,"duration":17054}},{"uid":"d466f76c24b88ccb","status":"passed","time":{"start":1743158796170,"stop":1743158813280,"duration":17110}},{"uid":"ab93c9221f675f7f","status":"passed","time":{"start":1743154377859,"stop":1743154394457,"duration":16598}},{"uid":"bd4afd6650deac13","status":"passed","time":{"start":1743142356248,"stop":1743142373753,"duration":17505}},{"uid":"9573d0e59b32d58","status":"passed","time":{"start":1743134333235,"stop":1743134350144,"duration":16909}},{"uid":"1f4d942f1c0208b0","status":"passed","time":{"start":1743107933073,"stop":1743107949160,"duration":16087}},{"uid":"ef8dca6cac726f86","status":"passed","time":{"start":1743101127011,"stop":1743101143335,"duration":16324}}]},"tags":[]},"source":"e47fa1042b42da98.json","parameterValues":[]}
{"uid":"ed752f06c9265f18","name":"test_stats_filter_e2e","historyId":"pytest:imix.test_tcp_imix_predefined_e2e#test_stats_filter_e2e","time":{"start":1754285457133,"stop":1754285803574,"duration":346441},"status":"failed","statusMessage":"assert 91 in [90, 92, 594, 1518]\n +  where 91 = len([1, 128, 194, 0, 0, 14, 170, 226, 177, 53, 224, 1, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 3, 78, 47, 65, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 144, 255, 149, 155])","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7f3b37651510>\nb2b_raw_config = <snappi.snappi.Config object at 0x7f3b3623f790>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_stats_filter_e2e(api, b2b_raw_config, utils):\n        \"\"\"\n        configure flows with ipv4 imix\n        - Send ipv4 imix predefined traffic\n    \n    \n        Validation:\n        1) Get port statistics based on port name & column names and assert\n        each port & column has returned the values and assert\n        2) Get flow statistics based on flow name & column names and assert\n        each flow & column has returned the values and assert\n        \"\"\"\n    \n        no_of_packets = 1000\n    \n        b2b_raw_config.flows.clear()\n        config = b2b_raw_config\n    \n        d1, d2 = config.devices.device(name=\"d1\").device(name=\"d2\")\n    \n        eth1 = d1.ethernets.add()\n        eth1.name = \"eth1\"\n        eth1.connection.port_name = config.ports[0].name\n        eth1.mac = \"00:ad:aa:13:11:01\"\n    \n        eth2 = d2.ethernets.add()\n        eth2.name = \"eth2\"\n        eth2.connection.port_name = config.ports[1].name\n        eth2.mac = \"00:ad:aa:13:11:02\"\n    \n        ip1 = eth1.ipv4_addresses.add()\n        ip1.name = \"ipv41\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n    \n        ip2 = eth2.ipv4_addresses.add()\n        ip2.name = \"ipv42\"\n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n    \n        f1 = config.flows.flow(name=\"f1\")[-1]\n        f1.tx_rx.device.tx_names = [ip1.name]\n        f1.tx_rx.device.rx_names = [ip2.name]\n        f1.size.weight_pairs.predefined = \"tcp_imix\"\n        f1.rate.pps = 1000\n        f1.duration.fixed_packets.packets = no_of_packets\n        f1.metrics.enable = True\n        eth, ip = f1.packet.ethernet().ipv4()\n        api.set_config(config)\n    \n        utils.start_traffic(api, b2b_raw_config)\n    \n        utils.wait_for(\n            lambda: results_ok(api, utils, no_of_packets),\n            \"stats to be as expected\",\n            timeout_seconds=20,\n        )\n        utils.stop_traffic(api, b2b_raw_config)\n>       captures_ok(\n            api, b2b_raw_config, utils, no_of_packets, config.ports[1].name\n        )\n\ntests/imix/test_tcp_imix_predefined_e2e.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f3b37651510>\ncfg = <snappi.snappi.Config object at 0x7f3b3623f790>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\npackets = 1000, name = 'rx'\n\n    def captures_ok(api, cfg, utils, packets, name):\n        \"\"\"\n        Returns normally if patterns in captured packets are as expected.\n        \"\"\"\n        pkt_count = 0\n        cap_dict = utils.get_all_captures(api, cfg)\n        for buf in cap_dict[name]:\n>           assert len(buf) in [90, 92, 594, 1518]\nE           assert 91 in [90, 92, 594, 1518]\nE            +  where 91 = len([1, 128, 194, 0, 0, 14, 170, 226, 177, 53, 224, 1, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 3, 78, 47, 65, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 144, 255, 149, 155])\n\ntests/imix/test_tcp_imix_predefined_e2e.py:86: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1518 Capture was not stopped for this port rx","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"imix.test_tcp_imix_predefined_e2e"},{"name":"package","value":"imix.test_tcp_imix_predefined_e2e"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":1,"passed":161,"unknown":0,"total":183},"items":[{"uid":"595dad16e4d4e6ab","status":"failed","statusDetails":"assert 91 in [90, 92, 594, 1518]\n +  where 91 = len([1, 128, 194, 0, 0, 14, 26, 100, 17, 135, 165, 234, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 3, 78, 47, 65, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 73, 50, 174, 164])","time":{"start":1754037821403,"stop":1754038159072,"duration":337669}},{"uid":"11e70b09c7f9e0da","status":"failed","statusDetails":"assert 99 in [90, 92, 594, 1518]\n +  where 99 = len([1, 128, 194, 0, 0, 14, 214, 64, 187, 164, 101, 17, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 11, 52, 48, 48, 48, 48, 48, 32, 77, 98, 112, 115, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 198, 163, 38, 103])","time":{"start":1754025412828,"stop":1754025758370,"duration":345542}},{"uid":"bfd03eb424efa475","status":"failed","statusDetails":"assert 99 in [90, 92, 594, 1518]\n +  where 99 = len([1, 128, 194, 0, 0, 14, 58, 19, 227, 221, 91, 110, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 11, 52, 48, 48, 48, 48, 48, 32, 77, 98, 112, 115, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 113, 136, 244, 125])","time":{"start":1754000569227,"stop":1754000909712,"duration":340485}},{"uid":"dd39ba9afe093fd1","status":"failed","statusDetails":"Exception: Time out occurred while waiting for stats to be as expected","time":{"start":1753965242171,"stop":1753965408842,"duration":166671}},{"uid":"5a34eca097bbd964","status":"failed","statusDetails":"assert 99 in [90, 92, 594, 1518]\n +  where 99 = len([1, 128, 194, 0, 0, 14, 154, 128, 127, 4, 115, 151, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 11, 52, 48, 48, 48, 48, 48, 32, 77, 98, 112, 115, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 119, 1, 0, 0, 0, 0, 0, 0, 0, 140, 131, 139, 240])","time":{"start":1753390964676,"stop":1753391313435,"duration":348759}},{"uid":"b9402fd1573f3ef7","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","time":{"start":1753368506584,"stop":1753368506623,"duration":39}},{"uid":"54c0707d37af3320","status":"passed","time":{"start":1752836398951,"stop":1752836622086,"duration":223135}},{"uid":"6fc11dd69b604db2","status":"passed","time":{"start":1752760243902,"stop":1752760473977,"duration":230075}},{"uid":"9a6de16c7f32b539","status":"passed","time":{"start":1752244885705,"stop":1752245106417,"duration":220712}},{"uid":"7f78abf0907db53e","status":"passed","time":{"start":1752145840252,"stop":1752146066805,"duration":226553}},{"uid":"6c72cef297c33c0c","status":"passed","time":{"start":1751479010972,"stop":1751479234963,"duration":223991}},{"uid":"557a3d9e3240f690","status":"passed","time":{"start":1751472402834,"stop":1751472637413,"duration":234579}},{"uid":"6739f926ee98727b","status":"passed","time":{"start":1751283215057,"stop":1751283445619,"duration":230562}},{"uid":"f93d49ce86101a95","status":"passed","time":{"start":1751276144532,"stop":1751276367658,"duration":223126}},{"uid":"78093844b2f877f3","status":"passed","time":{"start":1751231642336,"stop":1751231876882,"duration":234546}},{"uid":"70cf2c99b05a1ac5","status":"passed","time":{"start":1750985352305,"stop":1750985579856,"duration":227551}},{"uid":"7d8a645ce79446d9","status":"passed","time":{"start":1750836697285,"stop":1750836931362,"duration":234077}},{"uid":"f694c095eb5f1ffd","status":"passed","time":{"start":1750656827226,"stop":1750657060024,"duration":232798}},{"uid":"bb7fe81202221603","status":"passed","time":{"start":1750246239210,"stop":1750246469303,"duration":230093}},{"uid":"bfc0f47f74bde456","status":"passed","time":{"start":1750239203710,"stop":1750239425213,"duration":221503}}]},"tags":[]},"source":"ed752f06c9265f18.json","parameterValues":[]}
{"uid":"3f0e79b9cbfb3ce4","name":"test_convergence_dp_only","historyId":"pytest:convergence.test_convergence_dp_only#test_convergence_dp_only","time":{"start":1740664925192,"stop":1740664988789,"duration":63597},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException: <exception str() failed>","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7efe16ecbbe0>\nrequest = <snappi.snappi.MetricsRequest object at 0x7efe135bb5b0>\n\n    def get_metrics(self, request):\n        \"\"\"\n        Gets port, flow and protocol metrics.\n    \n        Args\n        ----\n        - request (Union[MetricsRequest, str]): A request for Port, Flow and\n          protocol metrics.\n          The request content MUST be vase on the OpenAPI model,\n          #/components/schemas/Result.MetricsRequest\n          See the docs/openapi.yaml document for all model details\n        \"\"\"\n        try:\n            self._connect()\n            metric_req = self.metrics_request()\n            if isinstance(request, (type(metric_req), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[MetricsRequest, str]\"\n                )\n            if isinstance(request, str) is True:\n                request = metric_req.deserialize(request)\n            # Need to change the code style when the choice Enum grows big\n            if request.get(\"choice\") == \"port\":\n                response = self.vport.results(request.port)\n                metric_res = self.metrics_response()\n                metric_res.port_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"flow\":\n                response = self.traffic_item.results(request.flow)\n                metric_res = self.metrics_response()\n                metric_res.flow_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lag\":\n                response = self.traffic_item.results(request.lag)\n                metric_res = self.metrics_response()\n                metric_res.lag_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lacp\":\n                response = self.traffic_item.results(request.lacp)\n                metric_res = self.metrics_response()\n                metric_res.lacp_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"convergence\":\n>               response = self._result(request.convergence)\n\nsnappi_ixnetwork/snappi_api.py:557: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:655: in _result\n    traffic_stat.TargetRowFilters()[traffic_index[flow_name]],\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.testplatform.sessions.ixnetwork.statistics.view.drilldown.availabletargetrowfilters.availabletargetrowfilters.AvailableTargetRowFilters object at 0x7efe1316f240>\nindex = 0\n\n    def __getitem__(self, index):\n        if isinstance(index, slice) is True:\n            start, stop, step = index.indices(len(self))\n            item = self.__class__(self._parent)\n            for i in range(start, stop, step):\n                item._object_properties.append(self._object_properties[i])\n            return item\n        elif isinstance(index, int) is True:\n            if index >= len(self._object_properties):\n>               raise IndexError\nE               IndexError\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py:112: IndexError\n\nDuring handling of the above exception, another exception occurred:\n\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7efe16ecbbe0>\nbgp_convergence_config = <snappi.snappi.Config object at 0x7efe135b8810>\n\n    def test_convergence_dp_only(utils, api, bgp_convergence_config):\n        \"\"\"\n        1. set convergence config & start traffic\n        2. validate convergence metrics for DP only\n        \"\"\"\n    \n        # convergence config DP only\n        bgp_convergence_config.events.dp_events.enable = True\n        bgp_convergence_config.events.dp_events.rx_rate_threshold = 90\n    \n        api.set_config(bgp_convergence_config)\n        print(\"Starting all protocols ...\")\n        ps = api.control_state()\n        ps.choice = ps.PROTOCOL\n        ps.protocol.choice = ps.protocol.ALL\n        ps.protocol.all.state = ps.protocol.all.START\n        res = api.set_control_state(ps)\n        if len(res.warnings) > 0:\n            print(\"Warnings: {}\".format(res.warnings))\n    \n        # Start traffic\n        cs = api.control_state()\n        cs.choice = cs.TRAFFIC\n        cs.traffic.choice = cs.traffic.FLOW_TRANSMIT\n        cs.traffic.flow_transmit.state = cs.traffic.flow_transmit.START\n        res = api.set_control_state(cs)\n        if len(res.warnings) > 0:\n            print(\"Warnings: {}\".format(res.warnings))\n    \n        # Wait for traffic to reach configured line rate\n>       utils.wait_for(\n            lambda: utils.is_traffic_running(api), \"traffic in started state\"\n        )\n\ntests/convergence/test_convergence_dp_only.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/common.py:216: in wait_for\n    res = func()\ntests/convergence/test_convergence_dp_only.py:36: in <lambda>\n    lambda: utils.is_traffic_running(api), \"traffic in started state\"\ntests/utils/common.py:519: in is_traffic_running\n    flow_stats = get_flow_stats(api)\ntests/utils/common.py:526: in get_flow_stats\n    return api.get_metrics(request).flow_metrics\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7efe16ecbbe0>\nrequest = <snappi.snappi.MetricsRequest object at 0x7efe135bb5b0>\n\n    def get_metrics(self, request):\n        \"\"\"\n        Gets port, flow and protocol metrics.\n    \n        Args\n        ----\n        - request (Union[MetricsRequest, str]): A request for Port, Flow and\n          protocol metrics.\n          The request content MUST be vase on the OpenAPI model,\n          #/components/schemas/Result.MetricsRequest\n          See the docs/openapi.yaml document for all model details\n        \"\"\"\n        try:\n            self._connect()\n            metric_req = self.metrics_request()\n            if isinstance(request, (type(metric_req), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[MetricsRequest, str]\"\n                )\n            if isinstance(request, str) is True:\n                request = metric_req.deserialize(request)\n            # Need to change the code style when the choice Enum grows big\n            if request.get(\"choice\") == \"port\":\n                response = self.vport.results(request.port)\n                metric_res = self.metrics_response()\n                metric_res.port_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"flow\":\n                response = self.traffic_item.results(request.flow)\n                metric_res = self.metrics_response()\n                metric_res.flow_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lag\":\n                response = self.traffic_item.results(request.lag)\n                metric_res = self.metrics_response()\n                metric_res.lag_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"lacp\":\n                response = self.traffic_item.results(request.lacp)\n                metric_res = self.metrics_response()\n                metric_res.lacp_metrics.deserialize(response)\n                return metric_res\n            if request.get(\"choice\") == \"convergence\":\n                response = self._result(request.convergence)\n                metric_res = self.metrics_response()\n                metric_res.convergence_metrics.deserialize(response)\n                return metric_res\n            if (\n                request.get(\"choice\")\n                in self.protocol_metrics.get_supported_protocols()\n            ):\n                response = self.protocol_metrics.results(request)\n                metric_res = self.metrics_response()\n                getattr(metric_res, request.choice + \"_metrics\").deserialize(\n                    response\n                )\n                return metric_res\n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException: <exception str() failed>\n\nsnappi_ixnetwork/snappi_api.py:572: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Config validation 0.008s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Ports configuration 0.268s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Captures configuration 0.174s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Location hosts ready [novus1-715849.ccu.is.keysight.com] 2.092s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Speed change not require due to redundant Layer1 config","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Aggregation mode speed change 0.003s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Location configuration 6.720s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1406  kError invalidCommit The only speed allowed in copper mode while AutoNegotiation is turned off is 100M","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Layer1 configuration 0.266s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Lag Configuration 0.085s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Convert device config : 0.574s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Create IxNetwork device config : 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Push IxNetwork device config : 0.490s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Devices configuration 1.148s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Flows configuration 1.799s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Start interfaces 1.878s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 IxNet - One or more destination MACs or VPNs are invalid or unreachable and the packets configured to be sent to them were not created","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Flows generate/apply 4.689s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Flows clear statistics 12.389s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Captures start 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 Flows start 4.735s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1400 event is not reflected in stat","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":25,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"convergence.test_convergence_dp_only"},{"name":"package","value":"convergence.test_convergence_dp_only"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":30,"unknown":0,"total":32},"items":[{"uid":"6d1659a72eab2f8b","status":"passed","time":{"start":1740652499661,"stop":1740652676522,"duration":176861}},{"uid":"ac301318399af6c3","status":"passed","time":{"start":1740645397455,"stop":1740645570973,"duration":173518}},{"uid":"c47e80db0afcbf47","status":"passed","time":{"start":1740487950975,"stop":1740488129612,"duration":178637}},{"uid":"1d9e81e253571e31","status":"passed","time":{"start":1740481290567,"stop":1740481457157,"duration":166590}},{"uid":"50507dd3667dd85","status":"passed","time":{"start":1740397671135,"stop":1740397857780,"duration":186645}},{"uid":"3365842cba986c39","status":"passed","time":{"start":1740390857826,"stop":1740391048463,"duration":190637}},{"uid":"9cf43ec51e0d2b82","status":"passed","time":{"start":1740165875812,"stop":1740166028309,"duration":152497}},{"uid":"92c6ceb35a211264","status":"passed","time":{"start":1740159164915,"stop":1740159351994,"duration":187079}},{"uid":"fbc282c52ffdc6a7","status":"passed","time":{"start":1740148718781,"stop":1740148865572,"duration":146791}},{"uid":"4b293da7b48bbd67","status":"passed","time":{"start":1740141333535,"stop":1740141526608,"duration":193073}},{"uid":"d02fbd82616a8a4f","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException: <exception str() failed>","time":{"start":1740050757017,"stop":1740050823630,"duration":66613}},{"uid":"11a85cf9ddc362e7","status":"passed","time":{"start":1740044059903,"stop":1740044242139,"duration":182236}},{"uid":"575c9014790deb76","status":"passed","time":{"start":1739973488769,"stop":1739973682747,"duration":193978}},{"uid":"74b88badd75a91e3","status":"passed","time":{"start":1739953282917,"stop":1739953484339,"duration":201422}},{"uid":"733603c77bc0a1ee","status":"passed","time":{"start":1739892194451,"stop":1739892390404,"duration":195953}},{"uid":"64676b97c8bcd382","status":"passed","time":{"start":1739885428297,"stop":1739885607619,"duration":179322}},{"uid":"e50691b4c6a7c5a0","status":"passed","time":{"start":1739878646362,"stop":1739878836573,"duration":190211}},{"uid":"3157ca3335651fa4","status":"passed","time":{"start":1739871967589,"stop":1739872148959,"duration":181370}},{"uid":"fe21252b54af1143","status":"passed","time":{"start":1739860677914,"stop":1739860833196,"duration":155282}},{"uid":"5050008705b3d3e3","status":"passed","time":{"start":1739854148340,"stop":1739854291105,"duration":142765}}]},"tags":[]},"source":"3f0e79b9cbfb3ce4.json","parameterValues":[]}
{"uid":"3d44e63899e774a2","name":"test_bgpv4_stats","historyId":"pytest:bgp.test_bgpv4_stats#test_bgpv4_stats","time":{"start":1758541969381,"stop":1758542054802,"duration":85421},"status":"failed","statusMessage":"assert 4 == 2\n +  where 4 = len(<snappi.snappi.Bgpv4MetricIter object at 0x7f75458cb580>)\n +    where <snappi.snappi.Bgpv4MetricIter object at 0x7f75458cb580> = <snappi.snappi.MetricsResponse object at 0x7f75458ace50>.bgpv4_metrics","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7f7545dbb1f0>\nb2b_raw_config = <snappi.snappi.Config object at 0x7f7545789260>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_bgpv4_stats(api, b2b_raw_config, utils):\n        \"\"\"\n        Test for the bgpv4 metrics\n        \"\"\"\n        api.set_config(api.config())\n        b2b_raw_config.flows.clear()\n    \n        p1, p2 = b2b_raw_config.ports\n        d1, d2 = b2b_raw_config.devices.device(name=\"tx_bgp\").device(name=\"rx_bgp\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:00:00:11\", \"00:00:00:00:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        bgp1, bgp2 = d1.bgp, d2.bgp\n    \n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n        bgp1.router_id, bgp2.router_id = \"192.0.0.1\", \"192.0.0.2\"\n        bgp1_int, bgp2_int = bgp1.ipv4_interfaces.add(), bgp2.ipv4_interfaces.add()\n        bgp1_int.ipv4_name, bgp2_int.ipv4_name = ip1.name, ip2.name\n        bgp1_peer, bgp2_peer = bgp1_int.peers.add(), bgp2_int.peers.add()\n        bgp1_peer.name, bgp2_peer.name = \"bgp1\", \"bpg2\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n        ip1.prefix = 24\n    \n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n        ip2.prefix = 24\n    \n        bgp1_peer.peer_address = \"10.1.1.2\"\n        bgp1_peer.as_type = \"ibgp\"\n        bgp1_peer.as_number = 10\n    \n        bgp2_peer.peer_address = \"10.1.1.1\"\n        bgp2_peer.as_type = \"ibgp\"\n        bgp2_peer.as_number = 10\n    \n        utils.start_traffic(api, b2b_raw_config)\n        utils.wait_for(\n            lambda: results_ok(api), \"stats to be as expected\", timeout_seconds=20\n        )\n        enums = [\n            \"session_state\",\n            \"routes_advertised\",\n            \"routes_received\",\n            \"route_withdraws_sent\",\n            \"route_withdraws_received\",\n            \"updates_sent\",\n            \"updates_received\",\n            \"opens_sent\",\n            \"opens_received\",\n            \"keepalives_sent\",\n            \"keepalives_received\",\n            \"notifications_sent\",\n            \"notifications_received\",\n        ]\n        expected_results = {\n            \"tx_bgp\": [\"up\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            \"rx_bgp\": [\"up\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        }\n        req = api.metrics_request()\n        req.bgpv4.peer_names = []\n        req.bgpv4.column_names = enums[:3]\n        results = api.get_metrics(req)\n>       assert len(results.bgpv4_metrics) == 2\nE       assert 4 == 2\nE        +  where 4 = len(<snappi.snappi.Bgpv4MetricIter object at 0x7f75458cb580>)\nE        +    where <snappi.snappi.Bgpv4MetricIter object at 0x7f75458cb580> = <snappi.snappi.MetricsResponse object at 0x7f75458ace50>.bgpv4_metrics\n\ntests/bgp/test_bgpv4_stats.py:71: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1522 tx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1522 rx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp.test_bgpv4_stats"},{"name":"package","value":"bgp.test_bgpv4_stats"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":0,"skipped":0,"passed":216,"unknown":0,"total":238},"items":[{"uid":"fc1266bc2bb326c7","status":"passed","time":{"start":1758534144550,"stop":1758534256602,"duration":112052}},{"uid":"e3433adc165e18df","status":"passed","time":{"start":1758526353634,"stop":1758526453330,"duration":99696}},{"uid":"ac1abc20627e7a93","status":"passed","time":{"start":1758517867315,"stop":1758517973779,"duration":106464}},{"uid":"1838fbac7655f69a","status":"passed","time":{"start":1758344714423,"stop":1758344835425,"duration":121002}},{"uid":"2671776f80804f5a","status":"passed","time":{"start":1758335408673,"stop":1758335516470,"duration":107797}},{"uid":"30c602804ef4adc9","status":"passed","time":{"start":1758318657548,"stop":1758318765160,"duration":107612}},{"uid":"bdb7dacb22830cfe","status":"passed","time":{"start":1758284318408,"stop":1758284432070,"duration":113662}},{"uid":"a7f51608f3041f3b","status":"passed","time":{"start":1758276810478,"stop":1758276922200,"duration":111722}},{"uid":"960e621c4c685fdf","status":"passed","time":{"start":1758266026949,"stop":1758266139694,"duration":112745}},{"uid":"d8ec21ba11a42603","status":"passed","time":{"start":1758256257749,"stop":1758256370548,"duration":112799}},{"uid":"20d258ff3d3293d1","status":"passed","time":{"start":1758221452042,"stop":1758221566786,"duration":114744}},{"uid":"1c5ebdbcfcd5b050","status":"passed","time":{"start":1758211521335,"stop":1758211615862,"duration":94527}},{"uid":"e7da377f5237ec82","status":"passed","time":{"start":1758203104632,"stop":1758203208830,"duration":104198}},{"uid":"7a2dff1747532a87","status":"passed","time":{"start":1758195412209,"stop":1758195529107,"duration":116898}},{"uid":"d29113c0895f0d08","status":"passed","time":{"start":1758187874145,"stop":1758187965031,"duration":90886}},{"uid":"acb2171b9cc2997d","status":"passed","time":{"start":1758119103099,"stop":1758119199264,"duration":96165}},{"uid":"85c49dfc57b768b4","status":"passed","time":{"start":1758089161716,"stop":1758089270429,"duration":108713}},{"uid":"27794e63015cc6f9","status":"passed","time":{"start":1757655105546,"stop":1757655218071,"duration":112525}},{"uid":"b7b51fe3d8a673ef","status":"passed","time":{"start":1756798205879,"stop":1756798304903,"duration":99024}},{"uid":"49d192373a62c640","status":"passed","time":{"start":1756451364315,"stop":1756451454349,"duration":90034}}]},"tags":[]},"source":"3d44e63899e774a2.json","parameterValues":[]}
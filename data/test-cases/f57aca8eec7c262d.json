{"uid":"f57aca8eec7c262d","name":"test_convergence","historyId":"pytest:convergence.test_convergence#test_convergence","time":{"start":1753368506584,"stop":1753368506652,"duration":68},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b36aeca0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b360a0e0>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nbgp_convergence_config = <snappi.snappi.Config object at 0x7f21b36aeca0>\n\n    def test_convergence(utils, api, bgp_convergence_config):\n        \"\"\"\n        1. set convergence config & start traffic\n        Scenario 1:\n        1. Start traffic\n        2. Withdraw Routes and see events are populated properly\n        Scenario 2:\n        1. Start traffic\n        2. Shutdown primary port and see events are populated properly\n        \"\"\"\n    \n        # convergence config\n        bgp_convergence_config.events.cp_events.enable = True\n        bgp_convergence_config.events.dp_events.enable = True\n        bgp_convergence_config.events.dp_events.rx_rate_threshold = 90\n    \n>       api.set_config(bgp_convergence_config)\n\ntests/convergence/test_convergence.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b36aeca0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"convergence.test_convergence"},{"name":"package","value":"convergence.test_convergence"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":29,"broken":0,"skipped":4,"passed":144,"unknown":0,"total":177},"items":[{"uid":"dcd416717ba17b00","status":"passed","time":{"start":1752836398951,"stop":1752837141837,"duration":742886}},{"uid":"7e214f43bad6e651","status":"passed","time":{"start":1752760243902,"stop":1752760983968,"duration":740066}},{"uid":"6c6ad4df7b7f6bd1","status":"passed","time":{"start":1752244885705,"stop":1752245622764,"duration":737059}},{"uid":"94e0a9d78b1b03e4","status":"passed","time":{"start":1752145840252,"stop":1752146594599,"duration":754347}},{"uid":"c6349367d5b2654a","status":"passed","time":{"start":1751479010972,"stop":1751479743800,"duration":732828}},{"uid":"ef68814b14000cd0","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 462, in set_control_state\n    event_names = self.ngpf.set_route_state(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 326, in set_route_state\n    self.api._ixnetwork.Globals.Topology.ApplyOnTheFly()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/globals/topology/topology_678a8dc80c9b4b2b5c741072eab4305d.py\", line 1846, in ApplyOnTheFly\n    return self._execute(\"applyOnTheFly\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 293, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 576, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 644, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 480, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  Action ApplyChanges cannot be executed while other actions are in progress. Actions in progress: \nClear Stats tx_bgpv4\n.","time":{"start":1751472402834,"stop":1751472628210,"duration":225376}},{"uid":"2b54875ccff4dee4","status":"passed","time":{"start":1751283215057,"stop":1751283962925,"duration":747868}},{"uid":"51d74af82132fb25","status":"passed","time":{"start":1751276144532,"stop":1751276905808,"duration":761276}},{"uid":"a6f0f87424565360","status":"passed","time":{"start":1751231642336,"stop":1751232388756,"duration":746420}},{"uid":"85ade5744ddf6fe0","status":"passed","time":{"start":1750985352305,"stop":1750986101738,"duration":749433}},{"uid":"559cebc9c25e7a32","status":"passed","time":{"start":1750836697285,"stop":1750837439661,"duration":742376}},{"uid":"c8604babdffc92b2","status":"passed","time":{"start":1750656827226,"stop":1750657566687,"duration":739461}},{"uid":"be20bd4db417c370","status":"passed","time":{"start":1750246239210,"stop":1750246984296,"duration":745086}},{"uid":"69e692f9a51b7ab3","status":"passed","time":{"start":1750239203710,"stop":1750239925615,"duration":721905}},{"uid":"9dabb35c9186315d","status":"passed","time":{"start":1749770085540,"stop":1749770834118,"duration":748578}},{"uid":"666a17de0464807f","status":"passed","time":{"start":1749546564693,"stop":1749547306352,"duration":741659}},{"uid":"117741b3a4148e0a","status":"passed","time":{"start":1748968328989,"stop":1748969061909,"duration":732920}},{"uid":"664f5e20d1fde26b","status":"passed","time":{"start":1748929822995,"stop":1748930559764,"duration":736769}},{"uid":"e80f164b0d9c2f99","status":"passed","time":{"start":1748864245704,"stop":1748864979651,"duration":733947}},{"uid":"169fa785c0ba5cc6","status":"passed","time":{"start":1748857106711,"stop":1748857827460,"duration":720749}}]},"tags":[]},"source":"f57aca8eec7c262d.json","parameterValues":[]}
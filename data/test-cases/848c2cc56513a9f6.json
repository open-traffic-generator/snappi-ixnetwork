{"uid":"848c2cc56513a9f6","name":"test_static_and_lacp_lag","historyId":"pytest:test_lag#test_static_and_lacp_lag","time":{"start":1753368506584,"stop":1753368506629,"duration":45},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b2684d10>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b3966500>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_static_and_lacp_lag(api, utils):\n        LACP_ATTR = {\n            \"ActorSystemId\": [\"00 22 03 00 00 03\", \"00 22 03 00 00 03\"],\n            \"ActorSystemPriority\": [\"1\", \"1\"],\n            \"ActorKey\": [\"10\", \"10\"],\n            \"ActorPortNumber\": [\"30\", \"40\"],\n            \"ActorPortPriority\": [\"100\", \"101\"],\n            \"LacpActivity\": [\"active\", \"passive\"],\n            \"LacpduPeriodicTimeInterval\": [\"5\", \"6\"],\n            \"LacpduTimeout\": [\"12\", \"13\"],\n        }\n    \n        config = api.config()\n        p1, p2, p3, p4 = (\n            config.ports.port(name=\"txp1\", location=utils.settings.ports[0])\n            .port(name=\"txp2\", location=utils.settings.ports[2])\n            .port(name=\"rxp1\", location=utils.settings.ports[1])\n            .port(name=\"rxp2\", location=utils.settings.ports[3])\n        )\n    \n        config.layer1.layer1(\n            name=\"layer1\",\n            port_names=[p.name for p in config.ports],\n            speed=utils.settings.speed,\n            media=utils.settings.media,\n        )\n    \n        lag1, lag2 = config.lags.lag(name=\"lag1\").lag(name=\"lag2\")\n        l1_p1, l1_p2 = lag1.ports.port(port_name=p1.name).port(port_name=p2.name)\n        l2_p1, l2_p2 = lag2.ports.port(port_name=p3.name).port(port_name=p4.name)\n        config.options.port_options.location_preemption = True\n    \n        lag1.protocol.static.lag_id = 5\n    \n        lag2.protocol.lacp.actor_system_id = \"00:22:03:00:00:03\"\n        lag2.protocol.lacp.actor_system_priority = int(\n            LACP_ATTR[\"ActorSystemPriority\"][0]\n        )\n        lag2.protocol.lacp.actor_key = int(LACP_ATTR[\"ActorKey\"][0])\n    \n        l2_p1.lacp.actor_port_number = int(LACP_ATTR[\"ActorPortNumber\"][0])\n        l2_p2.lacp.actor_port_number = int(LACP_ATTR[\"ActorPortNumber\"][1])\n    \n        l2_p1.lacp.actor_port_priority = int(LACP_ATTR[\"ActorPortPriority\"][0])\n        l2_p2.lacp.actor_port_priority = int(LACP_ATTR[\"ActorPortPriority\"][1])\n    \n        l2_p1.lacp.actor_activity = LACP_ATTR[\"LacpActivity\"][0]\n        l2_p2.lacp.actor_activity = LACP_ATTR[\"LacpActivity\"][1]\n    \n        l2_p1.lacp.lacpdu_periodic_time_interval = int(\n            LACP_ATTR[\"LacpduPeriodicTimeInterval\"][0]\n        )\n        l2_p2.lacp.lacpdu_periodic_time_interval = int(\n            LACP_ATTR[\"LacpduPeriodicTimeInterval\"][1]\n        )\n    \n        l2_p1.lacp.lacpdu_timeout = int(LACP_ATTR[\"LacpduTimeout\"][0])\n        l2_p2.lacp.lacpdu_timeout = int(LACP_ATTR[\"LacpduTimeout\"][1])\n    \n        l1_p1.ethernet.name, l1_p2.ethernet.name = \"eth1\", \"eth2\"\n        l2_p1.ethernet.name, l2_p2.ethernet.name = \"eth3\", \"eth4\"\n    \n        l1_p1.ethernet.mac = \"00:11:02:00:00:01\"\n        l1_p2.ethernet.mac = \"00:22:02:00:00:01\"\n        l2_p1.ethernet.mac = \"00:33:02:00:00:01\"\n        l2_p2.ethernet.mac = \"00:44:02:00:00:01\"\n    \n        l1_p1.ethernet.vlans.vlan(priority=1, name=\"vlan1\", id=1)[-1]\n        l1_p2.ethernet.vlans.vlan(priority=1, name=\"vlan2\", id=1)[-1]\n        l2_p1.ethernet.vlans.vlan(priority=1, name=\"vlan3\", id=1)[-1]\n        l2_p2.ethernet.vlans.vlan(priority=1, name=\"vlan4\", id=1)[-1]\n    \n        packets = 2000\n        f1_size = 74\n        f2_size = 1500\n        d1, d2 = config.devices.device(name=\"device1\").device(name=\"device2\")\n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = lag1.name, lag2.name\n        eth1.name, eth2.name = \"d_eth1\", \"d_eth2\"\n        eth1.mac, eth2.mac = \"00:00:00:00:00:11\", \"00:00:00:00:00:22\"\n        ip1, ip2 = eth1.ipv4_addresses.add(), eth2.ipv4_addresses.add()\n        ip1.name, ip2.name = \"ip1\", \"ip2\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n        f1, f2 = config.flows.flow(name=\"f1\").flow(name=\"f2\")\n        f1.tx_rx.port.tx_name, f1.tx_rx.port.rx_name = p1.name, p2.name\n        f2.tx_rx.port.tx_name, f2.tx_rx.port.rx_name = p3.name, p4.name\n        f1.duration.fixed_packets.packets = packets\n        f2.duration.fixed_packets.packets = packets\n        f1.size.fixed = f1_size\n        f2.size.fixed = f2_size\n        f1.rate.percentage = 10\n        f2.rate.percentage = 10\n    \n>       api.set_config(config)\n\ntests/test_lag.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b2684d10>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"test_lag"},{"name":"package","value":"test_lag"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":1,"passed":167,"unknown":0,"total":177},"items":[{"uid":"6a04111240688bce","status":"passed","time":{"start":1752836398951,"stop":1752836426788,"duration":27837}},{"uid":"c219433726e208b6","status":"passed","time":{"start":1752760243902,"stop":1752760273237,"duration":29335}},{"uid":"7354d9eafafeadeb","status":"passed","time":{"start":1752244885705,"stop":1752244915344,"duration":29639}},{"uid":"44772f49cdd9fcb7","status":"passed","time":{"start":1752145840252,"stop":1752145873757,"duration":33505}},{"uid":"6584af8648a4e542","status":"passed","time":{"start":1751479010972,"stop":1751479034048,"duration":23076}},{"uid":"12dc8c749482c628","status":"passed","time":{"start":1751472402834,"stop":1751472436248,"duration":33414}},{"uid":"4023e2c6639a9e54","status":"passed","time":{"start":1751283215057,"stop":1751283247178,"duration":32121}},{"uid":"720fc0ec3d3f798d","status":"passed","time":{"start":1751276144532,"stop":1751276176739,"duration":32207}},{"uid":"9ad0aed5caa67d84","status":"passed","time":{"start":1751231642336,"stop":1751231673476,"duration":31140}},{"uid":"c967b56c9a27227b","status":"passed","time":{"start":1750985352305,"stop":1750985386027,"duration":33722}},{"uid":"7039096f44f770b4","status":"passed","time":{"start":1750836697285,"stop":1750836724221,"duration":26936}},{"uid":"2c222005ec0834c4","status":"passed","time":{"start":1750656827226,"stop":1750656859054,"duration":31828}},{"uid":"36d6afd1bfadd284","status":"passed","time":{"start":1750246239210,"stop":1750246270469,"duration":31259}},{"uid":"754c33d8b0fd15ad","status":"passed","time":{"start":1750239203710,"stop":1750239233670,"duration":29960}},{"uid":"4a7c39cd3c7ef5df","status":"passed","time":{"start":1749770085540,"stop":1749770116103,"duration":30563}},{"uid":"4b23e92726bcfc89","status":"passed","time":{"start":1749546564693,"stop":1749546589029,"duration":24336}},{"uid":"3ab90b6f4daadab4","status":"passed","time":{"start":1748968328989,"stop":1748968360868,"duration":31879}},{"uid":"aee433e5fb372ad5","status":"passed","time":{"start":1748929822995,"stop":1748929852447,"duration":29452}},{"uid":"a789878a01262e89","status":"passed","time":{"start":1748864245704,"stop":1748864277523,"duration":31819}},{"uid":"c5b1637d7bcc6af6","status":"passed","time":{"start":1748857106711,"stop":1748857132712,"duration":26001}}]},"tags":[]},"source":"848c2cc56513a9f6.json","parameterValues":[]}
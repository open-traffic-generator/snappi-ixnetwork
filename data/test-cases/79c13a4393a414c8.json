{"uid":"79c13a4393a414c8","name":"test_vxlan_compact","historyId":"pytest:vxlan.test_vxlan_compact#test_vxlan_compact","time":{"start":1745841955218,"stop":1745841960971,"duration":5753},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 879, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 535, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 689, in create_traffic\n    for snappi_eotr in config.egress_only_tracking:\n 'Config' object has no attribute 'egress_only_tracking'","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f621b8bb790>\nconfig = <snappi.snappi.Config object at 0x7f6216d8e160>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:364: in config_ixnetwork\n    self.traffic_item.config()\nsnappi_ixnetwork/trafficitem.py:879: in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\nsnappi_ixnetwork/trafficitem.py:535: in get_ixn_config\n    tr = self.create_traffic(config)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.trafficitem.TrafficItem object at 0x7f62190f1870>\nconfig = <snappi.snappi.Config object at 0x7f6216d8e160>\n\n    def create_traffic(self, config):\n        self.logger.debug(\"Creating Traffic\")\n        flows = config.flows\n        tr = {\"xpath\": \"/traffic\", \"trafficItem\": []}\n        ports = self.get_ports_encap(config)\n        devices = self.get_device_info(config)\n        for index, flow in enumerate(flows):\n            flow_name = flow._properties.get(\"name\")\n            self.logger.debug(\"Creating Traffic Item %s\" % flow_name)\n            if flow_name is None:\n                raise Exception(\"name shall not be null for flows\")\n            if flow._properties.get(\"tx_rx\") is None:\n                msg = (\n                    \"Please configure the flow endpoint\"\n                    \"for flow indexed at %s\" % index\n                )\n                raise Exception(msg)\n            self._endpoint_validation(flow)\n            if flow.tx_rx.choice is None:\n                msg = \"Flow endpoint needs to be either port or device\"\n                raise Exception(msg)\n    \n            tr_xpath = \"/traffic/trafficItem[%d]\" % self.traffic_index\n            tr[\"trafficItem\"].append(\n                {\n                    \"xpath\": tr_xpath,\n                    \"name\": \"%s\" % flow.name,\n                    \"srcDestMesh\": self._get_mesh_type(flow),\n                }\n            )\n    \n            tr[\"trafficItem\"][-1][\"endpointSet\"] = [\n                {\n                    \"xpath\": tr[\"trafficItem\"][-1][\"xpath\"]\n                    + \"/endpointSet[1]\",\n                }\n            ]\n            if flow.tx_rx.choice == \"port\":\n                tr_type = \"raw\"\n                ep = getattr(flow.tx_rx, \"port\")\n                tx_objs = [\"%s/protocols\" % ports.get(ep.tx_name)]\n                rx_objs = [\"%s/protocols\" % ports.get(ep.rx_name)]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = [\n                    o for o in tx_objs\n                ]\n                tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"destinations\"] = [\n                    o for o in rx_objs\n                ]\n            else:\n                ep = getattr(flow.tx_rx, \"device\")\n                tr_type = devices[ep.tx_names[0]][\"type\"]\n                source = []\n                destinations = []\n                scalable_sources = []\n                scalable_destinations = []\n                self._gen_dev_endpoint(\n                    devices, ep.tx_names, source, scalable_sources\n                )\n                self._gen_dev_endpoint(\n                    devices, ep.rx_names, destinations, scalable_destinations\n                )\n                if len(source) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\"sources\"] = source\n                if len(destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"destinations\"\n                    ] = destinations\n                if len(scalable_sources) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableSources\"\n                    ] = scalable_sources\n                if len(scalable_destinations) > 0:\n                    tr[\"trafficItem\"][-1][\"endpointSet\"][0][\n                        \"scalableDestinations\"\n                    ] = scalable_destinations\n    \n            tr[\"trafficItem\"][-1][\"trafficType\"] = tr_type\n            if tr_type == \"raw\":\n                tr[\"trafficItem\"][-1][\"configElement\"] = self.config_raw_stack(\n                    tr_xpath, self._flows_packet[index]\n                )\n            self.traffic_index += 1\n            self.logger.debug(\n                \"Flow %s converted to %s\" % (flow_name, tr[\"trafficItem\"][-1])\n            )\n    \n        # egress only tracking\n        tr[\"egressOnlyTracking\"] = []\n>       for snappi_eotr in config.egress_only_tracking:\nE       AttributeError: 'Config' object has no attribute 'egress_only_tracking'\n\nsnappi_ixnetwork/trafficitem.py:689: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f621b8bb790>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_vxlan_compact(api, utils):\n        count = 4\n        config = api.config()\n    \n        edge1_macs = get_macs(\"001801000011\", count)\n        edge2_macs = get_macs(\"001601000011\", count)\n    \n        p1, p2 = config.ports.port(\n            name=\"tx\", location=utils.settings.ports[0]\n        ).port(name=\"rx\", location=utils.settings.ports[1])\n    \n        d1, d2 = config.devices.device(name=\"d1\").device(name=\"d2\")\n    \n        api.enable_scaling(True)\n    \n        e1, e2 = d1.ethernets.add(), d2.ethernets.add()\n        e1.connection.port_name, e2.connection.port_name = p1.name, p2.name\n        e1.name, e2.name = \"e1\", \"e2\"\n        e1.mac, e2.mac = \"00:01:00:00:00:01\", \"00:01:00:00:00:02\"\n    \n        ip1, ip2 = e1.ipv4_addresses.add(), e2.ipv4_addresses.add()\n        ip1.name, ip2.name = \"ip_d1\", \"ip_d2\"\n    \n        ip1.address, ip2.address = \"10.10.10.1\", \"10.10.10.2\"\n        ip1.gateway, ip2.gateway = \"10.10.10.2\", \"10.10.10.1\"\n    \n        bgp1, bgp2 = d1.bgp, d2.bgp\n        bgp1.router_id, bgp2.router_id = \"10.10.10.1\", \"10.10.10.2\"\n        bgp1_ipv4 = bgp1.ipv4_interfaces.add()\n        bgp2_ipv4 = bgp2.ipv4_interfaces.add()\n    \n        bgp1_ipv4.ipv4_name, bgp2_ipv4.ipv4_name = ip1.name, ip2.name\n        bgp1_peer, bgp2_peer = bgp1_ipv4.peers.add(), bgp2_ipv4.peers.add()\n        bgp1_peer.name, bgp2_peer.name = \"bgp_router1\", \"bgp_router2\"\n    \n        bgp1_peer.peer_address, bgp2_peer.peer_address = \"10.10.10.2\", \"10.10.10.1\"\n        bgp1_peer.as_type, bgp2_peer.as_type = \"ebgp\", \"ebgp\"\n        bgp1_peer.as_number, bgp2_peer.as_number = 100, 200\n    \n        # Create & advertise loopback under bgp in d1 & d2\n        d1_l1 = d1.ipv4_loopbacks.add()\n        d1_l1.name = \"d1_loopback1\"\n        d1_l1.eth_name = \"e1\"\n        d1_l1.address = \"1.1.1.1\"\n    \n        bgp1_l1 = bgp1_peer.v4_routes.add(name=\"bgp_l1\")\n        bgp1_l1.addresses.add(address=\"1.1.1.1\", prefix=32)\n    \n        d2_l1 = d2.ipv4_loopbacks.add()\n        d2_l1.name = \"d2_loopback1\"\n        d2_l1.eth_name = \"e2\"\n        d2_l1.address = \"2.2.2.2\"\n    \n        bgp2_l1 = bgp2_peer.v4_routes.add(name=\"bgp2_l1\")\n        bgp2_l1.addresses.add(address=\"2.2.2.2\", prefix=32)\n    \n        # Create vxlan on d1\n        d1_vxlan = d1.vxlan.v4_tunnels.add()\n    \n        d1_vxlan.vni = 1000\n        d1_vxlan.source_interface = d1_l1.name\n        d1_vxlan.name = \"d1_vxlan\"\n    \n        # unicast communication\n        vtep = d1_vxlan.destination_ip_mode.unicast.vteps.add()\n        vtep.remote_vtep_address = \"2.2.2.2\"\n        for i in range(1, count + 1):\n            vtep.arp_suppression_cache.add(edge2_macs[i], \"100.1.{}.2\".format(i))\n    \n        # Create vxlan on d2\n        d2_vxlan = d2.vxlan.v4_tunnels.add()\n    \n        d2_vxlan.vni = 1000\n        d2_vxlan.source_interface = d2_l1.name\n        d2_vxlan.name = \"d2_vxlan\"\n    \n        # unicast communication\n        vtep = d2_vxlan.destination_ip_mode.unicast.vteps.add()\n        vtep.remote_vtep_address = \"1.1.1.1\"\n        for i in range(1, count + 1):\n            vtep.arp_suppression_cache.add(edge1_macs[i], \"100.1.{}.1\".format(i))\n    \n        for i in range(1, count + 1):\n            edge1_d = config.devices.device(name=\"edge1_d{}\".format(i))[-1]\n            edge2_d = config.devices.device(name=\"edge2_d{}\".format(i))[-1]\n    \n            edge1_e = edge1_d.ethernets.ethernet()[-1]\n            edge2_e = edge2_d.ethernets.ethernet()[-1]\n    \n            edge1_e.connection.vxlan_name = \"d1_vxlan\"\n            edge2_e.connection.vxlan_name = \"d2_vxlan\"\n    \n            edge1_e.name = \"edge1_e{}\".format(i)\n            edge2_e.name = \"edge2_e{}\".format(i)\n    \n            edge1_e.mac = edge1_macs[i]\n            edge2_e.mac = edge2_macs[i]\n    \n            edge1_ip = edge1_e.ipv4_addresses.add()\n            edge2_ip = edge2_e.ipv4_addresses.add()\n    \n            edge1_ip.name = \"edge1_ip_d{}\".format(i)\n            edge2_ip.name = \"edge2_ip_d{}\".format(i)\n    \n            edge1_ip.address = \"100.1.{}.1\".format(i)\n            edge2_ip.address = \"100.1.{}.2\".format(i)\n    \n            edge1_ip.gateway = \"100.1.{}.2\".format(i)\n            edge2_ip.gateway = \"100.1.{}.1\".format(i)\n    \n            edge1_bgp, edge2_bgp = edge1_d.bgp, edge2_d.bgp\n            edge1_bgp.router_id = \"100.1.{}.1\".format(i)\n            edge2_bgp.router_id = \"100.1.{}.2\".format(i)\n    \n            edge1_bgp_ipv4 = edge1_bgp.ipv4_interfaces.add()\n            edge2_bgp_ipv4 = edge2_bgp.ipv4_interfaces.add()\n    \n            edge1_bgp_ipv4.ipv4_name = \"edge1_ip_d{}\".format(i)\n            edge2_bgp_ipv4.ipv4_name = \"edge2_ip_d{}\".format(i)\n    \n            edge1_bgp_peer = edge1_bgp_ipv4.peers.add()\n            edge2_bgp_peer = edge2_bgp_ipv4.peers.add()\n    \n            edge1_bgp_peer.name = \"edge1_bgp{}\".format(i)\n            edge2_bgp_peer.name = \"edge2_bgp{}\".format(i)\n    \n            edge1_bgp_peer.peer_address = \"100.1.{}.2\".format(i)\n            edge2_bgp_peer.peer_address = \"100.1.{}.1\".format(i)\n    \n            edge1_bgp_peer.as_type, edge2_bgp_peer.as_type = \"ibgp\", \"ibgp\"\n            edge1_bgp_peer.as_number, edge2_bgp_peer.as_number = 1000, 1000\n    \n            edge1_bgp_rr = edge1_bgp_peer.v4_routes.add(name=\"A1{}\".format(i))\n            edge1_bgp_rr.addresses.add(\n                address=\"1.1.0.{}\".format(i), count=180, prefix=32\n            )\n    \n            edge1_bgp_rr2 = edge1_bgp_peer.v4_routes.add(name=\"D1{}\".format(i))\n            edge1_bgp_rr2.addresses.add(\n                address=\"2.1.0.{}\".format(i), count=1, prefix=32\n            )\n    \n            edge2_bgp_rr = edge2_bgp_peer.v4_routes.add(name=\"A2{}\".format(i))\n            edge2_bgp_rr.addresses.add(\n                address=\"3.1.0.{}\".format(i), count=180, prefix=32\n            )\n    \n            edge2_bgp_rr2 = edge2_bgp_peer.v4_routes.add(name=\"D2{}\".format(i))\n            edge2_bgp_rr2.addresses.add(\n                address=\"4.1.0.{}\".format(i), count=1, prefix=32\n            )\n    \n        a1_routes = [\"A1{}\".format(i) for i in range(1, count + 1)]\n        d1_routes = [\"D1{}\".format(i) for i in range(1, count + 1)]\n    \n        a2_routes = [\"A2{}\".format(i) for i in range(1, count + 1)]\n        d2_routes = [\"D2{}\".format(i) for i in range(1, count + 1)]\n    \n        flow = config.flows.flow(name=\"f1\")[-1]\n        flow.tx_rx.device.tx_names = a1_routes + d1_routes\n        flow.tx_rx.device.rx_names = a2_routes + d2_routes\n    \n        flow.duration.fixed_packets.packets = count * 10\n    \n        flow.metrics.enable = True\n        flow.metrics.loss = True\n    \n>       api.set_config(config)\n\ntests/vxlan/test_vxlan_compact.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f621b8bb790>\nconfig = <snappi.snappi.Config object at 0x7f6216d8e160>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\nE               self.traffic_item.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 879, in config\nE               ixn_traffic_item = self.get_ixn_config(self._config)[0]\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 535, in get_ixn_config\nE               tr = self.create_traffic(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 689, in create_traffic\nE               for snappi_eotr in config.egress_only_tracking:\nE            'Config' object has no attribute 'egress_only_tracking'\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Config validation 0.014s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Ports configuration 0.296s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Captures configuration 0.190s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.092s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Location configuration 1.526s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Lag Configuration 0.088s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Convert device config : 0.684s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Create IxNetwork device config : 0.001s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Push IxNetwork device config : 1.247s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Devices configuration 2.026s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1424 Flows configuration 0.449s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":15,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"vxlan.test_vxlan_compact"},{"name":"package","value":"vxlan.test_vxlan_compact"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":90,"unknown":0,"total":94},"items":[{"uid":"cf139255c401036f","status":"passed","time":{"start":1745837550536,"stop":1745837566646,"duration":16110}},{"uid":"a93ed2ab028db797","status":"passed","time":{"start":1745833086105,"stop":1745833099323,"duration":13218}},{"uid":"15572bf9d7831d65","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 880, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 535, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 689, in create_traffic\n    for snappi_eotr in config.egress_only_tracking:\n 'Config' object has no attribute 'egress_only_tracking'","time":{"start":1745687367675,"stop":1745687372639,"duration":4964}},{"uid":"5be22b4ecdd40a75","status":"passed","time":{"start":1745474974403,"stop":1745474988134,"duration":13731}},{"uid":"b959b530bd51d149","status":"passed","time":{"start":1745302321831,"stop":1745302333012,"duration":11181}},{"uid":"e6bcc56e3f514ec5","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 364, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 867, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 534, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 688, in create_traffic\n    for snappi_eotr in config.egress_only_trackings:\n 'Config' object has no attribute 'egress_only_trackings'","time":{"start":1744642070405,"stop":1744642075371,"duration":4966}},{"uid":"5f1580ce0856e4fe","status":"passed","time":{"start":1744628606357,"stop":1744628618264,"duration":11907}},{"uid":"352fe5540a8542fb","status":"passed","time":{"start":1744607503134,"stop":1744607513833,"duration":10699}},{"uid":"fdbdebbe9c0a465d","status":"passed","time":{"start":1744319569642,"stop":1744319581940,"duration":12298}},{"uid":"12f57f0070a6b7bf","status":"passed","time":{"start":1744308828836,"stop":1744308840902,"duration":12066}},{"uid":"f3225e9794347ec2","status":"passed","time":{"start":1744118178111,"stop":1744118190039,"duration":11928}},{"uid":"4ccce9da0045c8d","status":"passed","time":{"start":1744106575909,"stop":1744106586089,"duration":10180}},{"uid":"4d8746bbc4f84eec","status":"passed","time":{"start":1743796899201,"stop":1743796910204,"duration":11003}},{"uid":"4487752cc3b356fe","status":"passed","time":{"start":1743756339018,"stop":1743756353428,"duration":14410}},{"uid":"f17bf1a58370a83c","status":"passed","time":{"start":1743749241780,"stop":1743749256746,"duration":14966}},{"uid":"ea9c141e96fe5f8e","status":"passed","time":{"start":1743703353732,"stop":1743703363968,"duration":10236}},{"uid":"c7fcaf1480d871fd","status":"passed","time":{"start":1743696488928,"stop":1743696502042,"duration":13114}},{"uid":"dc88209256a5fc31","status":"passed","time":{"start":1743689614468,"stop":1743689624971,"duration":10503}},{"uid":"148321c06335aa96","status":"passed","time":{"start":1743655642521,"stop":1743655654880,"duration":12359}},{"uid":"a5722dd1b8c12500","status":"passed","time":{"start":1743167009876,"stop":1743167023696,"duration":13820}}]},"tags":[]},"source":"79c13a4393a414c8.json","parameterValues":[]}
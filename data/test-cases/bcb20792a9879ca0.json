{"uid":"bcb20792a9879ca0","name":"test_bgpv6_evpn_validation","historyId":"pytest:bgp_evpn.test_bgpv6_evpn_attribute_validation#test_bgpv6_evpn_validation","time":{"start":1746512584420,"stop":1746512586948,"duration":2528},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 360, in config_ixnetwork\n    self.vport.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 162, in config\n    self._set_location()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 368, in _set_location\n    self._api._vport.ConnectPorts()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/vport/vport.py\", line 1304, in ConnectPorts\n    return self._execute(\"connectPorts\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 289, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 572, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 640, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 476, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  Port is in use by other user.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7fdf1c74ea10>\nconfig = <snappi.snappi.Config object at 0x7fdf1c17cc70>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:360: in config_ixnetwork\n    self.vport.config()\nsnappi_ixnetwork/vport.py:162: in config\n    self._set_location()\nsnappi_ixnetwork/vport.py:368: in _set_location\n    self._api._vport.ConnectPorts()\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/vport/vport.py:1304: in ConnectPorts\n    return self._execute(\"connectPorts\", payload=payload, response_object=None)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py:452: in _execute\n    response = self._connection._execute(url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:289: in _execute\n    return self._send_recv(\"POST\", url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:572: in _send_recv\n    return self._poll()\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:640: in _poll\n    return self._process_response_status_code(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7fdf1c7227d0>\nurl = None\nheaders = {'Connection': 'keep-alive', 'Content-Type': 'application/json', 'User-Agent': 'ixnetwork-restpy', 'X-Api-Key': '72b147e77ad34d9b95881a58620960f6', ...}\nresponse = <Response [400]>\nasync_status = {'executionTimeMs': 0.0, 'id': '', 'message': None, 'progress': 100, ...}\n\n    def _process_response_status_code(self, url, headers, response, async_status=False):\n        errors = []\n        # add the initial error\n        if async_status is True:\n            async_status = response.json()\n            if (\n                \"message\" in async_status\n                and async_status[\"message\"] is not None\n                and \"API CONTENTION\" in async_status[\"message\"]\n            ):\n                response.status_code = 409\n            else:\n                response.status_code = 400\n            error = \"\"\n            if \"message\" in async_status and async_status[\"message\"] is not None:\n                error += \" \" + async_status[\"message\"]\n            if \"result\" in async_status and async_status[\"result\"] is not None:\n                error += \" \" + async_status[\"result\"]\n            errors.append(error)\n        else:\n            try:\n                for error in response.json()[\"errors\"]:\n                    errors.append(error[\"detail\"])\n            except:\n                errors.append(response.text)\n        # add any /globals/appErrors/error items\n        try:\n            preamble = url[\n                0 : url.find(\"/\", url.find(\"/sessions/\") + len(\"/sessions/\"))\n            ]\n            url = preamble + \"/ixnetwork/globals/appErrors/error\"\n            self._print_request(\"GET\", url)\n            error_response = self._session.request(\n                \"GET\",\n                url,\n                headers=headers,\n                verify=self._verify_cert,\n                allow_redirects=False,\n            )\n            server_info = \"\\tCurrent Server Errors/Warnings:\"\n            for error in error_response.json():\n                if error[\"errorLevel\"] in [\"kError\", \"kWarning\"]:\n                    if server_info is not None:\n                        errors.append(server_info)\n                        server_info = None\n                    errors.append(\n                        \"\\t%s [%s] [%s] %s\"\n                        % (\n                            error[\"lastModified\"],\n                            error[\"errorLevel\"][1:].upper(),\n                            error[\"name\"],\n                            error[\"description\"],\n                        )\n                    )\n        except:\n            pass\n        # raise the appropriate error\n        message = \"\\n\".join(errors)\n        logging.getLogger(__name__).debug(message)\n        if response.status_code == 400:\n>           raise BadRequestError(message, response.status_code)\nE           ixnetwork_restpy.errors.BadRequestError:  Port is in use by other user.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:476: BadRequestError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fdf1c74ea10>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_bgpv6_evpn_validation(api, utils):\n        \"Validate BGP EVPN Attributes against RestPy\"\n    \n        BGPV6_EVPN_ETH_SEGMENT = {\n            \"DfElectionTimer\": 10,\n            \"EsiValue\": \"1000000000000000\",\n            \"EsiLabel\": 8,\n            \"EnableSingleActive\": \"true\",\n            \"MultiExitDiscriminator\": 5,\n            \"EnableMultiExitDiscriminator\": \"true\",\n            \"Origin\": \"egp\",\n            \"EnableOrigin\": \"true\",\n            \"EnableCommunity\": \"true\",\n            \"EnableExtendedCommunity\": \"true\",\n            \"EnableAsPathSegments\": \"true\",\n            \"AsSetMode\": \"includelocalasasasset\",\n        }\n    \n        BGPV6_EVPN_ETH_SEGMENT_COMMUNITIES_lIST = {\n            \"Type\": \"manual\",\n            \"AsNumber\": \"8\",\n            \"LastTwoOctets\": \"8\",\n        }\n    \n        BGPV6_EVPN_ETH_SEGMENT_EXT_COMMUNITIES_lIST = {\n            \"Type\": \"opaque\",\n            \"SubType\": \"color\",\n            \"ColorValue\": \"200\",\n        }\n    \n        BGPV6_EVPN_ETH_SEGMENT_ASPATH_SEGMENTS_lIST = {\n            \"SegmentType\": \"asseqconfederation\",\n        }\n    \n        BGPV6_EVPN_VXLAN = {\n            \"AdRouteLabel\": 10,\n            \"UpstreamDownstreamAssignedMplsLabel\": 20,\n            \"RdASNumber\": 1000,\n            \"RdEvi\": 10,\n            \"MultiExitDiscriminator\": 99,\n        }\n    \n        BGPV6_EVPN_VXLAN_EXPORT_TARGET = {\n            \"TargetAs4Number\": \"100\",\n            \"TargetAssignedNumber\": \"20\",\n        }\n    \n        BGPV6_EVPN_VXLAN_IMPORT_TARGET = {\n            \"TargetAs4Number\": \"200\",\n            \"TargetAssignedNumber\": \"30\",\n        }\n    \n        BGPV6_EVPN_VXLAN_L3_EXPORT_TARGET = {\n            \"TargetAs4Number\": \"300\",\n            \"TargetAssignedNumber\": \"50\",\n        }\n    \n        BGPV6_EVPN_VXLAN_L3_IMPORT_TARGET = {\n            \"TargetAs4Number\": \"400\",\n            \"TargetAssignedNumber\": \"60\",\n        }\n    \n        BROADCAST_DOMAIN = {\"EthernetTagId\": \"5\", \"EnableVlanAwareService\": \"true\"}\n    \n        MAC_ADDRESS = {\n            \"Mac\": \"10:11:22:33:44:55\",\n            \"PrefixLength\": \"48\",\n            \"NumberOfAddressesAsy\": \"1\",\n        }\n    \n        IP_ADDRESS = {\n            \"NetworkAddress\": \"2.2.2.2\",\n            \"PrefixLength\": \"24\",\n            \"NumberOfAddressesAsy\": \"1\",\n        }\n    \n        IPV6_ADDRESS = {\n            \"NetworkAddress\": \"2000:0:2:1::1\",\n            \"PrefixLength\": \"64\",\n            \"NumberOfAddressesAsy\": \"1\",\n        }\n    \n        CMAC_PROPERTIES = {\n            \"FirstLabelStart\": \"16\",\n            \"SecondLabelStart\": \"20\",\n            \"MultiExitDiscriminator\": \"37\",\n            \"IncludeDefaultGatewayExtendedCommunity\": \"true\",\n        }\n    \n        # Creating Ports\n        config = api.config()\n        p1 = config.ports.port(name=\"p1\", location=utils.settings.ports[0])[-1]\n        # Create BGP devices on tx\n        tx_d = config.devices.device(name=\"tx_d\")[-1]\n        tx_eth = tx_d.ethernets.add()\n        tx_eth.connection.port_name = p1.name\n        tx_eth.name = \"tx_eth\"\n        tx_eth.mac = \"00:11:00:00:00:01\"\n        tx_ip = tx_eth.ipv6_addresses.ipv6(\n            name=\"tx_ip\", address=\"2000::2\", gateway=\"2000::1\"\n        )[-1]\n    \n        # tx_bgp\n        tx_bgp = tx_d.bgp\n        tx_bgp.router_id = \"192.0.0.1\"\n        tx_bgp_iface = tx_bgp.ipv6_interfaces.v6interface(ipv6_name=tx_ip.name)[-1]\n        tx_bgp_peer = tx_bgp_iface.peers.v6peer(\n            name=\"tx_eBGP\", peer_address=\"2000::1\", as_type=\"ebgp\", as_number=100\n        )[-1]\n    \n        # Create & advertise loopback under bgp in tx and rx\n        tx_l1 = tx_d.ipv6_loopbacks.add()\n        tx_l1.name = \"tx_loopback1\"\n        tx_l1.eth_name = \"tx_eth\"\n        tx_l1.address = \"2222::1\"\n        tx_l1_r = tx_bgp_peer.v6_routes.add(name=\"tx_l1\")\n        tx_l1_r.addresses.add(address=\"2222::1\", prefix=64)\n    \n        # Create BGP EVPN on tx\n        tx_vtep = config.devices.device(name=\"tx_vtep\")[-1]\n        tx_vtep_bgp = tx_vtep.bgp\n        tx_vtep_bgp.router_id = \"190.0.0.1\"\n        tx_vtep_bgp_iface = tx_vtep_bgp.ipv6_interfaces.v6interface(\n            ipv6_name=tx_l1.name\n        )[-1]\n        tx_vtep_bgp_peer = tx_vtep_bgp_iface.peers.v6peer(\n            name=\"bgp1\", peer_address=\"2000::1\", as_type=\"ibgp\", as_number=101\n        )[-1]\n    \n        tx_eth_seg = tx_vtep_bgp_peer.evpn_ethernet_segments.ethernetsegment()[-1]\n        tx_eth_seg.df_election.election_timer = BGPV6_EVPN_ETH_SEGMENT[\n            \"DfElectionTimer\"\n        ]\n        tx_eth_seg.esi = BGPV6_EVPN_ETH_SEGMENT[\"EsiValue\"]\n        tx_eth_seg.esi_label = BGPV6_EVPN_ETH_SEGMENT[\"EsiLabel\"]\n        tx_eth_seg.active_mode = tx_eth_seg.SINGLE_ACTIVE\n        tx_eth_seg.advanced.origin = tx_eth_seg.advanced.EGP\n        tx_eth_seg.advanced.multi_exit_discriminator = BGPV6_EVPN_ETH_SEGMENT[\n            \"MultiExitDiscriminator\"\n        ]\n        tx_eth_seg_community = tx_eth_seg.communities.add()\n        tx_eth_seg_community.type = tx_eth_seg_community.MANUAL_AS_NUMBER\n        tx_eth_seg_community.as_number = int(\n            BGPV6_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"AsNumber\"]\n        )\n        tx_eth_seg_community.as_custom = int(\n            BGPV6_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"LastTwoOctets\"]\n        )\n        tx_eth_seg_ext_community = tx_eth_seg.ext_communities.add()\n        tx_eth_seg_ext_community.type = \"opaque\"\n        tx_eth_seg_ext_community.subtype = \"color\"\n        tx_eth_seg_ext_community.value = \"0000000000C8\"\n        tx_eth_seg.as_path.as_set_mode = \"include_as_set\"\n        tx_eth_seg.as_path.segments.add(\"as_confed_seq\", [2, 3])\n    \n        # Adding Tx EVI on the Ethernet Segment\n        tx_evi_vxlan = tx_eth_seg.evis.evi_vxlan()[-1]\n        tx_evi_vxlan.route_distinguisher.rd_type = (\n            tx_evi_vxlan.route_distinguisher.AS_2OCTET\n        )\n        tx_evi_vxlan.route_distinguisher.rd_value = (\n            str(BGPV6_EVPN_VXLAN[\"RdASNumber\"])\n            + \":\"\n            + str(BGPV6_EVPN_VXLAN[\"RdEvi\"])\n        )\n        tx_evi_vxlan.ad_label = BGPV6_EVPN_VXLAN[\"AdRouteLabel\"]\n        tx_evi_vxlan.pmsi_label = BGPV6_EVPN_VXLAN[\n            \"UpstreamDownstreamAssignedMplsLabel\"\n        ]\n    \n        export_rt = tx_evi_vxlan.route_target_export.routetarget()[-1]\n        import_rt = tx_evi_vxlan.route_target_import.routetarget()[-1]\n        export_rt.rt_type = export_rt.AS_4OCTET\n        export_rt.rt_value = (\n            BGPV6_EVPN_VXLAN_EXPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV6_EVPN_VXLAN_EXPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n        import_rt.rt_type = import_rt.AS_4OCTET\n        import_rt.rt_value = (\n            BGPV6_EVPN_VXLAN_IMPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV6_EVPN_VXLAN_IMPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n    \n        l3_export_rt = tx_evi_vxlan.l3_route_target_export.routetarget()[-1]\n        l3_import_rt = tx_evi_vxlan.l3_route_target_import.routetarget()[-1]\n        l3_export_rt.rt_type = l3_export_rt.AS_4OCTET\n        l3_export_rt.rt_value = (\n            BGPV6_EVPN_VXLAN_L3_EXPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV6_EVPN_VXLAN_L3_EXPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n        l3_import_rt.rt_type = l3_import_rt.AS_4OCTET\n        l3_import_rt.rt_value = (\n            BGPV6_EVPN_VXLAN_L3_IMPORT_TARGET[\"TargetAs4Number\"]\n            + \":\"\n            + BGPV6_EVPN_VXLAN_L3_IMPORT_TARGET[\"TargetAssignedNumber\"]\n        )\n    \n        tx_evi_vxlan.advanced.origin = tx_evi_vxlan.advanced.EGP\n        tx_evi_vxlan.advanced.multi_exit_discriminator = BGPV6_EVPN_VXLAN[\n            \"MultiExitDiscriminator\"\n        ]\n        tx_evi_vxlan_comm = tx_evi_vxlan.communities.add()\n        tx_evi_vxlan_comm.type = tx_evi_vxlan_comm.MANUAL_AS_NUMBER\n        tx_evi_vxlan_comm.as_number = BGPV6_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\n            \"AsNumber\"\n        ]\n        tx_evi_vxlan_comm.as_custom = BGPV6_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\n            \"LastTwoOctets\"\n        ]\n        tx_evi_vxlan_ext_comm = tx_evi_vxlan.ext_communities.add()\n        tx_evi_vxlan_ext_comm.type = \"opaque\"\n        tx_evi_vxlan_ext_comm.subtype = \"color\"\n        tx_evi_vxlan_ext_comm.value = \"0000000000C8\"\n        tx_evi_vxlan.as_path.segments.add(\"as_confed_seq\", [9, 10])\n    \n        # Adding tx Broadcast Domain per EVI and MAC range\n        tx_evpn_brodcast_domain = tx_evi_vxlan.broadcast_domains.broadcastdomain()[\n            -1\n        ]\n        tx_evpn_brodcast_domain.ethernet_tag_id = int(\n            BROADCAST_DOMAIN[\"EthernetTagId\"]\n        )\n        tx_evpn_brodcast_domain.vlan_aware_service = True\n        tx_broadcast_macrange = tx_evpn_brodcast_domain.cmac_ip_range.cmaciprange(\n            l2vni=16, l3vni=20, name=\"tx_cmaciprange\", include_default_gateway=True\n        )[-1]\n        tx_broadcast_macrange.mac_addresses.address = MAC_ADDRESS[\"Mac\"]\n        tx_broadcast_macrange.ipv4_addresses.address = IP_ADDRESS[\"NetworkAddress\"]\n        tx_broadcast_macrange.ipv6_addresses.address = IPV6_ADDRESS[\n            \"NetworkAddress\"\n        ]\n    \n        tx_broadcast_macrange.advanced.multi_exit_discriminator = int(\n            CMAC_PROPERTIES[\"MultiExitDiscriminator\"]\n        )\n    \n        cmac_comm = tx_broadcast_macrange.communities.add()\n        cmac_comm.type = cmac_comm.MANUAL_AS_NUMBER\n        cmac_comm.as_number = BGPV6_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\"AsNumber\"]\n        cmac_comm.as_custom = BGPV6_EVPN_ETH_SEGMENT_COMMUNITIES_lIST[\n            \"LastTwoOctets\"\n        ]\n        cmac_ext_comm = tx_broadcast_macrange.ext_communities.add()\n        cmac_ext_comm.type = \"opaque\"\n        cmac_ext_comm.subtype = \"color\"\n        cmac_ext_comm.value = \"0000000000C8\"\n        tx_broadcast_macrange.as_path.segments.add(\"as_confed_seq\", [9, 10])\n    \n>       api.set_config(config)\n\ntests/bgp_evpn/test_bgpv6_evpn_attribute_validation.py:255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fdf1c74ea10>\nconfig = <snappi.snappi.Config object at 0x7fdf1c17cc70>\n\n    def set_config(self, config):\n        \"\"\"Set or update the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = True\n                        ixn_cpdpconvergence.DataPlaneThreshold = rx_rate_threshold\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 276, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 360, in config_ixnetwork\nE               self.vport.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 162, in config\nE               self._set_location()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/vport.py\", line 368, in _set_location\nE               self._api._vport.ConnectPorts()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/vport/vport.py\", line 1304, in ConnectPorts\nE               return self._execute(\"connectPorts\", payload=payload, response_object=None)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\nE               response = self._connection._execute(url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 289, in _execute\nE               return self._send_recv(\"POST\", url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 572, in _send_recv\nE               return self._poll()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 640, in _poll\nE               return self._process_response_status_code(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 476, in _process_response_status_code\nE               raise BadRequestError(message, response.status_code)\nE             Port is in use by other user.\n\nsnappi_ixnetwork/snappi_api.py:317: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Config validation 0.013s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Ports configuration 0.288s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Captures configuration 0.194s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.097s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Location connect [p1] 0.102s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Location state check [p1] 0.188s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Location configuration 0.857s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":10,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"bgp_evpn.test_bgpv6_evpn_attribute_validation"},{"name":"package","value":"bgp_evpn.test_bgpv6_evpn_attribute_validation"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":1,"passed":117,"unknown":0,"total":120},"items":[{"uid":"e87e845ef9dd6d3a","status":"passed","time":{"start":1746463364453,"stop":1746463397164,"duration":32711}},{"uid":"42836546d90873bf","status":"passed","time":{"start":1746454829753,"stop":1746454861067,"duration":31314}},{"uid":"5f6b3a4c72b8b8fe","status":"passed","time":{"start":1746433188387,"stop":1746433216031,"duration":27644}},{"uid":"d7b265792e2118c2","status":"passed","time":{"start":1746421868637,"stop":1746421901249,"duration":32612}},{"uid":"7acf6696a6b552b5","status":"passed","time":{"start":1746414762134,"stop":1746414791817,"duration":29683}},{"uid":"25b03ffe3bf41040","status":"passed","time":{"start":1746232601079,"stop":1746232628472,"duration":27393}},{"uid":"4e58e95b41f7cfe","status":"passed","time":{"start":1746224382039,"stop":1746224410319,"duration":28280}},{"uid":"477da9e1417d287b","status":"passed","time":{"start":1746217344058,"stop":1746217378317,"duration":34259}},{"uid":"5933eb57b3f897dd","status":"passed","time":{"start":1746199805015,"stop":1746199837436,"duration":32421}},{"uid":"8c7482989620a7bb","status":"passed","time":{"start":1746181689995,"stop":1746181722765,"duration":32770}},{"uid":"af3a1c0d689a6996","status":"passed","time":{"start":1746174663641,"stop":1746174694949,"duration":31308}},{"uid":"b47fb97c8a82ee3b","status":"passed","time":{"start":1746117825457,"stop":1746117858530,"duration":33073}},{"uid":"7b7035d993b5287a","status":"passed","time":{"start":1746098916418,"stop":1746098944814,"duration":28396}},{"uid":"7868741b78d26fd3","status":"passed","time":{"start":1746064489784,"stop":1746064516764,"duration":26980}},{"uid":"946c49de018f2417","status":"skipped","statusDetails":"CI-Testing","time":{"start":1746042370552,"stop":1746042370553,"duration":1}},{"uid":"9449a7ccb6a1be6b","status":"passed","time":{"start":1746025407819,"stop":1746025439480,"duration":31661}},{"uid":"fafd82a798c8bd81","status":"passed","time":{"start":1746017351140,"stop":1746017382026,"duration":30886}},{"uid":"20fb84c9f8f82363","status":"passed","time":{"start":1745951248306,"stop":1745951283798,"duration":35492}},{"uid":"98b641a87e2cc09a","status":"passed","time":{"start":1745944306045,"stop":1745944337366,"duration":31321}},{"uid":"a67c92a4f2a4e098","status":"passed","time":{"start":1745937122343,"stop":1745937159839,"duration":37496}}]},"tags":[]},"source":"bcb20792a9879ca0.json","parameterValues":[]}
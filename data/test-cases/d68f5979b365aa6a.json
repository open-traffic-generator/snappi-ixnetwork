{"uid":"d68f5979b365aa6a","name":"test_compact","historyId":"pytest:test_compact#test_compact","time":{"start":1731158298730,"stop":1731158401600,"duration":102870},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 354, in set_control_state\n    self.ngpf.set_route_state(request_payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 286, in set_route_state\n    self.api._ixnetwork.Globals.Topology.ApplyOnTheFly()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/globals/topology/topology_678a8dc80c9b4b2b5c741072eab4305d.py\", line 1846, in ApplyOnTheFly\n    return self._execute(\"applyOnTheFly\", payload=payload, response_object=None)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\n    response = self._connection._execute(url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 289, in _execute\n    return self._send_recv(\"POST\", url, payload)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 572, in _send_recv\n    return self._poll()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 640, in _poll\n    return self._process_response_status_code(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 476, in _process_response_status_code\n    raise BadRequestError(message, response.status_code)\n  Action ApplyChanges cannot be executed while other actions are in progress. Actions in progress: \nClear Stats Rx IP v61\n.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7ff16736c910>\npayload = <snappi.snappi.ControlState object at 0x7ff165cc86d0>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n>                   self.ngpf.set_route_state(request_payload)\n\nsnappi_ixnetwork/snappi_api.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/device/ngpf.py:286: in set_route_state\n    self.api._ixnetwork.Globals.Topology.ApplyOnTheFly()\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/globals/topology/topology_678a8dc80c9b4b2b5c741072eab4305d.py:1846: in ApplyOnTheFly\n    return self._execute(\"applyOnTheFly\", payload=payload, response_object=None)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py:452: in _execute\n    response = self._connection._execute(url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:289: in _execute\n    return self._send_recv(\"POST\", url, payload)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:572: in _send_recv\n    return self._poll()\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:640: in _poll\n    return self._process_response_status_code(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7ff166ed5480>\nurl = None\nheaders = {'Connection': 'keep-alive', 'Content-Type': 'application/json', 'User-Agent': 'ixnetwork-restpy', 'X-Api-Key': '72b147e77ad34d9b95881a58620960f6', ...}\nresponse = <Response [400]>\nasync_status = {'executionTimeMs': 1.0, 'id': '', 'message': None, 'progress': 100, ...}\n\n    def _process_response_status_code(self, url, headers, response, async_status=False):\n        errors = []\n        # add the initial error\n        if async_status is True:\n            async_status = response.json()\n            if (\n                \"message\" in async_status\n                and async_status[\"message\"] is not None\n                and \"API CONTENTION\" in async_status[\"message\"]\n            ):\n                response.status_code = 409\n            else:\n                response.status_code = 400\n            error = \"\"\n            if \"message\" in async_status and async_status[\"message\"] is not None:\n                error += \" \" + async_status[\"message\"]\n            if \"result\" in async_status and async_status[\"result\"] is not None:\n                error += \" \" + async_status[\"result\"]\n            errors.append(error)\n        else:\n            try:\n                for error in response.json()[\"errors\"]:\n                    errors.append(error[\"detail\"])\n            except:\n                errors.append(response.text)\n        # add any /globals/appErrors/error items\n        try:\n            preamble = url[\n                0 : url.find(\"/\", url.find(\"/sessions/\") + len(\"/sessions/\"))\n            ]\n            url = preamble + \"/ixnetwork/globals/appErrors/error\"\n            self._print_request(\"GET\", url)\n            error_response = self._session.request(\n                \"GET\",\n                url,\n                headers=headers,\n                verify=self._verify_cert,\n                allow_redirects=False,\n            )\n            server_info = \"\\tCurrent Server Errors/Warnings:\"\n            for error in error_response.json():\n                if error[\"errorLevel\"] in [\"kError\", \"kWarning\"]:\n                    if server_info is not None:\n                        errors.append(server_info)\n                        server_info = None\n                    errors.append(\n                        \"\\t%s [%s] [%s] %s\"\n                        % (\n                            error[\"lastModified\"],\n                            error[\"errorLevel\"][1:].upper(),\n                            error[\"name\"],\n                            error[\"description\"],\n                        )\n                    )\n        except:\n            pass\n        # raise the appropriate error\n        message = \"\\n\".join(errors)\n        logging.getLogger(__name__).debug(message)\n        if response.status_code == 400:\n>           raise BadRequestError(message, response.status_code)\nE           ixnetwork_restpy.errors.BadRequestError:  Action ApplyChanges cannot be executed while other actions are in progress. Actions in progress: \nE           Clear Stats Rx IP v61\nE           .\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:476: BadRequestError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7ff16736c910>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_compact(api, utils):\n        \"\"\"\n        1. Configure 1000 similar devices contain Ether>IPv4>BGPv4\n           route in two ports\n        2. Create three traffic each traffic with diff set of endpoints\n        3. Concrete class should compact the devices to IxNet DeviceGroup.\n        4. Validate all through RestPy\n        \"\"\"\n        SIZE = 1024\n        PACKETS = 1000\n    \n        config_values = dict()\n        num_of_devices = 1000\n        num_of_routes = 1000\n        config_values[\"d1_name\"] = \"Tx Device 1\"\n        config_values[\"d2_name\"] = \"Rx Device 1\"\n        config_values[\"d3_name\"] = \"Rx Device 3\"\n        config_values[\"Multiplier\"] = num_of_devices\n        rx_device_with_rr = 3\n    \n        config = api.config()\n        api.enable_scaling(True)\n    \n        tx_port, rx_port = config.ports.port(\n            name=\"Tx Port\", location=utils.settings.ports[0]\n        ).port(name=\"Rx Port\", location=utils.settings.ports[1])\n    \n        l1 = config.layer1.layer1()[0]\n        l1.name = \"l1\"\n        l1.port_names = [rx_port.name, tx_port.name]\n        l1.media = utils.settings.media\n        l1.speed = utils.settings.speed\n    \n        macs = get_macs(\"000000000011\", 2 * num_of_devices)\n    \n        config_values[\"tx_macs\"], config_values[\"rx_macs\"] = macs[::2], macs[1::2]\n        config_values[\"vlan_ids\"] = [str(i) for i in range(1, num_of_devices + 1)]\n    \n        ip_adds = get_ip_addresses(\"10.10.2.1\", 2 * num_of_devices)\n        ipv6_adds = get_ipv6_addrs(\"2001::1/64\", 2 * num_of_devices)\n    \n        config_values[\"tx_adds\"], config_values[\"rx_adds\"] = (\n            ip_adds[::2],\n            ip_adds[1::2],\n        )\n    \n        config_values[\"tx_ipv6_adds\"], config_values[\"rx_ipv6_adds\"] = (\n            ipv6_adds[::2],\n            ipv6_adds[1::2],\n        )\n        config_values[\"tx_rr_add1\"] = get_ip_addresses(\"200.1.0.0\", num_of_routes)\n        config_values[\"tx_rr_add2\"] = get_ip_addresses(\"201.1.0.0\", num_of_routes)\n        next_hop_addr = get_ip_addresses(\"4.4.4.1\", num_of_routes)\n    \n        config_values[\"rx_rr_add1\"] = \"210.1.0.0\"\n    \n        for i in range(1, num_of_devices + 1):\n            tx_device = config.devices.add()\n            tx_device.name = \"Tx Device {0}\".format(i)\n            tx_eth = tx_device.ethernets.add()\n            tx_eth.connection.port_name = tx_port.name\n            tx_eth.name = \"Tx eth {0}\".format(i)\n            tx_eth.mac = config_values[\"tx_macs\"][i - 1]\n            tx_vlan = tx_eth.vlans.vlan()[-1]\n            tx_vlan.name = \"Tx vlan {0}\".format(i)\n            tx_vlan.id = int(config_values[\"vlan_ids\"][i - 1])\n            tx_ip = tx_eth.ipv4_addresses.add()\n            tx_ip.name = \"Tx IP {0}\".format(i)\n            tx_ip.address = config_values[\"tx_adds\"][i - 1]\n            tx_ip.gateway = config_values[\"rx_adds\"][i - 1]\n            tx_ip.prefix = 24\n    \n            tx_ipv6 = tx_eth.ipv6_addresses.add()\n            tx_ipv6.name = \"Tx IP v6{0}\".format(i)\n            tx_ipv6.address = config_values[\"tx_ipv6_adds\"][i - 1]\n            tx_ipv6.gateway = config_values[\"rx_ipv6_adds\"][i - 1]\n            tx_ipv6.prefix = 64\n    \n            tx_bgp = tx_device.bgp\n            tx_bgp.router_id = config_values[\"tx_adds\"][i - 1]\n            tx_bgp_int = tx_bgp.ipv4_interfaces.add()\n            tx_bgp_int.ipv4_name = tx_ip.name\n            tx_peer = tx_bgp_int.peers.add()\n            tx_peer.name = \"BGP Peer {0}\".format(i)\n            tx_peer.as_type = \"ibgp\"\n            tx_peer.peer_address = config_values[\"rx_adds\"][i - 1]\n            tx_peer.as_number = 65200\n    \n            tx_rr = tx_peer.v4_routes.add(name=\"Tx RR {0}\".format(i))\n            tx_rr.addresses.add(\n                count=20, address=config_values[\"tx_rr_add1\"][i - 1], prefix=32\n            )\n            tx_rr.addresses.add(\n                count=10, address=config_values[\"tx_rr_add2\"][i - 1], prefix=24\n            )\n            tx_rr.next_hop_ipv4_address = next_hop_addr[i - 1]\n    \n        for i in range(1, num_of_devices + 1):\n            rx_device = config.devices.add()\n            rx_device.name = \"Rx Device {0}\".format(i)\n            rx_eth = rx_device.ethernets.add()\n            rx_eth.connection.port_name = rx_port.name\n            rx_eth.name = \"Rx eth {0}\".format(i)\n            rx_eth.mac = config_values[\"rx_macs\"][i - 1]\n            rx_vlan = rx_eth.vlans.vlan()[-1]\n            rx_vlan.name = \"Rx vlan {0}\".format(i)\n            rx_vlan.id = int(config_values[\"vlan_ids\"][i - 1])\n            rx_ip = rx_eth.ipv4_addresses.add()\n            rx_ip.name = \"Rx IP {0}\".format(i)\n            rx_ip.address = config_values[\"rx_adds\"][i - 1]\n            rx_ip.gateway = config_values[\"tx_adds\"][i - 1]\n            rx_ip.prefix = 24\n    \n            rx_ipv6 = rx_eth.ipv6_addresses.add()\n            rx_ipv6.name = \"Rx IP v6{0}\".format(i)\n            rx_ipv6.address = config_values[\"rx_ipv6_adds\"][i - 1]\n            rx_ipv6.gateway = config_values[\"tx_ipv6_adds\"][i - 1]\n            rx_ipv6.prefix = 64\n    \n            rx_bgp = rx_device.bgp\n            rx_bgp.router_id = config_values[\"rx_adds\"][i - 1]\n            rx_bgp_int = rx_bgp.ipv4_interfaces.add()\n            rx_bgp_int.ipv4_name = rx_ip.name\n            rx_peer = rx_bgp_int.peers.add()\n            rx_peer.name = \"Rx Bgp {0}\".format(i)\n            rx_peer.as_type = \"ibgp\"\n            rx_peer.peer_address = config_values[\"tx_adds\"][i - 1]\n            rx_peer.as_number = 65200\n    \n    \n            if i == rx_device_with_rr:\n                rx_rr = rx_peer.v4_routes.add(name=\"Rx RR {0}\".format(i))\n                rx_rr.addresses.add(\n                    count=1000,\n                    address=config_values[\"rx_rr_add1\"],\n                    prefix=32,\n                )\n    \n        config_values[\"f1_name\"] = \"f1\"\n        config_values[\"f2_name\"] = \"f2\"\n        config_values[\"f3_name\"] = \"f3\"\n        flow1, flow2, flow3 = (\n            config.flows.flow(name=config_values[\"f1_name\"])\n            .flow(name=config_values[\"f2_name\"])\n            .flow(name=config_values[\"f3_name\"])\n        )\n    \n        # Route Range as endpoints\n        flow1.tx_rx.device.tx_names = [\"Tx RR 2\", \"Tx RR 4\"]\n        flow1.tx_rx.device.rx_names = [\"Rx RR 3\"]\n        _, _, tcp = flow1.packet.ethernet().ipv4().tcp()\n        tcp.src_port.value = 555\n        tcp.dst_port.value = 666\n    \n        flow1.size.fixed = SIZE\n        flow1.duration.fixed_packets.packets = PACKETS\n    \n        flow1.metrics.enable = True\n        flow1.metrics.loss = True\n    \n        # Ethernet as endpoints\n        flow2.tx_rx.device.tx_names = [\"Tx eth 2\"]\n        flow2.tx_rx.device.rx_names = [\"Rx eth 2\"]\n    \n        flow2.size.fixed = SIZE\n        flow2.duration.fixed_packets.packets = PACKETS\n    \n        flow2.metrics.enable = True\n        flow2.metrics.loss = True\n    \n        # All Ipv4 as endpoints\n        flow3.tx_rx.device.tx_names = [\n            \"Tx IP {0}\".format(i) for i in range(1, num_of_devices + 1)\n        ]\n        flow3.tx_rx.device.rx_names = [\n            \"Rx IP {0}\".format(i) for i in range(1, num_of_devices + 1)\n        ]\n    \n        flow3.size.fixed = SIZE\n        flow3.duration.fixed_packets.packets = PACKETS\n    \n        flow3.metrics.enable = True\n        flow3.metrics.loss = True\n    \n        api.set_config(config)\n    \n        validate_compact_config(api, config_values, rx_device_with_rr)\n        print(\"Starting all protocols ...\")\n        # ps = api.protocol_state()\n        # ps.state = ps.START\n        # api.set_protocol_state(ps)\n    \n        cs = api.control_state()\n        cs.protocol.all.state = cs.protocol.all.START\n        api.set_control_state(cs)\n    \n        print(\"Starting transmit on all flows ...\")\n    \n        cs = api.control_state()\n        cs.traffic.flow_transmit.state = cs.traffic.flow_transmit.START\n        api.set_control_state(cs)\n    \n        # utils.start_traffic(api, config, start_capture=False)\n        utils.wait_for(\n            lambda: stats_ok(api, PACKETS * 3, utils), \"stats to be as expected\"\n        )\n    \n        cs = api.control_state()\n        cs.protocol.route.state = cs.protocol.route.WITHDRAW\n        cs.protocol.route.names = [\"Tx RR 4\", \"Rx RR 3\"]\n>       api.set_control_state(cs)\n\ntests/test_compact.py:279: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7ff16736c910>\npayload = <snappi.snappi.ControlState object at 0x7ff165cc86d0>\n\n    def set_control_state(self, payload):\n        try:\n            control_option = payload.choice\n            control_obj = getattr(payload, control_option)\n            control_choice = control_obj.get(\"choice\")\n            request_payload = getattr(control_obj, control_choice)\n            self._connect()\n            if control_option == \"port\":\n                if control_choice == \"capture\":\n                    self.capture.set_capture_state(request_payload)\n                elif control_choice == \"link\":\n                    self.vport.set_link_state(request_payload)\n            elif control_option == \"protocol\":\n                if control_choice == \"all\":\n                    self.ngpf.set_protocol_state(request_payload)\n                elif control_choice == \"route\":\n                    self.ngpf.set_route_state(request_payload)\n                elif control_choice == \"lacp\":\n                    self.ngpf.set_device_state(request_payload)\n            elif control_option == \"traffic\":\n                self.traffic_item.transmit(request_payload)\n            elif control_option is not None:\n                msg = \"{} is not a supported choice for metrics; \\\n                the supported choices are \\\n                ['port', 'protocol', traffic]\".format(\n                    control_option\n                )\n                raise SnappiIxnException(400, msg)\n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 354, in set_control_state\nE               self.ngpf.set_route_state(request_payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/device/ngpf.py\", line 286, in set_route_state\nE               self.api._ixnetwork.Globals.Topology.ApplyOnTheFly()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/sessions/ixnetwork/globals/topology/topology_678a8dc80c9b4b2b5c741072eab4305d.py\", line 1846, in ApplyOnTheFly\nE               return self._execute(\"applyOnTheFly\", payload=payload, response_object=None)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/base.py\", line 452, in _execute\nE               response = self._connection._execute(url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 289, in _execute\nE               return self._send_recv(\"POST\", url, payload)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 572, in _send_recv\nE               return self._poll()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 640, in _poll\nE               return self._process_response_status_code(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 476, in _process_response_status_code\nE               raise BadRequestError(message, response.status_code)\nE             Action ApplyChanges cannot be executed while other actions are in progress. Actions in progress: \nE           Clear Stats Rx IP v61\nE           .\n\nsnappi_ixnetwork/snappi_api.py:367: SnappiIxnException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Config validation 1.498s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Ports configuration 4.741s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Captures configuration 0.186s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Location hosts ready [novus1-715849.ccu.is.keysight.com] 2.105s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Speed conversion is not require for (port.name, speed) : [('Tx Port', 'normal'), ('Rx Port', 'normal')]","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Aggregation mode speed change 0.127s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Location connect [Tx Port, Rx Port] 1.792s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1248 Tx Port connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1248 Rx Port connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Location state check [Tx Port, Rx Port] 0.283s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Location configuration 8.769s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Layer1 configuration 2.377s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Lag Configuration 0.085s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Convert device config : 2.371s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Create IxNetwork device config : 0.001s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Push IxNetwork device config : 1.145s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Devices configuration 3.601s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Flows configuration 2.795s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Start interfaces 2.319s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 IxNet - One or more destination MACs or VPNs are invalid or unreachable and the packets configured to be sent to them were not created","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Flows generate/apply 2.030s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Flows clear statistics 13.603s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Captures start 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 Flows start 4.722s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1242 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":28,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"test_compact"},{"name":"package","value":"test_compact"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d68f5979b365aa6a.json","parameterValues":[]}
{"uid":"e29c59d05f2e2002","name":"test_update_flows","historyId":"pytest:traffic-properties.test_update_flow#test_update_flows","time":{"start":1753368506584,"stop":1753368506627,"duration":43},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b26aa250>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b32142e0>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nb2b_raw_config = <snappi.snappi.Config object at 0x7f21b26aa250>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_update_flows(api, b2b_raw_config, utils):\n        \"\"\"\n        This test is to validate update_flows API\n    \n        1. once initial config is set, the test will update rate on one flow\n           and size on other flow and validates if the rate and size got updated\n           on the fly.\n    \n        2. Negative tests include updating other properties which are not allowed\n           currently and the server should throw and exception.\n        \"\"\"\n    \n        ports = b2b_raw_config.ports\n        flow1 = b2b_raw_config.flows[0]\n        flow1.name = \"tx_flow1\"\n        flow1.packet.ethernet().ipv4()\n        flow1.packet[0].src.value = \"00:0c:29:1d:10:67\"\n        flow1.packet[0].dst.value = \"00:0c:29:1d:10:71\"\n        flow1.packet[1].src.value = \"10.10.10.1\"\n        flow1.packet[1].dst.value = \"10.10.10.2\"\n        flow2 = b2b_raw_config.flows.flow()[-1]\n        flow2.name = \"tx_flow2\"\n        flow2.tx_rx.port.tx_name = ports[0].name\n        flow2.tx_rx.port.rx_name = ports[1].name\n    \n        flow3 = b2b_raw_config.flows.flow()[-1]\n        flow3.name = \"tx_flow3\"\n        flow3.tx_rx.port.tx_name = ports[0].name\n        flow3.tx_rx.port.rx_name = ports[1].name\n    \n        flow1.duration.fixed_packets.packets = 1000\n        flow1.size.fixed = 1000\n        flow1.duration.choice = flow1.duration.CONTINUOUS\n        flow1.rate.pps = 1000\n    \n        flow2.duration.fixed_packets.packets = 1000\n        flow2.size.fixed = 1000\n        flow2.duration.choice = flow1.duration.CONTINUOUS\n        flow2.rate.pps = 1000\n    \n        flow3.duration.fixed_packets.packets = 1000\n        flow3.size.fixed = 1000\n        flow3.duration.choice = flow3.duration.CONTINUOUS\n        flow3.rate.pps = 1000\n    \n        flow1.metrics.enable = True\n        flow1.metrics.loss = True\n    \n        flow3.metrics.enable = True\n        flow3.metrics.loss = True\n    \n>       api.set_config(b2b_raw_config)\n\ntests/traffic-properties/test_update_flow.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b26aa250>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"traffic-properties.test_update_flow"},{"name":"package","value":"traffic-properties.test_update_flow"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":38,"unknown":0,"total":39},"items":[{"uid":"acb07a00c24b70aa","status":"passed","time":{"start":1752836398951,"stop":1752836469875,"duration":70924}},{"uid":"51a1663dda9ff0c6","status":"passed","time":{"start":1752760243902,"stop":1752760307405,"duration":63503}},{"uid":"851bea1e98edb6a1","status":"passed","time":{"start":1752244885705,"stop":1752244956683,"duration":70978}},{"uid":"f5fcaae1dffa7535","status":"passed","time":{"start":1752145840252,"stop":1752145908616,"duration":68364}},{"uid":"6dee30020d04e2ee","status":"passed","time":{"start":1751479010972,"stop":1751479080969,"duration":69997}},{"uid":"ee77e2ba822b6890","status":"passed","time":{"start":1751472402834,"stop":1751472473406,"duration":70572}},{"uid":"483ac81fd28b995d","status":"passed","time":{"start":1751283215057,"stop":1751283287638,"duration":72581}},{"uid":"49c4eddc816ffd9f","status":"passed","time":{"start":1751276144532,"stop":1751276214107,"duration":69575}},{"uid":"f609f3a18907fa57","status":"passed","time":{"start":1751231642336,"stop":1751231716510,"duration":74174}},{"uid":"55a06d763c7b4f76","status":"passed","time":{"start":1750985352305,"stop":1750985423927,"duration":71622}},{"uid":"c762115ba58e12cc","status":"passed","time":{"start":1750836697285,"stop":1750836766965,"duration":69680}},{"uid":"f8ddc1418cf84f1e","status":"passed","time":{"start":1750656827226,"stop":1750656894119,"duration":66893}},{"uid":"ddce8608699483f5","status":"passed","time":{"start":1750246239210,"stop":1750246310221,"duration":71011}},{"uid":"5ddfeba2a8167030","status":"passed","time":{"start":1750239203710,"stop":1750239276541,"duration":72831}},{"uid":"80a0c7ef25737213","status":"passed","time":{"start":1749770085540,"stop":1749770162173,"duration":76633}},{"uid":"d31ab89ef68955c3","status":"passed","time":{"start":1749546564693,"stop":1749546635416,"duration":70723}},{"uid":"f84c46de118d28f","status":"passed","time":{"start":1748968328989,"stop":1748968396601,"duration":67612}},{"uid":"df76632914ea7d47","status":"passed","time":{"start":1748929822995,"stop":1748929893488,"duration":70493}},{"uid":"85e68adb8ed00376","status":"passed","time":{"start":1748864245704,"stop":1748864320403,"duration":74699}},{"uid":"a686ea60c7edcf98","status":"passed","time":{"start":1748857106711,"stop":1748857173857,"duration":67146}}]},"tags":[]},"source":"e29c59d05f2e2002.json","parameterValues":[]}
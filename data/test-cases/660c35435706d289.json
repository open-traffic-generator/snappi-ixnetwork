{"uid":"660c35435706d289","name":"test_mka_stats","historyId":"pytest:mka.test_mka_stats#test_mka_stats","time":{"start":1758561165365,"stop":1758561242842,"duration":77477},"status":"failed","statusMessage":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7fafb98c7c00>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7fafb98c7c00> = <snappi.snappi.MetricsResponse object at 0x7fafb8379120>.mka_metrics","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7fafb8c72ce0>\nb2b_raw_config = <snappi.snappi.Config object at 0x7fafb821e390>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_mka_stats(api, b2b_raw_config, utils):\n        \"\"\"\n        Test for the mka configuration\n        \"\"\"\n        api.set_config(api.config())\n        b2b_raw_config.flows.clear()\n    \n        p1, p2 = b2b_raw_config.ports\n        d1, d2 = b2b_raw_config.devices.device(name=\"mka_dev1\").device(name=\"mka_dev2\")\n    \n        eth1, eth2 = d1.ethernets.add(), d2.ethernets.add()\n        eth1.connection.port_name, eth2.connection.port_name = p1.name, p2.name\n        eth1.mac, eth2.mac = \"00:00:00:00:00:11\", \"00:00:00:00:00:22\"\n        eth1.name, eth2.name = \"eth1\", \"eth2\"\n    \n        # MACsec\n        macsec1, macsec2 = d1.macsec, d2.macsec\n        macsec1_int, macsec2_int = macsec1.ethernet_interfaces.add(), macsec2.ethernet_interfaces.add()\n        macsec1_int.eth_name, macsec2_int.eth_name = eth1.name, eth2.name\n        secy1, secy2 = macsec1_int.secure_entity, macsec2_int.secure_entity\n        secy1.name, secy2.name = \"macsec1\", \"macsec2\"\n    \n        # Data plane\n        secy1.data_plane.choice = secy2.data_plane.choice = \"no_encapsulation\"\n    \n        # MKA\n        secy1_key_gen_proto, secy2_key_gen_proto = secy1.key_generation_protocol, secy2.key_generation_protocol\n        secy1_key_gen_proto.choice = secy2_key_gen_proto.choice = \"mka\"\n        kay1, kay2 = secy1_key_gen_proto.mka, secy2_key_gen_proto.mka\n        kay1.name, kay2.name = \"mka1\", \"mka2\"\n    \n        # Basic properties\n        kay1.basic.key_derivation_function = kay2.basic.key_derivation_function = \"aes_cmac_128\"\n    \n        kay1.basic.psk_chain_start_time.choice = kay2.basic.psk_chain_start_time.choice = \"utc\"\n        kay1_psk_chain_start_time = kay1.basic.psk_chain_start_time.utc\n        kay2_psk_chain_start_time = kay2.basic.psk_chain_start_time.utc\n    \n        kay1_psk_chain_start_time.day = kay2_psk_chain_start_time.day = 6\n        kay1_psk_chain_start_time.month = kay2_psk_chain_start_time.month = 5\n        kay1_psk_chain_start_time.year = kay2_psk_chain_start_time.year = 2025\n        kay1_psk_chain_start_time.hour = kay2_psk_chain_start_time.hour = 7\n        kay1_psk_chain_start_time.minute = kay2_psk_chain_start_time.minute = 10\n        kay1_psk_chain_start_time.second = kay2_psk_chain_start_time.second = 56\n    \n        # Key source: PSK\n        kay1_key_src, kay2_key_src = kay1.basic.key_source, kay2.basic.key_source\n        kay1_key_src.choice = kay2_key_src.choice = \"psk\"\n        kay1_psk_chain, kay2_psk_chain = kay1_key_src.psks, kay2_key_src.psks\n    \n        # PSK 1\n        kay1_psk1, kay2_psk1 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk1.cak_name = kay2_psk1.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD01\"\n        kay1_psk1.cak_value = kay2_psk1.cak_value = \"0xF123456789ABCDEF0123456789ABCD01\"\n    \n        kay1_psk1.start_offset_time.hh = kay2_psk1.start_offset_time.hh = 0\n        kay1_psk1.start_offset_time.mm = kay2_psk1.start_offset_time.mm = 0\n    \n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 0\n        kay1_psk1.end_offset_time.hh = kay2_psk1.end_offset_time.hh = 10\n    \n        # PSK 2\n        kay1_psk2, kay2_psk2 = kay1_psk_chain.add(), kay2_psk_chain.add()\n        kay1_psk2.cak_name = kay2_psk2.cak_name = \"0xF123456789ABCDEF0123456789ABCDEFF123456789ABCDEF0123456789ABCD02\"\n        kay1_psk2.cak_value = kay2_psk2.cak_value = \"0xF123456789ABCDEF0123456789ABCD02\"\n    \n        kay1_psk2.start_offset_time.hh = kay2_psk2.start_offset_time.hh = 0\n        kay1_psk2.start_offset_time.mm = kay2_psk2.start_offset_time.mm = 9\n    \n        kay1_psk2.end_offset_time.hh = kay2_psk2.end_offset_time.hh = 0\n        kay1_psk2.end_offset_time.mm = kay2_psk2.end_offset_time.mm = 0\n    \n        # Rekey mode\n        kay1_rekey_mode, kay2_rekey_mode = kay1.basic.rekey_mode, kay2.basic.rekey_mode\n        kay1_rekey_mode.choice = kay2_rekey_mode.choice = \"timer_based\"\n        kay1_rekey_timer_based, kay2_rekey_timer_based = kay1_rekey_mode.timer_based, kay2_rekey_mode.timer_based\n        kay1_rekey_timer_based.choice = kay2_rekey_timer_based.choice = \"fixed_count\"\n        kay1_rekey_timer_based.fixed_count = kay2_rekey_timer_based.fixed_count = 20\n        kay1_rekey_timer_based.interval = kay2_rekey_timer_based.interval = 200\n    \n        # Remaining basic properties autofilled\n    \n        # Tx SC\n        kay1_tx, kay2_tx = kay1.tx, kay2.tx\n        kay1_txsc1, kay2_txsc1 = kay1_tx.secure_channels.add(), kay2_tx.secure_channels.add()\n        kay1_txsc1.name, kay2_txsc1.name = \"txsc1\", \"txsc2\"\n        kay1_txsc1.system_id, kay2_txsc1.system_id = eth1.mac, eth2.mac\n        # Remaining Tx SC settings autofilled\n    \n        utils.start_traffic(api, b2b_raw_config)\n        utils.wait_for(\n            lambda: results_ok(api), \"stats to be as expected\", timeout_seconds=10\n        )\n        enums = [\n            \"mkpdu_tx\",\n            \"mkpdu_rx\",\n            \"live_peer_count\",\n            \"potential_peer_count\",\n            \"latest_key_tx_peer_count\",\n            \"latest_key_rx_peer_count\",\n            \"malformed_mkpdu\",\n            \"icv_mismatch\",\n        ]\n        expected_results = {\n            \"mka_dev1\": [0, 0, 0, 0, 0, 0, 0, 0],\n            \"mka_dev2\": [0, 0, 0, 0, 0, 0, 0, 0],\n        }\n        req = api.metrics_request()\n        req.mka.peer_names = [\"mka_dev1\"]\n        results = api.get_metrics(req)\n>       assert len(results.mka_metrics) == 1\nE       assert 2 == 1\nE        +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7fafb98c7c00>)\nE        +    where <snappi.snappi.MkaMetricIter object at 0x7fafb98c7c00> = <snappi.snappi.MetricsResponse object at 0x7fafb8379120>.mka_metrics\n\ntests/mka/test_mka_stats.py:116: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1522 tx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1522 rx connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"mka.test_mka_stats"},{"name":"package","value":"mka.test_mka_stats"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":100,"broken":0,"skipped":1,"passed":107,"unknown":0,"total":208},"items":[{"uid":"a082ef6d4b3b7e28","status":"passed","time":{"start":1758552031944,"stop":1758552123846,"duration":91902}},{"uid":"22e8e5ca3a3beda4","status":"passed","time":{"start":1758541969381,"stop":1758542069387,"duration":100006}},{"uid":"fd5a0671890618c4","status":"passed","time":{"start":1758534144550,"stop":1758534226029,"duration":81479}},{"uid":"e2357f2d2db2cbfe","status":"passed","time":{"start":1758526353634,"stop":1758526438716,"duration":85082}},{"uid":"8e09348332cb140f","status":"passed","time":{"start":1758517867315,"stop":1758517955845,"duration":88530}},{"uid":"ce913ab482fa2b72","status":"passed","time":{"start":1758344714423,"stop":1758344793689,"duration":79266}},{"uid":"88235aba5eb57071","status":"passed","time":{"start":1758335408673,"stop":1758335488356,"duration":79683}},{"uid":"6a3bfea2c42b0b87","status":"passed","time":{"start":1758318657548,"stop":1758318734100,"duration":76552}},{"uid":"30a68323a7953d5c","status":"passed","time":{"start":1758284318408,"stop":1758284394297,"duration":75889}},{"uid":"65a88055d6b0a68c","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7ff191df3c00>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7ff191df3c00> = <snappi.snappi.MetricsResponse object at 0x7ff19108f380>.mka_metrics","time":{"start":1758276810478,"stop":1758276879779,"duration":69301}},{"uid":"22366d1f1071a556","status":"passed","time":{"start":1758266026949,"stop":1758266100684,"duration":73735}},{"uid":"b38fabab6e2cb6ec","status":"failed","statusDetails":"assert 2 == 1\n +  where 2 = len(<snappi.snappi.MkaMetricIter object at 0x7f7fa2c3b280>)\n +    where <snappi.snappi.MkaMetricIter object at 0x7f7fa2c3b280> = <snappi.snappi.MetricsResponse object at 0x7f7fa1e38310>.mka_metrics","time":{"start":1758256257749,"stop":1758256324372,"duration":66623}},{"uid":"49689229cf68d037","status":"passed","time":{"start":1758221452042,"stop":1758221525103,"duration":73061}},{"uid":"5ff575b31c9ac464","status":"passed","time":{"start":1758211521335,"stop":1758211606466,"duration":85131}},{"uid":"876e50a0f4196ca5","status":"passed","time":{"start":1758203104632,"stop":1758203179714,"duration":75082}},{"uid":"fd278f5701a73aeb","status":"passed","time":{"start":1758195412209,"stop":1758195488978,"duration":76769}},{"uid":"558cd83ce08e4856","status":"passed","time":{"start":1758187874145,"stop":1758187952656,"duration":78511}},{"uid":"8d7ec2f1c82a581d","status":"passed","time":{"start":1758119103099,"stop":1758119180910,"duration":77811}},{"uid":"74b0783901d7ba41","status":"passed","time":{"start":1758089161716,"stop":1758089233966,"duration":72250}},{"uid":"95b750b0168945b2","status":"passed","time":{"start":1757655105546,"stop":1757655192185,"duration":86639}}]},"tags":[]},"source":"660c35435706d289.json","parameterValues":[]}
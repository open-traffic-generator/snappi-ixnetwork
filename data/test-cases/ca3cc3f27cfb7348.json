{"uid":"ca3cc3f27cfb7348","name":"test_manual_gateway_mac","historyId":"pytest:vxlan.test_manual_gateway_mac#test_manual_gateway_mac","time":{"start":1746414762134,"stop":1746414826543,"duration":64409},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException: IxNet - Failure message received from Interface Manager on port novus1-715849.ccu.is.keysight.com;1;1: unknown-error - Could not load plugin cpf: static ixePlugin* ixePlugin::LoadPlugin(const string&, const string&): dlopen: /usr/lib/ixe/plugins/libcpf.so: undefined symbol: _ZNK7DataSeq8IMPlugin33localTimestampMilliImplementationEv.","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7f99c6897040>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_manual_gateway_mac(api, utils):\n        count = 128\n        config = api.config()\n    \n        edge1_macs = get_macs(\"001801000011\", count)\n        edge2_macs = get_macs(\"001601000011\", count)\n    \n        p1, p2 = config.ports.port(\n            name=\"p1\", location=utils.settings.ports[0]\n        ).port(name=\"p2\", location=utils.settings.ports[1])\n    \n        d1, d2 = config.devices.device(name=\"d1\").device(name=\"d2\")\n    \n        e1, e2 = d1.ethernets.add(), d2.ethernets.add()\n        e1.connection.port_name, e2.connection.port_name = p1.name, p2.name\n        e1.name, e2.name = \"e1\", \"e2\"\n        e1.mac, e2.mac = \"00:01:00:00:00:01\", \"00:01:00:00:00:02\"\n    \n        ip1, ip2 = e1.ipv4_addresses.add(), e2.ipv4_addresses.add()\n        ip1.name, ip2.name = \"ip_d1\", \"ip_d2\"\n    \n        ip1.address, ip2.address = \"10.10.10.1\", \"10.10.10.2\"\n        ip1.gateway, ip2.gateway = \"10.10.10.2\", \"10.10.10.1\"\n    \n        ip1.gateway_mac.value = \"aa:aa:aa:aa:aa:aa\"\n    \n        bgp1, bgp2 = d1.bgp, d2.bgp\n        bgp1.router_id, bgp2.router_id = \"10.10.10.1\", \"10.10.10.2\"\n        bgp1_ipv4 = bgp1.ipv4_interfaces.add()\n        bgp2_ipv4 = bgp2.ipv4_interfaces.add()\n    \n        bgp1_ipv4.ipv4_name, bgp2_ipv4.ipv4_name = ip1.name, ip2.name\n        bgp1_peer, bgp2_peer = bgp1_ipv4.peers.add(), bgp2_ipv4.peers.add()\n        bgp1_peer.name, bgp2_peer.name = \"bgp_router1\", \"bgp_router2\"\n    \n        bgp1_peer.peer_address, bgp2_peer.peer_address = \"10.10.10.2\", \"10.10.10.1\"\n        bgp1_peer.as_type, bgp2_peer.as_type = \"ebgp\", \"ebgp\"\n        bgp1_peer.as_number, bgp2_peer.as_number = 100, 200\n    \n        # Create & advertise loopbacks under bgp in d1 & d2\n        for i in range(1, count + 1):\n            d1_l1 = d1.ipv4_loopbacks.add()\n            d1_l1.name = \"d1_loopback{}\".format(i)\n            d1_l1.eth_name = \"e1\"\n            d1_l1.address = \"1.1.1.{}\".format(i)\n    \n            bgp1_l1 = bgp1_peer.v4_routes.add(name=\"bgp_l{}\".format(i))\n            bgp1_l1.addresses.add(address=\"1.1.1.{}\".format(i), prefix=32)\n    \n        for i in range(1, count + 1):\n            d2_l1 = d2.ipv4_loopbacks.add()\n            d2_l1.name = \"d2_loopback{}\".format(i)\n            d2_l1.eth_name = \"e2\"\n            d2_l1.address = \"2.2.2.{}\".format(i)\n    \n            bgp2_l1 = bgp2_peer.v4_routes.add(name=\"bgp2_l{}\".format(i))\n            bgp2_l1.addresses.add(address=\"2.2.2.{}\".format(i), prefix=32)\n    \n        # Create vxlan tunnels on d1\n        for i in range(1, count + 1):\n            d1_vxlan = d1.vxlan.v4_tunnels.add()\n    \n            d1_vxlan.vni = 1000 + i\n            d1_vxlan.source_interface = \"d1_loopback{}\".format(i)\n            d1_vxlan.name = \"d1_vxlan{}\".format(i)\n    \n            # unicast communication, Add two unicast info\n            vtep = d1_vxlan.destination_ip_mode.unicast.vteps.add()\n            vtep.remote_vtep_address = \"2.2.2.{}\".format(i)\n            vtep.arp_suppression_cache.add(edge2_macs[i], \"100.1.2.{}\".format(i))\n            vtep.arp_suppression_cache.add(\"00:1b:6e:00:00:01\", \"1.2.0.1\")\n    \n        # Create vxlan on d2\n        for i in range(1, count + 1):\n            d2_vxlan = d2.vxlan.v4_tunnels.add()\n    \n            d2_vxlan.vni = 1000 + i\n            d2_vxlan.source_interface = \"d2_loopback{}\".format(i)\n            d2_vxlan.name = \"d2_vxlan{}\".format(i)\n    \n            # unicast communication\n            vtep = d2_vxlan.destination_ip_mode.unicast.vteps.add()\n            vtep.remote_vtep_address = \"1.1.1.{}\".format(i)\n            vtep.arp_suppression_cache.add(edge1_macs[i], \"100.1.1.{}\".format(i))\n            vtep.arp_suppression_cache.add(\"00:1b:6e:00:00:01\", \"1.2.0.1\")\n    \n        for i in range(1, count + 1):\n            edge1_d = config.devices.device(name=\"edge1_d{}\".format(i))[-1]\n            edge2_d = config.devices.device(name=\"edge2_d{}\".format(i))[-1]\n    \n            edge1_e = edge1_d.ethernets.ethernet()[-1]\n            edge2_e = edge2_d.ethernets.ethernet()[-1]\n    \n            edge1_e.connection.vxlan_name = \"d1_vxlan{}\".format(i)\n            edge2_e.connection.vxlan_name = \"d2_vxlan{}\".format(i)\n    \n            edge1_e.name = \"edge1_e{}\".format(i)\n            edge2_e.name = \"edge2_e{}\".format(i)\n    \n            edge1_e.mac = edge1_macs[i]\n            edge2_e.mac = edge2_macs[i]\n    \n            edge1_ip = edge1_e.ipv4_addresses.add()\n            edge2_ip = edge2_e.ipv4_addresses.add()\n    \n            edge1_ip.name = \"edge1_ip_d{}\".format(i)\n            edge2_ip.name = \"edge2_ip_d{}\".format(i)\n    \n            edge1_ip.address = \"100.1.{}.1\".format(i)\n            edge2_ip.address = \"100.1.{}.2\".format(i)\n    \n            edge1_ip.gateway = \"100.1.{}.2\".format(i)\n            edge2_ip.gateway = \"100.1.{}.1\".format(i)\n    \n            edge1_ip.gateway_mac.value = edge2_macs[i]\n    \n            edge1_bgp, edge2_bgp = edge1_d.bgp, edge2_d.bgp\n            edge1_bgp.router_id = \"100.1.{}.1\".format(i)\n            edge2_bgp.router_id = \"100.1.{}.2\".format(i)\n    \n            edge1_bgp_ipv4 = edge1_bgp.ipv4_interfaces.add()\n            edge2_bgp_ipv4 = edge2_bgp.ipv4_interfaces.add()\n    \n            edge1_bgp_ipv4.ipv4_name = \"edge1_ip_d{}\".format(i)\n            edge2_bgp_ipv4.ipv4_name = \"edge2_ip_d{}\".format(i)\n    \n            edge1_bgp_peer = edge1_bgp_ipv4.peers.add()\n            edge2_bgp_peer = edge2_bgp_ipv4.peers.add()\n    \n            edge1_bgp_peer.name = \"edge1_bgp{}\".format(i)\n            edge2_bgp_peer.name = \"edge2_bgp{}\".format(i)\n    \n            edge1_bgp_peer.peer_address = \"100.1.{}.2\".format(i)\n            edge2_bgp_peer.peer_address = \"100.1.{}.1\".format(i)\n    \n            edge1_bgp_peer.as_type, edge2_bgp_peer.as_type = \"ibgp\", \"ibgp\"\n            edge1_bgp_peer.as_number, edge2_bgp_peer.as_number = 1000, 1000\n    \n            edge1_bgp_rr = edge1_bgp_peer.v4_routes.add(name=\"A1{}\".format(i))\n            edge1_bgp_rr.addresses.add(\n                address=\"1.1.0.{}\".format(i), count=180, prefix=32\n            )\n    \n            edge1_bgp_rr2 = edge1_bgp_peer.v4_routes.add(name=\"D1{}\".format(i))\n            edge1_bgp_rr2.addresses.add(\n                address=\"2.1.0.{}\".format(i), count=1, prefix=32\n            )\n    \n            edge2_bgp_rr = edge2_bgp_peer.v4_routes.add(name=\"A2{}\".format(i))\n            edge2_bgp_rr.addresses.add(\n                address=\"3.1.0.{}\".format(i), count=180, prefix=32\n            )\n    \n            edge2_bgp_rr2 = edge2_bgp_peer.v4_routes.add(name=\"D2{}\".format(i))\n            edge2_bgp_rr2.addresses.add(\n                address=\"4.1.0.{}\".format(i), count=1, prefix=32\n            )\n    \n>       api.set_config(config)\n\ntests/vxlan/test_manual_gateway_mac.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:323: in set_config\n    return self._request_detail()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f99c6897040>\n\n    def _request_detail(self):\n        request_detail = snappi.Warning()\n        errors = self._errors\n        warnings = list()\n        app_errors = self._globals.AppErrors.find()\n        if len(app_errors) > 0:\n            current_errors = app_errors[0].Error.find()\n            if len(current_errors) > 0:\n                for error in current_errors:\n                    # Add loop as sequence are not sorted\n                    match = [\n                        o\n                        for o in self._ixn_errors\n                        if o.Name == error.Name\n                        and o.LastModified == error.LastModified\n                    ]\n                    if len(match) == 0:\n                        if error.ErrorLevel == \"kWarning\":\n                            warning = \"IxNet - {0}\".format(\n                                error.Name\n                                if error.Description == \"\"\n                                else error.Description\n                            )\n                            self.info(warning)\n                            warnings.append(warning)\n                        if error.ErrorLevel == \"kError\":\n                            error = \"IxNet - {0}\".format(\n                                error.Name\n                                if error.Description == \"\"\n                                else error.Description\n                            )\n                            self.info(error)\n                            errors.append(error)\n    \n        # Need to add this hack as dumping json config throws this exception\n        # Traffic regeneration will be part of set_transmit_state\n        errors = [\n            error\n            for error in errors\n            if \"before trying to generate BGP EVPN traffic\" not in error\n        ]\n    \n        if len(errors) > 0:\n            self._errors = []\n>           raise SnappiIxnException(500, errors)\nE           snappi_ixnetwork.exceptions.SnappiIxnException: IxNet - Failure message received from Interface Manager on port novus1-715849.ccu.is.keysight.com;1;1: unknown-error - Could not load plugin cpf: static ixePlugin* ixePlugin::LoadPlugin(const string&, const string&): dlopen: /usr/lib/ixe/plugins/libcpf.so: undefined symbol: _ZNK7DataSeq8IMPlugin33localTimestampMilliImplementationEv.\n\nsnappi_ixnetwork/snappi_api.py:262: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Config validation 0.428s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Ports configuration 50.886s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Captures configuration 0.197s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Location hosts ready [novus1-715849.ccu.is.keysight.com] 0.094s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Aggregation mode speed change 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Location connect [p1, p2] 2.708s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1440 p1 connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1440 p2 connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Location state check [p1, p2] 0.289s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Location configuration 3.763s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Layer1 configuration 0.000s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Lag Configuration 0.101s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Convert device config : 0.677s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Create IxNetwork device config : 0.002s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Push IxNetwork device config : 1.623s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Devices configuration 2.388s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Flows configuration 0.810s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 Start interfaces 1.980s","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 IxNet - Protocols Version Mismatch.","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"IxNetwork Protocols Version: 10.80.2412.12","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Chassis Protocols Version: 10.50.2410.2","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 IxNet - Failure message received from Interface Manager on port novus1-715849.ccu.is.keysight.com;1;1: unknown-error - Could not load plugin cpf: static ixePlugin* ixePlugin::LoadPlugin(const string&, const string&): dlopen: /usr/lib/ixe/plugins/libcpf.so: undefined symbol: _ZNK7DataSeq8IMPlugin33localTimestampMilliImplementationEv.","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"INFO     snappi_ixnetwork.snappi_api:snappi_api.py:1434 IxNet - The Traffic Item was modified. Please perform a Traffic Generate to update the associated traffic Flow Groups","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":25,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"vxlan.test_manual_gateway_mac"},{"name":"package","value":"vxlan.test_manual_gateway_mac"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":1,"passed":111,"unknown":0,"total":115},"items":[{"uid":"2d01793a654cd806","status":"passed","time":{"start":1746232601079,"stop":1746232625108,"duration":24029}},{"uid":"e82478eca4234cb","status":"passed","time":{"start":1746224382039,"stop":1746224406495,"duration":24456}},{"uid":"b448f13b89c3051a","status":"passed","time":{"start":1746217344058,"stop":1746217372193,"duration":28135}},{"uid":"414725c890c93e5f","status":"passed","time":{"start":1746199805015,"stop":1746199829904,"duration":24889}},{"uid":"9d6eb5a2f3e3d21b","status":"passed","time":{"start":1746181689995,"stop":1746181715526,"duration":25531}},{"uid":"b92d0989232f4320","status":"passed","time":{"start":1746174663641,"stop":1746174686272,"duration":22631}},{"uid":"eaf3b9d0ac033aa4","status":"passed","time":{"start":1746117825457,"stop":1746117851821,"duration":26364}},{"uid":"99ef1f27f408b21f","status":"passed","time":{"start":1746098916418,"stop":1746098939507,"duration":23089}},{"uid":"a42e1ed910a85652","status":"passed","time":{"start":1746064489784,"stop":1746064514459,"duration":24675}},{"uid":"a72109412e81f81b","status":"skipped","statusDetails":"CI-Testing","time":{"start":1746042370552,"stop":1746042370552,"duration":0}},{"uid":"7af625bed7828729","status":"passed","time":{"start":1746025407819,"stop":1746025434301,"duration":26482}},{"uid":"6e095f63e4bbed75","status":"passed","time":{"start":1746017351140,"stop":1746017375522,"duration":24382}},{"uid":"d52a80af0a0b13ae","status":"passed","time":{"start":1745951248306,"stop":1745951273100,"duration":24794}},{"uid":"a92232a3cc54b475","status":"passed","time":{"start":1745944306045,"stop":1745944332391,"duration":26346}},{"uid":"d1afeb4b9bc214e","status":"passed","time":{"start":1745937122343,"stop":1745937147093,"duration":24750}},{"uid":"99f99a88f273c4ac","status":"passed","time":{"start":1745930256769,"stop":1745930280803,"duration":24034}},{"uid":"e27598664225d0ce","status":"passed","time":{"start":1745921505820,"stop":1745921531098,"duration":25278}},{"uid":"5b11dd9b068a8526","status":"passed","time":{"start":1745907259784,"stop":1745907284335,"duration":24551}},{"uid":"282031f98f5cab04","status":"passed","time":{"start":1745902727011,"stop":1745902750588,"duration":23577}},{"uid":"9954652f2670ccd6","status":"passed","time":{"start":1745865135575,"stop":1745865160414,"duration":24839}}]},"tags":[]},"source":"ca3cc3f27cfb7348.json","parameterValues":[]}
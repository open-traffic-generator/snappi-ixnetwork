{"uid":"eb9ba9610cc60fd3","name":"test_arp_packet","historyId":"pytest:arp.test_arp_packet#test_arp_packet","time":{"start":1753368506584,"stop":1753368506630,"duration":46},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b2623ab0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b393fe80>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nb2b_raw_config_vports = <snappi.snappi.Config object at 0x7f21b2623ab0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\ntx_vport = <snappi.snappi.Port object at 0x7f21b2623d80>\nrx_vport = <snappi.snappi.Port object at 0x7f21b2623240>\n\n    def test_arp_packet(api, b2b_raw_config_vports, utils, tx_vport, rx_vport):\n        flow1 = b2b_raw_config_vports.flows[0]\n        sender_hardware_addr = \"00:0C:29:E3:53:EA\"\n        target_hardware_addr = \"00:0C:29:E3:54:EA\"\n        sender_protocol_addr = \"10.1.1.2\"\n        target_protocol_addr = \"20.1.1.2\"\n        flow1.packet.ethernet().arp()\n        flow1_arp = flow1.packet[-1]\n        flow1_arp.sender_hardware_addr.value = sender_hardware_addr\n        flow1_arp.sender_protocol_addr.value = sender_protocol_addr\n        flow1_arp.target_hardware_addr.value = target_hardware_addr\n        flow1_arp.target_protocol_addr.value = target_protocol_addr\n    \n        flow2 = b2b_raw_config_vports.flows.flow(name=\"f2\")[-1]\n        hardware_type = 2\n        protocol_type = 801\n        hardware_length = 7\n        protocol_length = 5\n        operation = 2\n        mac_step = \"00:00:00:00:01:00\"\n        ip_step = \"0.0.0.1\"\n        count = 10\n        flow2.tx_rx.port.tx_name = tx_vport.name\n        flow2.tx_rx.port.rx_name = rx_vport.name\n        flow2.packet.ethernet().arp()\n        flow2_arp = flow2.packet[-1]\n        flow2_arp.hardware_type.value = hardware_type\n        flow2_arp.protocol_type.value = protocol_type\n        flow2_arp.hardware_length.value = hardware_length\n        flow2_arp.protocol_length.value = protocol_length\n        flow2_arp.operation.value = operation\n        flow2_arp.sender_hardware_addr.increment.start = sender_hardware_addr\n        flow2_arp.sender_hardware_addr.increment.step = mac_step\n        flow2_arp.sender_hardware_addr.increment.count = count\n        flow2_arp.sender_protocol_addr.increment.start = sender_protocol_addr\n        flow2_arp.sender_protocol_addr.increment.step = ip_step\n        flow2_arp.sender_protocol_addr.increment.count = count\n        flow2_arp.target_hardware_addr.decrement.start = target_hardware_addr\n        flow2_arp.target_hardware_addr.decrement.step = mac_step\n        flow2_arp.target_hardware_addr.decrement.count = count\n        flow2_arp.target_protocol_addr.decrement.start = target_protocol_addr\n        flow2_arp.target_protocol_addr.decrement.step = ip_step\n        flow2_arp.target_protocol_addr.decrement.count = count\n    \n        flow3 = b2b_raw_config_vports.flows.flow(name=\"f3\")[-1]\n        flow3_count = 4\n        flow3_step = \"05:00:00:02:01:00\"\n        sender_hardware_addr_list = utils.mac_or_ip_addr_from_counter_pattern(\n            \"00:0c:29:e3:53:ea\", flow3_step, flow3_count, True\n        )\n        target_hardware_addr_list = utils.mac_or_ip_addr_from_counter_pattern(\n            \"00:0c:29:e3:53:f4\", flow3_step, flow3_count, True\n        )\n        sender_protocol_addr_list = [\"10.10.0.1\", \"10.10.0.2\", \"10.10.0.3\"]\n        target_protocol_addr_list = [\"20.20.0.1\", \"20.20.0.2\", \"20.20.0.3\"]\n        flow3.tx_rx.port.tx_name = tx_vport.name\n        flow3.tx_rx.port.rx_name = rx_vport.name\n        flow3.packet.ethernet().arp()\n        flow3_arp = flow3.packet[-1]\n        flow3_arp.sender_hardware_addr.values = sender_hardware_addr_list\n        flow3_arp.sender_protocol_addr.values = sender_protocol_addr_list\n        flow3_arp.target_hardware_addr.values = target_hardware_addr_list\n        flow3_arp.target_protocol_addr.values = target_protocol_addr_list\n    \n>       api.set_config(b2b_raw_config_vports)\n\ntests/arp/test_arp_packet.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b2623ab0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"arp.test_arp_packet"},{"name":"package","value":"arp.test_arp_packet"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":1,"passed":182,"unknown":0,"total":188},"items":[{"uid":"5fb8896cbbf1c8b3","status":"passed","time":{"start":1752836398951,"stop":1752836408278,"duration":9327}},{"uid":"4f23032e248141b3","status":"passed","time":{"start":1752760243902,"stop":1752760252979,"duration":9077}},{"uid":"cf36c404fddec816","status":"passed","time":{"start":1752244885705,"stop":1752244896935,"duration":11230}},{"uid":"a3465af8034819eb","status":"passed","time":{"start":1752145840252,"stop":1752145849764,"duration":9512}},{"uid":"cf0ff9a7369a8bfa","status":"passed","time":{"start":1751479010972,"stop":1751479022253,"duration":11281}},{"uid":"8ff0c91a4a83cd66","status":"passed","time":{"start":1751472402834,"stop":1751472415497,"duration":12663}},{"uid":"c98432a514d187b7","status":"passed","time":{"start":1751283215057,"stop":1751283224398,"duration":9341}},{"uid":"fb1a221d98024e08","status":"passed","time":{"start":1751276144532,"stop":1751276153822,"duration":9290}},{"uid":"fcb61139daf5a28a","status":"passed","time":{"start":1751231642336,"stop":1751231654602,"duration":12266}},{"uid":"ac0aec74d786af9e","status":"passed","time":{"start":1750985352305,"stop":1750985361560,"duration":9255}},{"uid":"a76278ebee788918","status":"passed","time":{"start":1750836697285,"stop":1750836706733,"duration":9448}},{"uid":"7196c2687f8fd479","status":"passed","time":{"start":1750656827226,"stop":1750656839941,"duration":12715}},{"uid":"a7893e89a3a33b29","status":"passed","time":{"start":1750246239210,"stop":1750246248671,"duration":9461}},{"uid":"5ab46c5a02db03c6","status":"passed","time":{"start":1750239203710,"stop":1750239221533,"duration":17823}},{"uid":"6daa10da08815053","status":"passed","time":{"start":1749770085540,"stop":1749770099267,"duration":13727}},{"uid":"4645826b9c37dfe0","status":"passed","time":{"start":1749546564693,"stop":1749546575280,"duration":10587}},{"uid":"e34abb014d6adb5f","status":"passed","time":{"start":1748968328989,"stop":1748968340705,"duration":11716}},{"uid":"3f1ad28922b24267","status":"passed","time":{"start":1748929822995,"stop":1748929832247,"duration":9252}},{"uid":"ea5e31999faf18e0","status":"passed","time":{"start":1748864245704,"stop":1748864266096,"duration":20392}},{"uid":"d735e324d1c947","status":"passed","time":{"start":1748857106711,"stop":1748857123237,"duration":16526}}]},"tags":[]},"source":"eb9ba9610cc60fd3.json","parameterValues":[]}
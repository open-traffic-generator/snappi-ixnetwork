{"uid":"5af5ebde688e34af","name":"test_stats_filter_e2e","historyId":"pytest:imix.test_ipsec_imix_predefined_e2e#test_stats_filter_e2e","time":{"start":1754285457133,"stop":1754285795532,"duration":338399},"status":"failed","statusMessage":"assert 91 in [90, 92, 594, 1418]\n +  where 91 = len([1, 128, 194, 0, 0, 14, 170, 226, 177, 53, 224, 1, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 3, 78, 47, 65, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 144, 255, 149, 155])","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7f3b37651510>\nb2b_raw_config = <snappi.snappi.Config object at 0x7f3b36f65710>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_stats_filter_e2e(api, b2b_raw_config, utils):\n        \"\"\"\n        configure flows with ipv4 imix\n        - Send ipv4 imix predefined traffic\n    \n    \n        Validation:\n        1) Get port statistics based on port name & column names and assert\n        each port & column has returned the values and assert\n        2) Get flow statistics based on flow name & column names and assert\n        each flow & column has returned the values and assert\n        \"\"\"\n    \n        no_of_packets = 1000\n    \n        b2b_raw_config.flows.clear()\n        config = b2b_raw_config\n    \n        d1, d2 = config.devices.device(name=\"d1\").device(name=\"d2\")\n    \n        eth1 = d1.ethernets.add()\n        eth1.name = \"eth1\"\n        eth1.connection.port_name = config.ports[0].name\n        eth1.mac = \"00:ad:aa:13:11:01\"\n    \n        eth2 = d2.ethernets.add()\n        eth2.name = \"eth2\"\n        eth2.connection.port_name = config.ports[1].name\n        eth2.mac = \"00:ad:aa:13:11:02\"\n    \n        ip1 = eth1.ipv4_addresses.add()\n        ip1.name = \"ipv41\"\n        ip1.address = \"10.1.1.1\"\n        ip1.gateway = \"10.1.1.2\"\n    \n        ip2 = eth2.ipv4_addresses.add()\n        ip2.name = \"ipv42\"\n        ip2.address = \"10.1.1.2\"\n        ip2.gateway = \"10.1.1.1\"\n    \n        f1 = config.flows.flow(name=\"f1\")[-1]\n        f1.tx_rx.device.tx_names = [ip1.name]\n        f1.tx_rx.device.rx_names = [ip2.name]\n        f1.size.weight_pairs.predefined = \"ipsec_imix\"\n        f1.rate.pps = 1000\n        f1.duration.fixed_packets.packets = no_of_packets\n        f1.metrics.enable = True\n        eth, ip = f1.packet.ethernet().ipv4()\n        api.set_config(config)\n    \n        utils.start_traffic(api, b2b_raw_config)\n    \n        utils.wait_for(\n            lambda: results_ok(api, utils, no_of_packets),\n            \"stats to be as expected\",\n            timeout_seconds=20,\n        )\n        utils.stop_traffic(api, b2b_raw_config)\n>       captures_ok(\n            api, b2b_raw_config, utils, no_of_packets, config.ports[1].name\n        )\n\ntests/imix/test_ipsec_imix_predefined_e2e.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f3b37651510>\ncfg = <snappi.snappi.Config object at 0x7f3b36f65710>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\npackets = 1000, name = 'rx'\n\n    def captures_ok(api, cfg, utils, packets, name):\n        \"\"\"\n        Returns normally if patterns in captured packets are as expected.\n        \"\"\"\n        pkt_count = 0\n        cap_dict = utils.get_all_captures(api, cfg)\n        for buf in cap_dict[name]:\n>           assert len(buf) in [90, 92, 594, 1418]\nE           assert 91 in [90, 92, 594, 1418]\nE            +  where 91 = len([1, 128, 194, 0, 0, 14, 170, 226, 177, 53, 224, 1, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 3, 78, 47, 65, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 144, 255, 149, 155])\n\ntests/imix/test_ipsec_imix_predefined_e2e.py:86: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1518 Capture was not stopped for this port rx","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"imix.test_ipsec_imix_predefined_e2e"},{"name":"package","value":"imix.test_ipsec_imix_predefined_e2e"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":21,"broken":0,"skipped":1,"passed":161,"unknown":0,"total":183},"items":[{"uid":"ed0b42836d006d30","status":"failed","statusDetails":"assert 91 in [90, 92, 594, 1418]\n +  where 91 = len([1, 128, 194, 0, 0, 14, 26, 100, 17, 135, 165, 234, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 3, 78, 47, 65, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 73, 50, 174, 164])","time":{"start":1754037821403,"stop":1754038163983,"duration":342580}},{"uid":"e9c55c7ac79180b6","status":"failed","statusDetails":"Exception: Time out occurred while waiting for stats to be as expected","time":{"start":1754025412828,"stop":1754025571053,"duration":158225}},{"uid":"d2b26d586c5738c2","status":"failed","statusDetails":"assert 99 in [90, 92, 594, 1418]\n +  where 99 = len([1, 128, 194, 0, 0, 14, 58, 19, 227, 221, 91, 110, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 11, 52, 48, 48, 48, 48, 48, 32, 77, 98, 112, 115, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 113, 136, 244, 125])","time":{"start":1754000569227,"stop":1754000900578,"duration":331351}},{"uid":"c30497bf7b21a1ea","status":"failed","statusDetails":"assert 99 in [90, 92, 594, 1418]\n +  where 99 = len([1, 128, 194, 0, 0, 14, 6, 243, 17, 189, 20, 203, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 11, 52, 48, 48, 48, 48, 48, 32, 77, 98, 112, 115, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 162, 1, 0, 0, 0, 0, 0, 0, 0, 102, 47, 128, 128])","time":{"start":1753965242171,"stop":1753965586684,"duration":344513}},{"uid":"ca108472c6e4c0b5","status":"failed","statusDetails":"assert 99 in [90, 92, 594, 1418]\n +  where 99 = len([1, 128, 194, 0, 0, 14, 154, 128, 127, 4, 115, 151, 136, 204, 2, 7, 4, 0, 26, 197, 1, 113, 159, 4, 2, 5, 57, 6, 2, 0, 3, 8, 11, 52, 48, 48, 48, 48, 48, 32, 77, 98, 112, 115, 10, 16, 97, 114, 101, 115, 49, 45, 109, 121, 50, 52, 53, 51, 48, 48, 48, 52, 12, 15, 75, 69, 89, 83, 73, 71, 72, 84, 32, 68, 101, 118, 105, 99, 101, 16, 12, 5, 1, 10, 36, 70, 119, 1, 0, 0, 0, 0, 0, 0, 0, 140, 131, 139, 240])","time":{"start":1753390964676,"stop":1753391307073,"duration":342397}},{"uid":"7facd4459f8b2c33","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","time":{"start":1753368506584,"stop":1753368506627,"duration":43}},{"uid":"c69f07bea86f3a1f","status":"passed","time":{"start":1752836398951,"stop":1752836620025,"duration":221074}},{"uid":"4e1064787bbf987","status":"passed","time":{"start":1752760243902,"stop":1752760474164,"duration":230262}},{"uid":"af91a1270552ced9","status":"passed","time":{"start":1752244885705,"stop":1752245119331,"duration":233626}},{"uid":"1472d80bd175f004","status":"passed","time":{"start":1752145840252,"stop":1752146071888,"duration":231636}},{"uid":"d0708093a1c55675","status":"passed","time":{"start":1751479010972,"stop":1751479243532,"duration":232560}},{"uid":"8bc48128bdc763da","status":"passed","time":{"start":1751472402834,"stop":1751472628413,"duration":225579}},{"uid":"577f0e4a9ebab9dd","status":"passed","time":{"start":1751283215057,"stop":1751283439239,"duration":224182}},{"uid":"2fc3e7de770f0402","status":"passed","time":{"start":1751276144532,"stop":1751276375671,"duration":231139}},{"uid":"2577513177b21646","status":"passed","time":{"start":1751231642336,"stop":1751231870438,"duration":228102}},{"uid":"88c7f98c1d96c195","status":"passed","time":{"start":1750985352305,"stop":1750985582882,"duration":230577}},{"uid":"6fc13bbe0953d0b7","status":"passed","time":{"start":1750836697285,"stop":1750836928424,"duration":231139}},{"uid":"884f5086e7babf3c","status":"passed","time":{"start":1750656827226,"stop":1750657062357,"duration":235131}},{"uid":"279a6fea504ef45f","status":"passed","time":{"start":1750246239210,"stop":1750246469888,"duration":230678}},{"uid":"a4379e3a735fab28","status":"passed","time":{"start":1750239203710,"stop":1750239433812,"duration":230102}}]},"tags":[]},"source":"5af5ebde688e34af.json","parameterValues":[]}
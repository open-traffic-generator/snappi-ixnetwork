{"uid":"21227d9f8e94189f","name":"test_combined_filters","historyId":"pytest:capture.test_combined_capture_filters#test_combined_filters","time":{"start":1758697949757,"stop":1758698018424,"duration":68667},"status":"failed","statusMessage":"Exception: Time out occurred while waiting for stats to be as expected","statusTrace":"api = <snappi_ixnetwork.snappi_api.Api object at 0x7f16f60ec730>\nsettings = <utils.common.Settings object at 0x7f16f66bdb70>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_combined_filters(api, settings, utils):\n        \"\"\"\n        This test applies ethernet and vlan capture filters and verifies correct capture results\n        \"\"\"\n        packets = 4\n        config = api.config()\n        p1, p2 = config.ports.port(\n            name=\"p1\", location=utils.settings.ports[0]\n        ).port(name=\"p2\", location=utils.settings.ports[1])\n        cap = config.captures.capture(name=\"capture1\")[-1]\n        cap.port_names = [p2.name]\n        cap.format = cap.PCAPNG\n        cap.overwrite = False\n        eth_filter, vlan_filter = cap.filters.ethernet().vlan()\n    \n        eth_filter.src.value = \"0000ff000000\"\n        eth_filter.src.mask = \"000000000000\"\n        eth_filter.src.negate = False\n        eth_filter.dst.value = \"000806020000\"\n        eth_filter.dst.mask = \"000000000000\"\n        eth_filter.dst.negate = False\n    \n        vlan_filter.id.value = \"0006\"\n        vlan_filter.id.mask = \"F000\"\n        vlan_filter.id.negate = False\n        vlan_filter.priority.value = \"07\"\n        vlan_filter.priority.mask = \"07\"\n        vlan_filter.priority.negate = True\n    \n        (f1,) = config.flows.flow(name=\"f1\")\n        f1.tx_rx.port.tx_name = p1.name\n        f1.tx_rx.port.rx_name = p2.name\n        f1.metrics.enable = True\n        f1.size.fixed = 128\n        f1.rate.pps = 1000\n        f1.duration.fixed_packets.packets = 4\n        eth, vlan = f1.packet.ethernet().vlan()\n        eth.src.values = [\n            \"00:00:ff:00:00:00\",\n            \"00:00:ff:00:00:00\",\n            \"00:00:11:00:00:00\",\n            \"00:00:ff:00:00:00\",\n        ]\n        eth.dst.values = [\n            \"00:00:07:08:00:00\",\n            \"00:00:44:00:00:00\",\n            \"00:00:09:00:00:00\",\n            \"00:08:06:02:00:00\",\n        ]\n        vlan.priority.values = [1, 2, 3, 7]\n        vlan.cfi.values = [0, 1, 0, 1]\n        vlan.id.values = [5, 3, 1, 6]\n    \n        utils.start_traffic(api, config, start_capture=True)\n>       utils.wait_for(\n            lambda: results_ok(api, [\"f1\"], packets),\n            \"stats to be as expected\",\n            timeout_seconds=10,\n        )\n\ntests/capture/test_combined_capture_filters.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc = <function test_combined_filters.<locals>.<lambda> at 0x7f16f58e9000>\ncondition_str = 'stats to be as expected', interval_seconds = 0.5\ntimeout_seconds = 10\n\n    def wait_for(func, condition_str, interval_seconds=None, timeout_seconds=None):\n        \"\"\"\n        Keeps calling the `func` until it returns true or `timeout_seconds` occurs\n        every `interval_seconds`. `condition_str` should be a constant string\n        implying the actual condition being tested.\n        Usage\n        -----\n        If we wanted to poll for current seconds to be divisible by `n`, we would\n        implement something similar to following:\n        ```\n        import time\n        def wait_for_seconds(n, **kwargs):\n            condition_str = 'seconds to be divisible by %d' % n\n            def condition_satisfied():\n                return int(time.time()) % n == 0\n            poll_until(condition_satisfied, condition_str, **kwargs)\n        ```\n        \"\"\"\n        if interval_seconds is None:\n            interval_seconds = settings.interval_seconds\n        if timeout_seconds is None:\n            timeout_seconds = settings.timeout_seconds\n        start_seconds = int(time.time())\n    \n        print(\"\\n\\nWaiting for %s ...\" % condition_str)\n        while True:\n            res = func()\n            if res:\n                print(\"Done waiting for %s\" % condition_str)\n                break\n            if res is None:\n                raise Exception(\"Wait aborted for %s\" % condition_str)\n            if timed_out(start_seconds, timeout_seconds):\n                msg = \"Time out occurred while waiting for %s\" % condition_str\n>               raise Exception(msg)\nE               Exception: Time out occurred while waiting for stats to be as expected\n\ntests/utils/common.py:224: Exception","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1518 p1 connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"WARNING  root:snappi_api.py:1518 p2 connectedLinkDown","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"capture.test_combined_capture_filters"},{"name":"package","value":"capture.test_combined_capture_filters"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":1,"passed":235,"unknown":0,"total":245},"items":[{"uid":"fe52736e67aac45","status":"passed","time":{"start":1758689973604,"stop":1758690203091,"duration":229487}},{"uid":"f3c1731d640be1ac","status":"passed","time":{"start":1758676870469,"stop":1758677105835,"duration":235366}},{"uid":"e72019e11b4fc357","status":"passed","time":{"start":1758668705788,"stop":1758668934173,"duration":228385}},{"uid":"c3ad3ee1c8276434","status":"passed","time":{"start":1758660701840,"stop":1758660933228,"duration":231388}},{"uid":"aa2470bacf8474ef","status":"passed","time":{"start":1758651378745,"stop":1758651605191,"duration":226446}},{"uid":"fab46a9fad151474","status":"passed","time":{"start":1758633854796,"stop":1758634079442,"duration":224646}},{"uid":"98a60395848e6c3c","status":"passed","time":{"start":1758625583144,"stop":1758625811499,"duration":228355}},{"uid":"c69a299fa199ff02","status":"passed","time":{"start":1758569175499,"stop":1758569408506,"duration":233007}},{"uid":"46d1a8ee32c6e7c5","status":"passed","time":{"start":1758561165365,"stop":1758561396008,"duration":230643}},{"uid":"2ec93a40cdfe5d40","status":"passed","time":{"start":1758552031944,"stop":1758552267101,"duration":235157}},{"uid":"bb0f162738c01477","status":"passed","time":{"start":1758541969381,"stop":1758542195420,"duration":226039}},{"uid":"2742ba89d769cda7","status":"passed","time":{"start":1758534144550,"stop":1758534371525,"duration":226975}},{"uid":"f60ca640132761b6","status":"passed","time":{"start":1758526353634,"stop":1758526582265,"duration":228631}},{"uid":"78fc28e5e6591fbb","status":"passed","time":{"start":1758517867315,"stop":1758518096287,"duration":228972}},{"uid":"9ddae562245db43c","status":"passed","time":{"start":1758344714423,"stop":1758344944652,"duration":230229}},{"uid":"b8d9102dd1e1f96a","status":"passed","time":{"start":1758335408673,"stop":1758335630738,"duration":222065}},{"uid":"388630bc5ede91df","status":"passed","time":{"start":1758318657548,"stop":1758318886781,"duration":229233}},{"uid":"d51cf4f9d324bf04","status":"passed","time":{"start":1758284318408,"stop":1758284541622,"duration":223214}},{"uid":"edb39e5ea4a25254","status":"passed","time":{"start":1758276810478,"stop":1758277034707,"duration":224229}},{"uid":"afb8ea0242f14cfd","status":"passed","time":{"start":1758266026949,"stop":1758266258501,"duration":231552}}]},"tags":[]},"source":"21227d9f8e94189f.json","parameterValues":[]}
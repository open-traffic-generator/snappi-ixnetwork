{"uid":"1cc8897809e61a5a","name":"test_rsvp_traffic","historyId":"pytest:rsvp.test_rsvp#test_rsvp_traffic","time":{"start":1755152544019,"stop":1755152588305,"duration":44286},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 375, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 950, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 576, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 647, in create_traffic\n    devices = self.get_device_info(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 547, in get_device_info\n    \"dev_info\": self._api.ixn_objects.get(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/objectdb.py\", line 38, in get\n    raise NameError(\n snappi object named egress1 not found in internal db","statusTrace":"self = <snappi_ixnetwork.objectdb.IxNetObjects object at 0x7fee4f2b4520>\nname = 'egress1'\n\n    def get(self, name):\n        try:\n>           return self._ixnet_infos[name]\nE           KeyError: 'egress1'\n\nsnappi_ixnetwork/objectdb.py:35: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fee50a43760>\nconfig = <snappi.snappi.Config object at 0x7fee502ab7e0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:375: in config_ixnetwork\n    self.traffic_item.config()\nsnappi_ixnetwork/trafficitem.py:950: in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\nsnappi_ixnetwork/trafficitem.py:576: in get_ixn_config\n    tr = self.create_traffic(config)\nsnappi_ixnetwork/trafficitem.py:647: in create_traffic\n    devices = self.get_device_info(config)\nsnappi_ixnetwork/trafficitem.py:547: in get_device_info\n    \"dev_info\": self._api.ixn_objects.get(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.objectdb.IxNetObjects object at 0x7fee4f2b4520>\nname = 'egress1'\n\n    def get(self, name):\n        try:\n            return self._ixnet_infos[name]\n        except KeyError:\n            self.logger.debug(\"These are existing names %s\" % self.names)\n>           raise NameError(\n                \"snappi object named {0} not found in internal db\".format(name)\n            )\nE           NameError: snappi object named egress1 not found in internal db\n\nsnappi_ixnetwork/objectdb.py:38: NameError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7fee50a43760>\nb2b_raw_config = <snappi.snappi.Config object at 0x7fee502ab7e0>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\n\n    def test_rsvp_traffic(api, b2b_raw_config, utils):\n        \"\"\"Test rsvp traffic\n        - set_config\n        - start protocols\n        - verify rsvp metrics\n        - start traffic\n        - verify flow metrics\n        - verify capture\n        \"\"\"\n        api.set_config(api.config())\n        b2b_raw_config.flows.clear()\n    \n        # Adding ports\n        p1, p2 = b2b_raw_config.ports\n    \n        # Device\n        p1d1, p2d1 = b2b_raw_config.devices.device(name=\"p1d1\").device(name=\"p2d1\")\n    \n        # Ethernet\n        p1d1_eth, p2d1_eth = p1d1.ethernets.add(), p2d1.ethernets.add()\n        p1d1_eth.connection.port_name = p1.name\n        p1d1_eth.name = \"p1d1_eth\"\n        p1d1_eth.mac = \"00:00:01:00:00:01\"\n        p1d1_eth.mtu = 1500\n    \n        p2d1_eth.connection.port_name = p2.name\n        p2d1_eth.name = \"p2d1_eth\"\n        p2d1_eth.mac = \"00:00:02:00:00:01\"\n        p2d1_eth.mtu = 1500\n    \n        # port 1 device 1 ipv4\n        p1d1_ipv4 = p1d1_eth.ipv4_addresses.add()\n        p1d1_ipv4.address = \"100.1.0.1\"\n        p1d1_ipv4.gateway = \"100.1.0.11\"\n        p1d1_ipv4.name = \"p1d1_ipv4\"\n        p1d1_ipv4.prefix = 24\n    \n        # port 1 device 1 rsvp 1\n        rsvp1 = p1d1.rsvp\n        rsvp1.name = \"p1_rsvp\"\n        rsvpIf1 = rsvp1.ipv4_interfaces.add()\n        rsvpIf1.ipv4_name = \"p1d1_ipv4\"\n        rsvpIf1.neighbor_ip = \"100.1.0.11\"\n        rsvp1_lsp_intf = rsvp1.lsp_ipv4_interfaces.add()\n        rsvp1_lsp_intf.ipv4_name = \"p1d1_ipv4\"\n        egress_lsp = rsvp1_lsp_intf.p2p_egress_ipv4_lsps\n        egress_lsp.name = \"egress1\"\n    \n        # port 2 device 1 ipv4\n        p2d1_ipv4 = p2d1_eth.ipv4_addresses.add()\n        p2d1_ipv4.address = \"100.1.0.11\"\n        p2d1_ipv4.gateway = \"100.1.0.1\"\n        p2d1_ipv4.name = \"p2d1_ipv4\"\n        p2d1_ipv4.prefix = 24\n    \n        # port 2 device 1 rsvp 1\n        rsvp2 = p2d1.rsvp\n        rsvp2.name = \"p2_rsvp\"\n        rsvpIf2 = rsvp2.ipv4_interfaces.add()\n        rsvpIf2.ipv4_name = \"p2d1_ipv4\"\n        rsvpIf2.neighbor_ip = \"100.1.0.1\"\n        rsvp2_lsp_intf = rsvp2.lsp_ipv4_interfaces.add()\n        rsvp2_lsp_intf.ipv4_name = \"p2d1_ipv4\"\n        ing_lsp1 = rsvp2_lsp_intf.p2p_ingress_ipv4_lsps.add()\n        ing_lsp1.name = \"ingress1\"\n        ing_lsp1.remote_address = \"100.1.0.1\"\n        ing_lsp1.tunnel_id = 1\n        ing_lsp2 = rsvp2_lsp_intf.p2p_ingress_ipv4_lsps.add()\n        ing_lsp2.name = \"ingress2\"\n        ing_lsp2.remote_address = \"100.1.0.1\"\n        ing_lsp2.tunnel_id = 2\n        ing_lsp3 = rsvp2_lsp_intf.p2p_ingress_ipv4_lsps.add()\n        ing_lsp3.name = \"ingress3\"\n        ing_lsp3.remote_address = \"100.1.0.1\"\n        ing_lsp3.tunnel_id = 3\n        ing_lsp4 = rsvp2_lsp_intf.p2p_ingress_ipv4_lsps.add()\n        ing_lsp4.name = \"ingress4\"\n        ing_lsp4.remote_address = \"100.1.0.1\"\n        ing_lsp4.tunnel_id = 4\n        ing_lsp5 = rsvp2_lsp_intf.p2p_ingress_ipv4_lsps.add()\n        ing_lsp5.name = \"ingress5\"\n        ing_lsp5.remote_address = \"100.1.0.1\"\n        ing_lsp5.tunnel_id = 5\n        ing_lsp6 = rsvp2_lsp_intf.p2p_ingress_ipv4_lsps.add()\n        ing_lsp6.name = \"ingress6\"\n        ing_lsp6.remote_address = \"100.1.0.1\"\n        ing_lsp6.tunnel_id = 6\n    \n        # Flow\n        f1 = b2b_raw_config.flows.add(name=\"f1\")\n        f1.tx_rx.device.tx_names = [ing_lsp2.name]\n        f1.tx_rx.device.rx_names = [egress_lsp.name]\n        f1.size.fixed = 128\n        f1.rate.pps = 1000\n        f1.duration.fixed_packets.packets = 1\n        f1.metrics.enable = True\n        f1_eth_pkt, f1_mpls_pkt, f1_ip_pkt = f1.packet.ethernet().mpls().ipv4()\n        f1_eth_pkt.src.value = p2d1_eth.mac\n        f1_eth_pkt.dst.choice = \"auto\"\n        f1_mpls_pkt.label.choice = \"auto\"\n        f1_ip_pkt.src.value = p2d1_ipv4.address\n        f1_ip_pkt.dst.value = p1d1_ipv4.address\n    \n        f2 = b2b_raw_config.flows.add(name=\"f2\")\n        f2.tx_rx.device.tx_names = [ing_lsp5.name]\n        f2.tx_rx.device.rx_names = [egress_lsp.name]\n        f2.size.fixed = 128\n        f2.rate.pps = 1000\n        f2.duration.fixed_packets.packets = 1\n        f2.metrics.enable = True\n        f2_eth_pkt, f2_mpls_pkt, f2_ip_pkt = f2.packet.ethernet().mpls().ipv4()\n        f2_eth_pkt.src.value = p2d1_eth.mac\n        f2_eth_pkt.dst.value = p1d1_eth.mac\n        f2_ip_pkt.src.value = p2d1_ipv4.address\n        f2_ip_pkt.dst.value = p1d1_ipv4.address\n    \n>       api.set_config(b2b_raw_config)\n\ntests/rsvp/test_rsvp.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7fee50a43760>\nconfig = <snappi.snappi.Config object at 0x7fee502ab7e0>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 375, in config_ixnetwork\nE               self.traffic_item.config()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 950, in config\nE               ixn_traffic_item = self.get_ixn_config(self._config)[0]\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 576, in get_ixn_config\nE               tr = self.create_traffic(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 647, in create_traffic\nE               devices = self.get_device_info(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 547, in get_device_info\nE               \"dev_info\": self._api.ixn_objects.get(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/objectdb.py\", line 38, in get\nE               raise NameError(\nE            snappi object named egress1 not found in internal db\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"rsvp.test_rsvp"},{"name":"package","value":"rsvp.test_rsvp"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"a51828e1f1f5843c","status":"failed","statusDetails":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 375, in config_ixnetwork\n    self.traffic_item.config()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 950, in config\n    ixn_traffic_item = self.get_ixn_config(self._config)[0]\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 576, in get_ixn_config\n    tr = self.create_traffic(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 647, in create_traffic\n    devices = self.get_device_info(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/trafficitem.py\", line 547, in get_device_info\n    \"dev_info\": self._api.ixn_objects.get(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/objectdb.py\", line 38, in get\n    raise NameError(\n snappi object named ingress2 not found in internal db","time":{"start":1754658965828,"stop":1754659004841,"duration":39013}}]},"tags":[]},"source":"1cc8897809e61a5a.json","parameterValues":[]}
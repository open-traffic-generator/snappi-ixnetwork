{"uid":"ff6659ac3182aca1","name":"test_ipv6_next_header","historyId":"pytest:ipv6.test_ipv6_next_header#test_ipv6_next_header","time":{"start":1753368506584,"stop":1753368506691,"duration":107},"status":"failed","statusMessage":"snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\n    self.config_ixnetwork(config)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\n    self._connect()\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\n    self._connection = Connection(\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n  File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\n    raise ConnectionError(\n Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.","statusTrace":"self = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b351bb00>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n>           self.config_ixnetwork(config)\n\nsnappi_ixnetwork/snappi_api.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsnappi_ixnetwork/snappi_api.py:362: in config_ixnetwork\n    self._connect()\nsnappi_ixnetwork/snappi_api.py:1007: in _connect\n    platform = TestPlatform(self._address, rest_port=self._port)\n.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py:80: in __init__\n    self._connection = Connection(\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:151: in __init__\n    self._scheme = self._determine_test_tool_platform(platform)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ixnetwork_restpy.connection.Connection object at 0x7f21b3584100>\nplatform = None\n\n    def _determine_test_tool_platform(self, platform):\n        self._info(\n            \"Determining the platform and rest_port using the %s address...\"\n            % self._hostname\n        )\n        if platform is not None:\n            self._warn(\n                \"The `platform` parameter is deprecated and the value `%s` will be ignored.\"\n                % platform\n            )\n        self._platform = None\n        rest_ports = [443, 11009]\n        if self._rest_port is not None:\n            if self._rest_port in rest_ports:\n                rest_ports.remove(self._rest_port)\n            rest_ports.insert(0, self._rest_port)\n        for rest_port in rest_ports:\n            for scheme in [\"http\", \"https\"]:\n                try:\n                    if self._url_prefix is not None:\n                        url = \"%s://%s:%s/%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                            self._url_prefix,\n                        )\n                    else:\n                        url = \"%s://%s:%s/api/v1/auth/session\" % (\n                            scheme,\n                            self._hostname,\n                            rest_port,\n                        )\n                    payload = json.dumps({\"username\": \"\", \"password\": \"\"})\n                    headers = self._headers\n                    headers[\"content-type\"] = \"application/json\"\n                    response = self._request(\n                        method=\"POST\",\n                        url=url,\n                        data=payload,\n                        headers=headers,\n                        verify=self._verify_cert,\n                        timeout=2,\n                    )\n                    if response.status_code in [401, 403, 200]:\n                        if \"server\" not in response.headers:\n                            response.headers[\"server\"] = \"Jetty\"\n                        for server in Connection.PLATFORMS:\n                            if server in response.headers[\"server\"]:\n                                self._platform = Connection.PLATFORMS[server]\n                                self._rest_port = rest_port\n                                self._info(\n                                    \"Connection established to `%s://%s:%s on %s`\"\n                                    % (\n                                        scheme,\n                                        self._hostname,\n                                        self._rest_port,\n                                        self._platform,\n                                    )\n                                )\n                                return scheme\n                    else:\n                        raise Exception()\n                except Exception as e:\n                    self._warn(\n                        \"Unable to connect to %s://%s:%s.\"\n                        % (scheme, self._hostname, rest_port)\n                    )\n>       raise ConnectionError(\n            \"Unable to connect to %s. Check the ip address and consider the rest_port parameter.\"\n            % self._hostname\n        )\nE       ixnetwork_restpy.errors.ConnectionError: Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\n.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py:220: ConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\napi = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nb2b_raw_config_vports = <snappi.snappi.Config object at 0x7f21b351bb00>\nutils = <module 'utils' from '/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/tests/utils/__init__.py'>\ntx_vport = <snappi.snappi.Port object at 0x7f21b36d39c0>\nrx_vport = <snappi.snappi.Port object at 0x7f21b36d0d10>\n\n    def test_ipv6_next_header(\n        api, b2b_raw_config_vports, utils, tx_vport, rx_vport\n    ):\n        \"\"\"\n        Configure the ipv6 packet,\n        - next header shall be set to auto by default\n    \n        Validate,\n        - Fetch the IPv6 header config via restpy and validate\n          against expected\n        \"\"\"\n        # fixed\n        flow1 = b2b_raw_config_vports.flows[0]\n        src = \"00:0C:29:E3:53:EA\"\n        dst = \"00:0C:29:E3:53:F4\"\n    \n        eth, ipv6, udp = flow1.packet.ethernet().ipv6().udp()\n        eth.src.value = src\n        eth.dst.value = dst\n        ipv6.version.value = 15\n        ipv6.traffic_class.value = 255\n        ipv6.flow_label.value = 1048575\n        ipv6.payload_length.value = 255\n        ipv6.hop_limit.value = 255\n        ipv6.src.value = \"2001::1\"\n        ipv6.dst.value = \"2002::1\"\n    \n        # fixed validation\n        f1_attrs = {\n            \"Version\": str(ipv6.version.value),\n            \"Traffic Class\": str(ipv6.traffic_class.value),\n            \"Flow Label\": str(ipv6.flow_label.value),\n            \"Next Header\": \"17\",\n            \"Hop Limit\": str(ipv6.hop_limit.value),\n            \"Source Address\": ipv6.src.value,\n            \"Destination Address\": ipv6.dst.value,\n        }\n>       api.set_config(b2b_raw_config_vports)\n\ntests/ipv6/test_ipv6_next_header.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <snappi_ixnetwork.snappi_api.Api object at 0x7f21b3aa0940>\nconfig = <snappi.snappi.Config object at 0x7f21b351bb00>\n\n    def set_config(self, config):\n        \"\"\"Set, update, append or delete the configuration\"\"\"\n        try:\n            if isinstance(config, (type(self._config_type), str)) is False:\n                raise TypeError(\n                    \"The content must be of type Union[Config, str]\"\n                )\n    \n            if isinstance(config, str) is True:\n                config = self._config_type.deserialize(config)\n            self.config_ixnetwork(config)\n            # CP-DP Convergence config\n            ixn_cpdpconvergence = self._traffic.Statistics.CpdpConvergence\n            ixn_cpdpconvergence.Enabled = False\n            cfg = config.get(\"events\")\n            if cfg is not None:\n                cp_events = cfg.get(\"cp_events\")\n                if cp_events is not None:\n                    cp_events_enable = cp_events.get(\"enable\")\n                else:\n                    cp_events_enable = False\n                dp_events = cfg.get(\"dp_events\")\n                if dp_events is not None:\n                    dp_events_enable = dp_events.get(\"enable\")\n                    rx_rate_threshold = dp_events.get(\"rx_rate_threshold\")\n                else:\n                    dp_events_enable = False\n                # Enable cp-dp convergence if any one of cp or dp is true\n                if cp_events_enable or dp_events_enable:\n                    ixn_cpdpconvergence.Enabled = True\n                    # For CP events\n                    if cp_events_enable:\n                        ixn_cpdpconvergence.EnableControlPlaneEvents = True\n                    # For DP events\n                    if dp_events_enable:\n                        if self.traffic_item.has_latency is True:\n                            raise Exception(\n                                \"We are supporting either latency or dp convergence\"\n                            )\n                        ixn_cpdpconvergence.EnableDataPlaneEventsRateMonitor = (\n                            True\n                        )\n                        ixn_cpdpconvergence.DataPlaneThreshold = (\n                            rx_rate_threshold\n                        )\n    \n                for ixn_traffic_item in self._traffic_item.find():\n                    ixn_traffic_item.Tracking.find()[0].TrackBy = [\n                        \"destEndpoint0\",\n                        \"destSessionDescription0\",\n                    ]\n            else:\n                ixn_cpdpconvergence.Enabled = False\n    \n        except Exception as err:\n>           raise SnappiIxnException(err)\nE           snappi_ixnetwork.exceptions.SnappiIxnException:   File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 283, in set_config\nE               self.config_ixnetwork(config)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 362, in config_ixnetwork\nE               self._connect()\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/snappi_ixnetwork/snappi_api.py\", line 1007, in _connect\nE               platform = TestPlatform(self._address, rest_port=self._port)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/testplatform/testplatform.py\", line 80, in __init__\nE               self._connection = Connection(\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 151, in __init__\nE               self._scheme = self._determine_test_tool_platform(platform)\nE             File \"/home/github-runner/actions-runner/_work/snappi-ixnetwork/snappi-ixnetwork/.env/lib/python3.10/site-packages/ixnetwork_restpy/connection.py\", line 220, in _determine_test_tool_platform\nE               raise ConnectionError(\nE            Unable to connect to novus1-715849.ccu.is.keysight.com. Check the ip address and consider the rest_port parameter.\n\nsnappi_ixnetwork/snappi_api.py:328: SnappiIxnException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"--------------------------------- Captured Log ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"--------------------------------- Captured Out ---------------------------------","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"pytest"},{"name":"host","value":"snappi-ixn-ci-novus10g"},{"name":"testClass","value":"ipv6.test_ipv6_next_header"},{"name":"package","value":"ipv6.test_ipv6_next_header"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":172,"unknown":0,"total":177},"items":[{"uid":"4e98ede1a3f854bc","status":"passed","time":{"start":1752836398951,"stop":1752836405875,"duration":6924}},{"uid":"79b22a9628a60c68","status":"passed","time":{"start":1752760243902,"stop":1752760250457,"duration":6555}},{"uid":"9415faea7f8fb528","status":"passed","time":{"start":1752244885705,"stop":1752244892475,"duration":6770}},{"uid":"4ad95a54285933bc","status":"passed","time":{"start":1752145840252,"stop":1752145846899,"duration":6647}},{"uid":"9c5efc0ad09bad9d","status":"passed","time":{"start":1751479010972,"stop":1751479018574,"duration":7602}},{"uid":"7351be34ab22501d","status":"passed","time":{"start":1751472402834,"stop":1751472411748,"duration":8914}},{"uid":"9899c1fbb2af8ab","status":"passed","time":{"start":1751283215057,"stop":1751283221636,"duration":6579}},{"uid":"4073064b2b6270fd","status":"passed","time":{"start":1751276144532,"stop":1751276151081,"duration":6549}},{"uid":"7cf55ffe2bdda4c9","status":"passed","time":{"start":1751231642336,"stop":1751231649802,"duration":7466}},{"uid":"b4ad5647a7ba676a","status":"passed","time":{"start":1750985352305,"stop":1750985359547,"duration":7242}},{"uid":"3c4356298141f9c9","status":"passed","time":{"start":1750836697285,"stop":1750836704111,"duration":6826}},{"uid":"e0ab029ba66c99f9","status":"passed","time":{"start":1750656827226,"stop":1750656834783,"duration":7557}},{"uid":"f282792645036610","status":"passed","time":{"start":1750246239210,"stop":1750246246170,"duration":6960}},{"uid":"5bb7e992214778d5","status":"passed","time":{"start":1750239203710,"stop":1750239210453,"duration":6743}},{"uid":"c266d54e96644709","status":"passed","time":{"start":1749770085540,"stop":1749770094260,"duration":8720}},{"uid":"54bb899080d4524d","status":"passed","time":{"start":1749546564693,"stop":1749546571914,"duration":7221}},{"uid":"56ea516ccdbe418e","status":"passed","time":{"start":1748968328989,"stop":1748968337525,"duration":8536}},{"uid":"722a78575451f7f9","status":"passed","time":{"start":1748929822995,"stop":1748929830254,"duration":7259}},{"uid":"90335e6d0040bd3b","status":"passed","time":{"start":1748864245704,"stop":1748864253610,"duration":7906}},{"uid":"cd3e3db452a32b8e","status":"passed","time":{"start":1748857106711,"stop":1748857115187,"duration":8476}}]},"tags":[]},"source":"ff6659ac3182aca1.json","parameterValues":[]}